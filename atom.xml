<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Zhen Lu&#39;s blog</title>
<link>https://leslie-lu.github.io/atom.html</link>
<atom:link href="https://leslie-lu.github.io/atom.xml" rel="self" type="application/rss+xml"/>
<description>Zhen Lu&#39;s blog</description>
<language>en</language>
<generator>quarto-1.8.24</generator>
<lastBuildDate>Fri, 26 Sep 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>生统爱好者周刊（第 1 期）：博士后，“太多了”？</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/09/26/biostat_weekly_issue1/</link>
  <description><![CDATA[ 





<p>这里记录每周值得分享的生统相关内容，周五发布。</p>
<p>本杂志开源（GitHub: <a href="https://github.com/openbiostat/biostat-weekly" title="openbiostat/biostat-weekly">openbiostat/biostat-weekly</a>），欢迎提交 issue 投稿或推荐生统相关内容。</p>
<p><a href="https://github.com/openbiostat/biostat-weekly/discussions" title="生统爱好者周刊讨论区">「生统爱好者周刊讨论区」</a></p>
<section id="封面图" class="level3">
<h3 class="anchored" data-anchor-id="封面图">封面图</h3>
<p><img src="https://pbs.twimg.com/media/G1SqNtrbQAAh2qs?format=jpg&amp;name=large.png" class="img-fluid"></p>
</section>
<section id="本周话题博士后太多了" class="level3">
<h3 class="anchored" data-anchor-id="本周话题博士后太多了">本周话题：<a href="https://mp.weixin.qq.com/s/gIwP5h2eVejnmuYn7z-SJQ">博士后，“太多了”？</a></h3>
<blockquote class="blockquote">
<p>据人力资源和社会保障部消息，经过40年的发展，我国共设立了8800多个博士后科研流动站、工作站，累计招收博士后人员超40万人，2024年招收人数再创新高，达4.2万人。</p>
</blockquote>
<p>博士后作为中国高新科技的一把利器，应当让其得到“磨砺”，而不是“消磨”，在不断扩招的背景下，更要重视博士后的困境与出路，让其能全身心投入到科研事业中，可以充分发挥高层次创新型人才的创造力、创新力、科研力，如此才能在中国科研之路上，披荆斩棘。</p>
</section>
<section id="生统研究" class="level3">
<h3 class="anchored" data-anchor-id="生统研究">生统研究</h3>
<ol type="1">
<li><a href="https://mp.weixin.qq.com/s/EnRT1wpgwfd0HinFY5PukA">Nature | 大语言模型重新定义疾病预测与健康管理</a></li>
</ol>
<p><img src="https://media.springernature.com/lw685/springer-static/image/art%3A10.1038%2Fs41586-025-09529-3/MediaObjects/41586_2025_9529_Fig1_HTML.png?as=webp" class="img-fluid"></p>
<p>随着慢性病和多病共存问题的加剧，传统的疾病预测和健康管理方法难以应对复杂的健康数据，特别是在长期健康变化的监测和个性化预防方面。现有的疾病预测模型通常只聚焦于单一疾病，忽略了疾病之间的相互影响及其时间性进展。该研究的意义在于，Delphi-2M 模型能够全面预测多种疾病并理解疾病之间的相互关系，推动精准医疗的发展，实现个性化健康管理。通过捕捉疾病的时间性进展，模型为长期健康评估提供了新视角，并展示了在不同地区的广泛适用性，能够为全球公共卫生决策提供支持。</p>
<ul>
<li>论文链接：https://doi.org/10.1038/s41586-025-09529-3</li>
</ul>
<ol start="2" type="1">
<li><a href="https://mp.weixin.qq.com/s/3mim5tTMGkMfR8eDZkPmNw">NEJM | 宫颈癌</a></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250925152141.png" class="img-fluid"></p>
<p>该综述系统且全面地介绍了宫颈癌的流行病学、筛查与预防、分期、早期宫颈癌的手术治疗、局部晚期宫颈癌的放化疗、局部晚期宫颈癌的免疫治疗及靶向治疗等多个领域。</p>
<ul>
<li>论文链接：10.1056/NEJMra2404457</li>
</ul>
<ol start="3" type="1">
<li><a href="https://mp.weixin.qq.com/s/Piih9-eTVXUPomA8QUU8zw">Nat Rev Clin Oncol | 宫颈癌全病程治疗进展</a></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250925155951.png" class="img-fluid"></p>
<p>该综述从外科治疗、局晚期宫颈癌治疗和药物治疗几个方面系统阐述了宫颈癌治疗的最新进展。</p>
<ul>
<li>论文链接：https://doi.org/10.1038/s41571-024-00977-w</li>
</ul>
</section>
<section id="博文资讯" class="level3">
<h3 class="anchored" data-anchor-id="博文资讯">博文资讯</h3>
<ol start="4" type="1">
<li><a href="https://mp.weixin.qq.com/s/O7vapgy63jJcLRRE5bLV8w">当 AI 遇到医学统计学</a></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250925155214.png" class="img-fluid"></p>
<p>NEJM 综述深入讨论将 AI 应用于生物医学数据分析时所面临的统计学挑战，以及研究人员如何才既能从数据中尽可能多地获得信息，又能确保数据驱动的结论准确、稳健且可再现。</p>
<ul>
<li>论文链接：10.1056/NEJMra2212850</li>
</ul>
<ol start="5" type="1">
<li><a href="https://mp.weixin.qq.com/s/25w3zdP5xbVHCOvAl3rtZg">存在治疗转组的随机试验中调整总生存期的统计学考虑</a></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250925155349.png" class="img-fluid"></p>
<p>出于伦理考虑，新药的随机临床试验中通常允许治疗转组。当对照组患者转组到实验组并从实验性治疗中获益时，根据病人随机分配的治疗组别对总生存期进行统计推断将存在偏差。如不进行适当的调整，就无法充分解答“治疗是否有利于总生存期“这一临床问题。本文介绍了IPCW､RPSFTM和Two Stage等常见调整总生存期方法的原理，并介绍这些方法在具体临床问题和估计目标中的应用。</p>
<ol start="6" type="1">
<li><a href="https://uptimelabs.io/you-vibe-it-you-run-it/?utm_id=FAUN_VarBear495_Link_title" title="关于 Vibe coding 以及 AI 的思考">关于 Vibe coding 以及 AI 的思考</a></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250925160010.png" class="img-fluid"></p>
<p>如果负责这些 coding 工作的人员从未参与开发，并且几乎没有机会锻炼编写代码所需的技能，那么这些工作在失去 Vibe coding 以及 AI 辅助后只会变得更加困难。</p>
</section>
<section id="工具" class="level3">
<h3 class="anchored" data-anchor-id="工具">工具</h3>
<ol start="7" type="1">
<li><a href="https://www.tug.org/texlive/" title="TeX Live 官方网站">本地TeX Live安装部署 - 告别Overleaf的完美替代方案</a></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250925153243.png" class="img-fluid"></p>
<p>对于生物统计学研究者而言，LaTeX是撰写学术论文的重要工具。虽然Overleaf提供了便捷的在线编译环境，但本地安装TeX Live具有更多优势：完全离线工作、无网络限制、编译速度更快、可自定义配置、支持大型项目管理。TeX Live是最完整的LaTeX发行版，包含所有常用宏包，特别适合生统论文中的数学公式、统计表格、流程图制作。本地部署后可配合VS Code、TeXstudio等编辑器，提供语法高亮、自动补全、实时预览等功能，大幅提升写作效率。对于需要处理敏感数据或大型统计分析报告的研究者，本地环境更安全可靠。</p>
<ol start="8" type="1">
<li><a href="https://github.com/cafferychen777/mLLMCelltype" title="mLLMCelltype GitHub">mLLMCelltype: 基于多语言大模型统计共识的单细胞RNA测序细胞类型注释工具</a></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250925153342.png" class="img-fluid"></p>
<p>mLLMCelltype 是一个创新的 Python 框架，专门用于单细胞 RNA 测序 (scRNA-seq) 数据的细胞类型自动注释。该工具通过多个大语言模型的迭代共识算法，显著提高注释准确性并提供可靠的不确定性量化指标。</p>
<ol start="9" type="1">
<li><a href="https://thomasthornton.cloud/2025/09/10/github-copilot-custom-chat-modes-ai-personas-that-match-your-needs/?utm_id=FAUN_VarBear495_Link_title" title="自定义 GitHub Copilot 角色">自定义 GitHub Copilot 角色</a></li>
</ol>
<p><img src="https://i0.wp.com/thomasthornton.cloud/wp-content/uploads/2025/09/image-1.png?w=522&amp;ssl=1" class="img-fluid"></p>
<p>推文介绍了如何通过项目中的简单 Markdown 配置文件完成 Copilot Chat 行为方式的自定义。AI 正在向直接嵌入到开发人员工作流程中的方向转变。</p>
</section>
<section id="资源" class="level3">
<h3 class="anchored" data-anchor-id="资源">资源</h3>
<ol start="10" type="1">
<li><a href="https://mp.weixin.qq.com/s/I_3bulaOkD--7yWcURkDBw">学术写作入门必备</a></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250925153725.png" class="img-fluid"></p>
<p>提升学术写作水平不仅需要长期的积累练习，也需要掌握一些系统的写作技巧。</p>
<ol start="11" type="1">
<li><a href="https://mp.weixin.qq.com/s/8u72xFuk6OYoa62x0KvQ0A">数据论文国家标准</a></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250925155538.png" class="img-fluid"></p>
<p>新标准对数据论文的组成部分、撰写格式和编排要求提出了明确规范，这一标准标志着数据论文（Data Paper）在我国科研出版中有了统一的编写规范，为推动开放科学和数据共享奠定了重要基础。</p>
<ol start="12" type="1">
<li><a href="https://ropensci.org/blog/2025/09/18/markdown-programmatic-parsing/" title="以编程方式编辑或解析 R Markdown / Quarto 文档的所有方法">以编程方式编辑或解析 R Markdown / Quarto 文档的所有方法</a></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250925154425.png" class="img-fluid"></p>
<p>推文概述一些以编程方式解析和编辑 Markdown 文件（Markdown、R Markdown、Quarto、Hugo 文件等）的方法。</p>
</section>
<section id="贡献者github-id" class="level3">
<h3 class="anchored" data-anchor-id="贡献者github-id">贡献者（GitHub ID）</h3>
<p>「OpenBioStat 生统爱好者周刊」运维小组：</p>
<ul>
<li>[<code>@Leslie-Lu</code>]（陆震）</li>
<li>[<code>@YihanChen325</code>]（陈奕含）</li>
<li>[<code>@kirihsia</code>]（夏鑫辛）</li>
<li>[<code>@GCRPM</code>]（徐林玉）</li>
</ul>
</section>
<section id="订阅" class="level3">
<h3 class="anchored" data-anchor-id="订阅">订阅</h3>
<p>本周刊每周五发布，同步更新在微信公众号「陆震生物统计」（luzhen-biostat）上。</p>
<p>微信搜索“陆震生物统计”或者扫描二维码，即可订阅。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/qrcode_for_gh_395f59db8b4c_258.jpg" class="img-fluid"></p>
<p>（完）</p>


<!-- -->

</section>

 ]]></description>
  <category>biostat-weekly</category>
  <guid>https://leslie-lu.github.io/blog/2025/09/26/biostat_weekly_issue1/</guid>
  <pubDate>Fri, 26 Sep 2025 00:00:00 GMT</pubDate>
  <media:content url="https://pbs.twimg.com/media/G1SqNtrbQAAh2qs?format=jpg&amp;name=large" medium="image"/>
</item>
<item>
  <title>恢复驾驶证科目一考试</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/07/28/driver_license_test/</link>
  <description><![CDATA[ 





<section id="准备时间考试地点" class="level3">
<h3 class="anchored" data-anchor-id="准备时间考试地点">准备时间、考试地点</h3>
<p>20250717-20250727；深圳龙岗园山小型汽车考场</p>
</section>
<section id="准备内容" class="level3">
<h3 class="anchored" data-anchor-id="准备内容">准备内容</h3>
<ol type="1">
<li><p>假证/假牌12，遮挡/不挂9，不按规定3；遮挡号码属于违法行为</p></li>
<li><p>大型载客汽车只有A1可准驾</p></li>
<li><p>C2准驾车长小于6米且乘坐人数小于等于9人的自动载客汽车</p></li>
<li><p>机动车轮廓中间有个红色感叹号，表示系统故障</p></li>
<li><p>空心红色圆圈表示禁止一切车辆和行人通行</p></li>
<li><p>蓄电池闪红色，表示充电系统故障；一个电池充电，三个电池蓄电；动力蓄电池闪黄色，表示低荷电状态警告</p></li>
<li><p>不能加速驶离</p></li>
<li><p>自行车代表非机动车道，表示仅供非机动车行驶</p></li>
<li><p>黄色实线内由黄色实线填充，且中间有一个黑白障碍物，代表接近障碍物标线，用以只是路面有固定性障碍物，警告车辆驾驶人谨慎行车</p></li>
<li><p>黄黑相间竖着的斜线是立面标记，提醒驾驶人注意，在行车道或近旁有高出路面的物体，以防发生碰撞</p></li>
<li><p>横向减速强减速，纵向减速弱降速</p></li>
<li><p>不按规定使用灯光记1分；车辆发生故障或事故后不按规定使用灯光或设置警告标志的记分情况记3分；红色图案中间一个叉是禁止停车标志，这个标志附近停车是违法行为，记1分；违反禁令标志、禁止标线指示的，记1分；灯光安全带记 1 分；</p></li>
<li><p>驾驶未按规定定期进行安全技术检验的公路客运汽车、旅游客运汽车、危险物品运输车辆以外的机动车上道路行驶的，记1分；危险车不年检扣3分，小车不年检扣1分</p></li>
<li><p>无论在什么道路上，未按规定系安全带的都是记1分</p></li>
<li><p>不按规定会车，或者在高速、城市快速路以外的道路上不按规定倒车、掉头的，记1分</p></li>
<li><p>驾驶载货汽车载物超过最大允许总质量未达到百分之三十的，记1分；载货下一中三上六</p></li>
<li><p>驾驶机动车载货长度、宽度、高度超过规定的，记1分；驾驶校车、中型以上载客载货汽车、危险物品运输车辆在高速、城市快速路以外的道路上行驶超过规定时速百分之十以上未达到百分之二十的，记1分</p></li>
<li><p>黄灯一直在闪烁，表示警示，提醒过往车辆注意瞭望，确认安全后通过，表示路口交通信号暂时解除；路口只有一个黄色的灯闪烁是注意瞭望，确认安全后通过</p></li>
<li><p>红灯亮时，右转弯的车辆在不妨碍被放行的车辆、行人通行的情况下，可以通行</p></li>
<li><p>黄色为警告标志，警告标志的颜色为黄底、黑边、黑图案，形状为等边三角形，顶角朝上。</p></li>
<li><p>急转弯标志：箭头向左是向左急转弯，箭头向右是向右急转弯</p></li>
<li><p>斜着的字母Z或N表示反向弯路，警告驾驶人减速慢行；一弯急，两弯反向，三弯连续</p></li>
<li><p>一个箭头向上是上陡坡，两个箭头向上是连续上坡，在上坡时会有视觉上的盲点，应减速慢行</p></li>
<li><p>两头宽中间窄是桥面变窄，一头宽的是两侧变窄</p></li>
<li><p>实线不可跨越，虚线可以跨越，黄色虚线分割对向交通流，是指示标线，在保证安全的前提下可以越线超车或转弯；双实线禁止；指示标线：黄色虚线、白色虚线划分；禁止标线：黄色双实、单实，白色双实、单实划分；警告标线：黄线划成的各种图形或线段；白色虚线是同向车道分界线，黄色虚线是相向车道分界线；路中两条双黄色虚线是什么标线？正确答案是“潮汐车道线”。潮汐车道是一种可以根据早晚车流情况调整行驶方向的车道，用两条黄色虚线来表示。这样设计是为了更灵活地应对交通流量变化，提高道路使用效率。</p></li>
<li><p>道路上的白色菱形是人行横道预告</p></li>
<li><p>图中路口的两条白色虚线是“左弯待转区线”。当直行绿灯亮起时，准备左转的车辆可以驶入这个区域等待；等到左转信号灯变绿时，车辆就可以通行了。不过要注意，如果直行和左转信号灯都是红灯时，车辆就不能进入这个区域了。</p></li>
<li><p>图中的白色虚线是“路口导向线”，主要用于引导车辆在路口行驶和转向。黄色和白色的虚线都是路口导向线，分别与相应的实线延续。在转向时，车辆应按照虚线行驶。</p></li>
<li><p>图中圈内的白色实线是“导向车道线”，它通常设置在路口驶入处，用于引导车辆分道行驶。白色实线表示车辆进入该车道后不得变更车道或压线行驶。记住，导向车道线的作用是指示车辆按指定方向行驶，确保交通有序。具有固定行驶方向的是导向车道线，里面会有直行左转右转标志，锯齿状白色实线是“可变导向车道线”，这种标线的方向会根据交通需要进行调整，帮助车辆在路口更好地分道行驶。</p></li>
<li><p>图中圈内的白色折线、白色半圆状标记是“车距确认线”，它的作用是帮助驾驶人保持安全车距。大家要注意，这类标线通常设置在较长直线段或易发生事故的路段，并且会配合车距确认标志使用。</p></li>
<li><p>题目中提到的“白色虚线和三角地带标线”是“道路出口标线”的典型特征。根据相关法规，道路出口标线用于引导车辆安全驶出高速公路，减少与突出缘石的碰撞风险。</p></li>
<li><p>驾驶机动车在高速公路上行驶低于规定最低时ƒ速的，一次记3分。高速公路上最低时速一般不得低于60公里/小时；低3占6停9逆12；普通公路逆行3分，在城市快速路倒车12分；穿插/借道等候车辆、不按规定安装号牌3分</p></li>
<li><p>驾驶机动车在高速公路或者城市快速路上不按规定车道行驶的，根据《道路交通安全违法行为记分管理办法》第十一条的规定，属于一次记3分的违法行为；在驾驶机动车行经人行横道时，必须遵守交通规则，减速、停车、避让行人。如果不按规定操作，将会被记3分。这是为了保障行人安全；驾驶机动车不按规定避让校车的，一次记3分；驾驶机动车时拨打、接听手持电话等妨碍安全驾驶的行为，属于记3分的违法行为</p></li>
<li><p>一个凸起是减速丘，一个凸起中间有空间是驼峰桥，中间实心的是减速丘，两个凸起是不平，一个坑是低洼；驼峰桥会影响行驶视距，而不是跳车，车经过两个突起物后一颠一颠的叫跳车</p></li>
<li><p>标志中的栅栏表示“有人看守铁路道口”，提醒驾驶员前方有铁路道口，需要注意减速或停车。只有火车标志表示无人看守。</p></li>
<li><p>隧道开灯，不能开远光灯</p></li>
<li><p>潮汐车道两边双虚线像是雨水落下，双向箭头指示方向</p></li>
<li><p>不按交通信号灯指示通行，即闯红灯，6分；驾驶证暂扣期间开车6分；致人轻微伤或财产损失（轻微）逃逸6分，造成交通事故后逃逸尚不构成犯罪的200-2000并处15日拘留；交通事故逃逸且构成犯罪，情节严重，吊销驾驶证，终生不得取得驾驶证，而不是记12分；未逃三年以下，死逃三七，逃逸致人死亡七年以上；借车无证罚2000同时吊销驾驶证；故意损坏罚2000；身体不好罚500；补新用旧罚200；学习时间罚教练200；非法扣车小堵200大堵2000</p></li>
<li><p>超速超员超载：超速：普普3/6普高6/12（以50%为界）普普倒1逆3，高倒掉逆12中校危（中型客车、校车、危险物品运输车）普1/6/9（20%、50%）中校危高6/12（20%）；超员：七下36七上69（50%）看到以上扣12、校客旅6/12（20%）；超载：136（30%、50%）</p></li>
<li><p>危险未挂警示标志或者未按指定时间路线速度行驶的6分</p></li>
<li><p>准驾不符9分（未取得校车驾驶资格驾驶校车）；未悬挂号牌、故意遮挡污损号牌9分；连续驾驶中型以上客车、危险物品运输处超过4小时未停车休息的9分</p></li>
<li><p>卖分牟利12分；伪造、变造行驶证/号牌使用其他人号牌12分（号牌无3挡9假12）；饮酒醉酒驾驶12分，致人轻伤或死亡逃逸12分；醉酒驾驶营运机动车会被吊销驾驶证，十年内不得重新取得机动车驾驶证，依法追究刑事责任，重新取得驾驶证后，不得驾驶营运机动车</p></li>
<li><p>路缘石上黄色虚线禁止长时停车，但允许临时停车上下人员或卸货，实线禁止停车</p></li>
<li><p>导流线的主要形式为一个或几个根据路口地形设置的白色V线或斜纹线区域，表示车辆必须按照规定路线行驶，不得压线或越线行驶；路口太宽，弄个导流线减少安全事故；网状线是在十字路口中间的；中心圈是白色斜纹填充圆或菱形区域，设在交叉路口的中心，用于区分车辆大小转弯或作为交叉口车辆左右转弯的指示，车辆不得压线行驶</p></li>
<li><p>行经铁路道口、交叉路口、窄桥、弯道、陡坡、隧道、人行道、市区交通量大的路段不得超车</p></li>
<li><p>拼装报废超50，予以收缴、强制报废、200-2000处吊销驾驶证；未取得驾驶证驾驶属于无证驾驶，将机动车交由无证人员驾驶的，处200-2000吊销驾驶证；</p></li>
<li><p>发生交通事故未带驾驶证、未报警、未抢救受伤人员会收到相应处罚，但是不构成交通肇事罪，但有酒后毒后、无证驾驶、明知故犯、严重超载、逃逸都算交通肇事</p></li>
<li><p>所有禁止左转的路口都禁止掉头</p></li>
<li><p>跟车会车都是近光灯，不能使用远光灯；机动车雾天行驶应当开启雾灯和危险报警闪光灯；为了让其他人放下本车，也就是能观察到有车辆行驶痕迹，应在光线不良时开启前照灯和示廓灯</p></li>
<li><p>能见度：200m，60km，100m100m，40km，50m50m，20km，尽快驶离</p></li>
<li><p>组织代罚三五，代审三二；替审2000；转让30天不登记罚200；改变车身颜色、更换发动机车身车架、车身广告影响安全驾驶未登记，罚200；学法减分中罚款假一贿二瞒五，在审验教育签注时弄虚作假处1000以下罚款，相应学习记录无效且需要重新参加审验学习，审验作假不扣证；驾驶人参加现场学习满1小时且考试合格的，一次减2分（公益一小时一分、网上学习满30min一分）；驾驶证在实习期内、驾驶证逾期未审验、驾驶证被扣留暂扣的，不得通过学法减分扣减；一个记分周期内累计未满12分可以参加学法减分，最高只能减6分；驾驶人饮酒驾车受过处罚的，在最近3个记分周期内不得参加记分减免（酒过三巡才可以减分）；在本周期或上一个记分周期有两次以上累积积分满12分的，不可以再参加学法减分（上周期或本周期扣完两次分不学法，酒驾三周期不学法）</p></li>
<li><p>看见拘役就选对</p></li>
<li><p>时速超过100车距超过100，时速低于100车距超过50；高速不能停车</p></li>
<li><p>在高速公路要按照限速标志标明的车速行驶</p></li>
<li><p>优先级依次递增：交通安全法、地方法规、明确的标志标线、交警指挥</p></li>
<li><p>机动车登记证书、行驶证、号牌都是和机动车相关的证件，丢失或损毁的，都在登记地车管所申请补领换领，原机动号牌不可继续使用，车管所自受理之日起十五日内补发换发号牌，号牌号码不变；机动车有关证件换证补证都需要去登记地；驾驶证的补发补领可以就近办理，无论是驾驶证核发地或核发地以外的车管所都可以</p></li>
<li><p>机油是小壶状，起润滑作用；汽油燃油是邮箱状</p></li>
<li><p>已注册登记的机动车，改变机动车车身颜色的应到公安交通管理部门申请变更登记</p></li>
<li><p>号牌互换要求：1. 同一辖区车管所登记；2. 同一号牌种类；3. 使用性质必须为非营运。一年只能互换一次号牌</p></li>
<li><p>大中型客货车驾驶证在每个积分周期结束都要在30日内进行审验，如果本周期没有扣分，则免于审验。但是大中型客货车以外的车型，如果在本周期有发生过造成人员死亡事故承担同等以上责任且没有被吊销驾驶证的，也要在本记分周期结束后30日内进行审验，并提交身体条件证明；一月换信息三月换证件，三审六补九到期，驾驶证期满换证需要审验；延期审验普一年兵三年；部分车型70周岁以上仍可申请办理，但和大车司机一样，需要每年提交一次身体条件证明；驾驶证审验，审验与驾驶证相关的，内容包括交通违法及事故处理情况、身体条件、违法记分及满分学习考试情况。机动车检验情况属于机动车车检内容，不属于驾驶证审验内容。驾驶证审验审人，机动车审验审车；申请小型汽车驾驶证的，年龄应在18周岁以上，没有上限；大中型客车、重型牵引挂车、城市公交车、大型货车驾驶人应当每年审验；一年内无累积积分的机动车驾驶人，可以允许延长驾驶证的审验期；逾期未审罚500；</p></li>
<li><p>初次申领机动车驾驶证的，可以申请普通三轮摩托车，而大中型客车、重型牵引挂车只能通过增驾取得；20+70周岁才可申请轻型牵引挂车，且需持有C1/C2驾驶证一年以上且只能增驾；申请大中型客车驾驶证年龄不得超过63周岁</p></li>
<li><p>假1骗3毒3酒5醉10逃终生；酒驾处暂扣六个月驾驶证，并处1000-2000罚款，因酒驾被罚，再次酒驾，处十日以下拘留，并处1000-2000罚款，吊销驾驶证；交通事故逃逸且构成犯罪的，情节严重，会被吊销驾驶证，终生不得取得驾驶证</p></li>
<li><p>一个记分周期满12分，依法扣留驾驶证进行为期7天的满分学习，其中大中型客货车、城市公交车、重型牵引挂车满分学习应满30天（小车一周大车一月）；一个记分周期内满12分考科一，满24考科一科三，满36考科一科二科三</p></li>
<li><p>交警左手往下压是左转弯待转，右手往下压是减速慢行</p></li>
<li><p>紫色找事故管理；三角注意行人方形人行横道</p></li>
<li><p>驾驶机动车未悬挂机动车号牌、未放置检验合格标志、保险标志、未携带行驶证、驾驶证等行为，会被扣留机动车（两标两证一号牌，缺一扣车）并处200-2000罚款，而不是扣留行驶证；只要是伪造或变造的，就可依法扣留车辆，如伪造的是号牌、行驶证、驾驶证等，还将处以15日以下拘留，并处2000-5000罚款，构成犯罪的，还将依法追究刑事责任</p></li>
<li><p>汽车类摩托类实习期12个月</p></li>
<li><p>口五站三</p></li>
<li><p>危险驾驶罪：在道路上追逐驾驶，情节恶劣的，醉驾的，校客旅严重超员超速的，要拘役并处罚金</p></li>
<li><p>在机动车驾驶人考试中组织作弊，情节严重构成犯罪的，处三年以上七年以下有期徒刑，并处罚金；普通作弊三年以下，严重三七；考试过程中贿赂舞弊，处两千以下罚款，一年内不得申请。已经通过贿赂舞弊取得驾驶证的是三年不得申请；审验中虚假罚500；成绩无效罚1000；作弊1000，欺骗2000；</p></li>
<li><p>无中线城3公4，有中线城5公7</p></li>
<li><p>暴雨天气驾车，刮水器无法刮净雨水时，应当立即减速靠边停车</p></li>
<li><p>黑色数字建议速度、白色数字最低速度、黄色数字最高速度，白低黄高黑建议</p></li>
<li><p>A1大型客车B1中型客车A2重型牵引挂车B2大型货车C2小型自动挡汽车C3低速载货汽车C6轻型牵引挂车，20-70周岁申请F轻便摩托车</p></li>
<li><p>虚线可越线超车或转弯</p></li>
<li><p>红色禁止，黄色警告，蓝色指示</p></li>
<li><p>驾驶证到期要主动换证，超有效期一年未换证将被注销驾驶证。被注销驾驶证未超过2年，可以通过补考科一（即道路交通安全法律、法规和相关知识考试）就可以恢复</p></li>
<li><p>白色泊位是收费停车位，黄色泊位是专属停车位，蓝色泊位是免费停车位</p></li>
<li><p>申请增加准驾车型的，应在原来所持驾驶证核发地申请</p></li>
<li><p>年龄在70岁以上，通过三力测试后，可以申领小型汽车、小型自动挡汽车、残疾人专用小型自动挡载客汽车、轻便摩托车准驾车型的驾驶证</p></li>
<li><p>代替他人参加机动车驾驶人考试的三年内不得申请驾驶证；饮酒醉酒发生重大交通事故构成犯罪的、无证驾驶发生负同等责任以上的事故或死亡的十年内不得申请；发生重大交通事故后逃逸构成犯罪终生不得申请；超速被吊销驾驶证未满5年的不得申请驾驶证</p></li>
<li><p>申请C1/C2/C3驾驶证的两眼裸视力或矫正视力应达到对数视力表4.9以上</p></li>
<li><p>有ETC选电子</p></li>
<li><p>转3调10罚15审验30；对交通事故损害赔偿有争议的，应在收到交通事故认定书之日起10日内提出书面调解申请</p></li>
<li><p>机动车登记有5种：注册、变更、转让、抵押、注销</p></li>
<li><p>有从业找从业：从业单位等信息发生变化的，应在信息变更30日内向从业单位所在地的车管所备案</p></li>
<li><p>货车在高速公路行驶超过限高限款扣1分</p></li>
<li><p>两条虚线表示车道，中间有快速公交，是BRT车辆专用车道</p></li>
<li><p>匝道一般限速40</p></li>
<li><p>机动车驾驶证被暂扣期间驾驶机动车的，罚款200-2000，并处15日以下拘留，并且扣6分；暂扣欺骗罚500</p></li>
<li><p>醉酒驾驶机动车会被约束至酒醒，吊销驾驶证，五年内不得重新申请，一次记12分；醉驾属于违法行为，会受到一定处罚，可能会处拘役并罚款，而不是直接处3年以上有期徒刑；</p></li>
<li><p>非营运酒驾3年内不得考证，醉驾5年内不得考证营运酒驾5年内不得考证，醉驾10年内不得考证</p></li>
<li><p>使用变造、伪造号牌一次12分，并扣车；不交强险罚2倍</p></li>
<li><p>持有小型汽车准驾车型资格2年以上，才可以申请增加中型客车准驾</p></li>
<li><p>山区狭窄坡路会车，上坡阻力大、坡道起步难且易溜车，上坡车先行</p></li>
<li><p>C1/C2科三考试里程不得少于3公里</p></li>
<li><p>驾驶证补领找核发，补发请随意；车管所需要一日内补发驾驶证；初次申领驾驶证或申请增加准驾，科一考试合格后，车管所应当当天核发学习驾驶证明；只有核发地车管所可以申请延期办理驾驶证审验</p></li>
<li><p>实习上高速罚200，新手开挂罚200</p></li>
<li><p>记分周期从初次领取驾驶证之日起或者初次取得临时机动车驾驶许可之日起累积计算</p></li>
<li><p>初次申领机动车号牌或者行驶证，应向住所地车管所申请，初次申领找住所</p></li>
<li><p>机动车在道路上临时停车时，应按顺行方向停车并开启危险报警闪光灯，车身右侧距路缘不得超过30厘米</p></li>
<li><p>车辆在夜间通过视线较差的路口转弯，应在距离路口30-100米时关闭远光灯，开启近光灯和转向灯</p></li>
<li><p>普路故障警告标志50-100，高速150外</p></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>recovery</category>
  <category>driving license</category>
  <category>subject one exam</category>
  <guid>https://leslie-lu.github.io/blog/2025/07/28/driver_license_test/</guid>
  <pubDate>Mon, 28 Jul 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>测序深度如何影响GWAS及多组学研究</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/07/21/sequencing_depth/</link>
  <description><![CDATA[ 





<p>随着基因组学技术的进步，越来越多的研究采用测序技术进行遗传变异的检测与分析。测序深度（Sequencing Depth）是影响基因组学数据质量的重要指标之一，它直接关系到遗传变异的准确识别以及后续 GWAS 和多组学研究的结果可靠性。</p>
<section id="什么是测序深度" class="level3">
<h3 class="anchored" data-anchor-id="什么是测序深度">什么是测序深度？</h3>
<p>测序深度通常用「X」表示，它指的是基因组中每个碱基位置被测序读取（Reads）的平均次数。比如，10X测序深度意味着每个位点平均被测序10次。</p>
<p>更高的测序深度通常意味着更可靠的数据，因为位点覆盖次数越多，测序错误的概率越小，变异检测的准确性越高。</p>
</section>
<section id="测序深度对-gwas-分析的影响" class="level3">
<h3 class="anchored" data-anchor-id="测序深度对-gwas-分析的影响">测序深度对 GWAS 分析的影响</h3>
<section id="基因型准确性" class="level4">
<h4 class="anchored" data-anchor-id="基因型准确性">1. 基因型准确性</h4>
<p>GWAS 需要准确识别个体基因型（Genotype），而基因型准确性直接受测序深度的影响。当测序深度较低（如 0.1x）时，个体基因型可能无法直接可靠地确定，但可以通过群体信息推测（Imputation）。推测准确性通常用 R² 表示，R² 越接近 1，表示推测基因型越可靠。</p>
<p>例如，Liu, S. et al. <span class="citation" data-cites="RN1360">(Liu et al. 2024)</span> 研究直接从群体水平估计等位基因频率与多态性，发现即使测序深度低至 0.1x 超低测序深度（如 NIPT 数据）下，基因型推测的 R² 仍可超过 0.84。这意味着即使测序深度不高，通过推测也可以实现有效样本量的大幅增加，例如 10 万个低深度样本，实际有效样本量仍能达到 8.4 万个。</p>
</section>
<section id="避免冗余信号ld聚类" class="level4">
<h4 class="anchored" data-anchor-id="避免冗余信号ld聚类">2. 避免冗余信号（LD聚类）</h4>
<p>在 GWAS 分析中，通常会对高度相关的 SNP（连锁不平衡，LD）进行聚类（LD clumping），避免冗余的关联信号。当测序深度不充分时，LD 结构的识别可能不准确，导致聚类失效或误导性结果。因此，适当提高测序深度有助于更准确地揭示 LD 结构，减少假阳性信号。</p>
</section>
</section>
<section id="测序深度在多组学研究中的重要性" class="level3">
<h3 class="anchored" data-anchor-id="测序深度在多组学研究中的重要性">测序深度在多组学研究中的重要性</h3>
<section id="单倍型haplotype构建的准确性" class="level4">
<h4 class="anchored" data-anchor-id="单倍型haplotype构建的准确性">1. 单倍型（Haplotype）构建的准确性</h4>
<p>高质量的单倍型（High-quality haplotype）构建依赖于较高的测序深度或高质量的数据来源（如长读长测序技术）。单倍型能够帮助更精确地理解遗传变异的连锁关系，在 GWAS、eQTL、孟德尔随机化（MR）分析研究中起关键作用。</p>
</section>
<section id="mr-分析" class="level4">
<h4 class="anchored" data-anchor-id="mr-分析">2. MR 分析</h4>
<p>孟德尔随机化利用 SNP 作为工具变量，研究暴露因素与疾病结局的因果关系。SNP 的准确识别与基因型调用至关重要，测序深度的提高能大幅提升工具变量的有效性。</p>
</section>
</section>
<section id="如何确定合适的测序深度" class="level3">
<h3 class="anchored" data-anchor-id="如何确定合适的测序深度">如何确定合适的测序深度？</h3>
<ul>
<li><p>研究目的：不同研究需求的测序深度不同，例如全基因组研究推荐≥30X，超低深度测序可能适合大规模群体推测分析。</p></li>
<li><p>经费限制：高深度测序成本较高，需在精度与成本之间权衡。</p></li>
<li><p>分析需求：是否需要精细 LD 结构、单倍型精确构建、个体级基因型，决定了所需的测序深度水平。</p></li>
</ul>


<!-- -->


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-RN1360" class="csl-entry">
Liu, Siyang, Yanhong Liu, Yuqin Gu, Xingchen Lin, Huanhuan Zhu, Hankui Liu, Zhe Xu, et al. 2024. <span>“Utilizing Non-Invasive Prenatal Test Sequencing Data for Human Genetic Investigation.”</span> Journal Article. <em>Cell Genomics</em> 4 (10): 100669. https://doi.org/<a href="https://doi.org/10.1016/j.xgen.2024.100669">https://doi.org/10.1016/j.xgen.2024.100669</a>.
</div>
</div></section></div> ]]></description>
  <category>sequencing depth</category>
  <category>GWAS</category>
  <category>multi-omics</category>
  <category>Mendelian randomization</category>
  <guid>https://leslie-lu.github.io/blog/2025/07/21/sequencing_depth/</guid>
  <pubDate>Mon, 21 Jul 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250721174048.png" medium="image" type="image/png"/>
</item>
<item>
  <title>换行符不一致导致 comm 结果异常</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/06/30/comm/</link>
  <description><![CDATA[ 





<section id="问题背景换行符" class="level3">
<h3 class="anchored" data-anchor-id="问题背景换行符">问题背景：换行符</h3>
<p>在处理文本文件时，换行符可能导致由于文件格式不同而出现意想不到的问题。尤其是在跨平台开发中，Windows 和 Unix/Linux 系统使用的换行符不同，这可能会导致一些命令行工具（如 comm、diff 等）无法正确处理文件内容。</p>
<p>比如，comm 命令明明应该返回正确的比较结果，却因为换行符不一致而失灵。这种情况在开发中并不少见，尤其是当你从不同来源获取文件时。</p>
<p>通过检查文件格式，我们发现：</p>
<pre class="{bash}"><code>#| eval: false
file aa_sorted.txt
file bb_sorted.txt</code></pre>
<p>aa_sorted.txt：ASCII 文本，带有 CRLF 换行符（Windows 格式，每行以 结尾）。</p>
<p>bb_sorted.txt：ASCII 文本，带有 LF 换行符（Unix/Linux 格式，每行以 结尾）。</p>
<p>由于 comm 命令要求比较的行完全一致，换行符的差异会导致它无法正确识别相同的行。</p>
</section>
<section id="解决方法统一换行符格式" class="level3">
<h3 class="anchored" data-anchor-id="解决方法统一换行符格式">解决方法：统一换行符格式</h3>
<p>这个问题并不复杂，只需将文件格式统一即可。以下是具体步骤：</p>
<section id="将-windows-格式转换为-unix-格式" class="level4">
<h4 class="anchored" data-anchor-id="将-windows-格式转换为-unix-格式">1. 将 Windows 格式转换为 Unix 格式</h4>
<p>使用 dos2unix 工具可以将带有 CRLF 换行符的文件转换为 LF 格式。运行以下命令：</p>
<pre class="{bash}"><code>#| eval: false
dos2unix aa_sorted.txt</code></pre>
<p>这条命令会将 aa_sorted.txt 的换行符从 CRLF 转换为 LF，与 bb_sorted.txt 的格式保持一致。</p>
</section>
<section id="重新运行-comm-命令" class="level4">
<h4 class="anchored" data-anchor-id="重新运行-comm-命令">2. 重新运行 comm 命令</h4>
<p>在确保两个文件的换行符一致后，重新运行你的 comm 命令：</p>
<pre class="{bash}"><code>#| eval: false
comm -23 aa_sorted.txt bb_sorted.txt | wc -l</code></pre>
<p>现在，comm 能正确比较文件内容，输出预期的结果。</p>
</section>
</section>
<section id="takeaway" class="level3">
<h3 class="anchored" data-anchor-id="takeaway">Takeaway</h3>
<p>换行符不一致是许多文本处理工具（如 comm、diff 等）结果异常的常见原因。通过使用 dos2unix 工具统一文件格式，这个问题可以轻松解决。以下是几点实用建议：</p>
<ul>
<li><p>检查文件格式：在比较文件前，使用 file 命令检查换行符类型。</p></li>
<li><p>保持一致性：在团队协作或跨平台开发时，建议统一使用 LF 换行符（Linux 标准）。</p></li>
<li><p>善用工具：dos2unix 和 unix2dos 是处理换行符问题的得力助手。</p></li>
</ul>


<!-- -->

</section>

 ]]></description>
  <category>Linux</category>
  <category>Command Line</category>
  <category>Troubleshooting</category>
  <category>Text Processing</category>
  <category>File Formats</category>
  <category>Cross-Platform Development</category>
  <guid>https://leslie-lu.github.io/blog/2025/06/30/comm/</guid>
  <pubDate>Mon, 30 Jun 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250630140522.png" medium="image" type="image/png"/>
</item>
<item>
  <title>离线跑 VEP 必备：Reference FASTA 文件下载与预处理</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/06/24/vep/</link>
  <description><![CDATA[ 





<p>这里，我们将详细介绍如何为 Ensembl Variant Effect Predictor (VEP) 离线模式准备本地参考基因组 FASTA，以及为什么要 <code>先解压、再 bgzip 压缩</code>。看完就能举一反三，为任何物种配置 VEP 参考序列。</p>
<section id="为什么一定要用-ensembl-官方-fasta" class="level3">
<h3 class="anchored" data-anchor-id="为什么一定要用-ensembl-官方-fasta">1. 为什么一定要用 Ensembl 官方 FASTA？</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 11%">
<col style="width: 88%">
</colgroup>
<thead>
<tr class="header">
<th></th>
<th>原因</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>坐标一致</td>
<td>VEP 只能 100% 保证与同版本 Ensembl 发布的注释（GTF/GFF、缓存）完全匹配。用其他来源 → 坐标或 HGVS 解析可能错位</td>
</tr>
<tr class="even">
<td>目录统一</td>
<td>Ensembl FTP 采用统一的 …/release-114/fasta/<species>/dna/ 结构，自动化脚本好写</species></td>
</tr>
<tr class="odd">
<td>长期维护</td>
<td>每个 release 都保留完整历史，且提供 MD5 校验，便于版本溯源</td>
</tr>
</tbody>
</table>
<p>简言之：想省心，就用 <a href="https://www.ensembl.org/index.html" title="Ensembl">Ensembl FASTA</a> ，且版本号要与当前 VEP 保持一致。</p>
</section>
<section id="选哪个文件最合适" class="level3">
<h3 class="anchored" data-anchor-id="选哪个文件最合适">2. 选哪个文件最合适？</h3>
<p>进入 …/dna/ 目录后，你会看到一堆后缀类似的压缩包：</p>
<table class="caption-top table">
<colgroup>
<col style="width: 28%">
<col style="width: 52%">
<col style="width: 18%">
</colgroup>
<thead>
<tr class="header">
<th>文件名片段</th>
<th>含义</th>
<th>是否推荐做 VEP 参考？</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>dna.primary_assembly.fa.gz</td>
<td>仅含正式染色体 (24 条常染 + XY + M) 及少量 decoy</td>
<td>✅ 推荐</td>
</tr>
<tr class="even">
<td>dna.toplevel.fa.gz</td>
<td>primary_assembly + alt contigs + patch</td>
<td>体积大，注释慢</td>
</tr>
<tr class="odd">
<td>_sm. / _rm.</td>
<td>soft-mask / repeat-mask</td>
<td>⛔ 不要（大小写或 N 会影响插件）</td>
</tr>
</tbody>
</table>
<p>拿 <code>unmasked + primary_assembly</code> 即可。以人类 GRCh38 为例：Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz。</p>
</section>
<section id="下载-解压-bgzip-三步走" class="level3">
<h3 class="anchored" data-anchor-id="下载-解压-bgzip-三步走">3. 下载 ➜ 解压 ➜ bgzip 三步走</h3>
<pre class="{bash}"><code>#| eval: false
# 下载记得确认 release 号
curl -O https://ftp.ensembl.org/pub/release-114/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz
# 先完全解压；bgzip 不能直接二次压缩 .gz
gzip -d Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz
# 用 bgzip 重新块压缩，生成可随机索引的 .fa.gz
bgzip -@ 8 Homo_sapiens.GRCh38.dna.primary_assembly.fa   # -@ 8 = 8 线程
# （可选）提前生成索引，VEP 第一次跑时也会自动创建
samtools faidx Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz</code></pre>
<section id="为什么要这么折腾" class="level4">
<h4 class="anchored" data-anchor-id="为什么要这么折腾">为什么要这么折腾？</h4>
<table class="caption-top table">
<colgroup>
<col style="width: 20%">
<col style="width: 59%">
<col style="width: 21%">
</colgroup>
<thead>
<tr class="header">
<th></th>
<th>特点</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>纯文本 .fa</td>
<td>读取最快；占用磁盘大</td>
<td>本地磁盘富余</td>
</tr>
<tr class="even">
<td>普通 gzip .fa.gz</td>
<td>空间省，但无法随机访问 ➜ VEP 巨慢</td>
<td>❌ 不要</td>
</tr>
<tr class="odd">
<td>bgzip .fa.gz</td>
<td>空间省，又可随机定位 (Bio::DB::HTS::Faidx)</td>
<td>✅ 推荐</td>
</tr>
</tbody>
</table>
<p>bgzip 和 samtools 均来自 htslib，conda 安装：<code>conda install -c bioconda htslib samtools</code>。</p>
<p>其他物种同理，路径里换成对应英文学名即可。</p>
</section>
</section>
<section id="常见报错与解决方案" class="level3">
<h3 class="anchored" data-anchor-id="常见报错与解决方案">4. 常见报错与解决方案</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 36%">
<col style="width: 22%">
<col style="width: 41%">
</colgroup>
<thead>
<tr class="header">
<th>报错</th>
<th>原因</th>
<th>解决</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>Can't locate Bio/DB/HTS/Faidx.pm</code></td>
<td>perl-htslib 缺失</td>
<td><code>conda install -c bioconda perl-htslib</code></td>
</tr>
<tr class="even">
<td><code>Could not find index file</code></td>
<td><code>.fai</code> / <code>.gzi</code> 损坏或丢失</td>
<td>手动 <code>samtools faidx *.fa.gz</code> 重新索引</td>
</tr>
<tr class="odd">
<td>运行速度奇慢 + 单核</td>
<td>用了普通 gzip 文件</td>
<td>按上文改用 bgzip</td>
</tr>
<tr class="even">
<td>内存占用飙升</td>
<td>开太多 <code>--fork</code> 线程</td>
<td>减少 <code>--fork</code> 或增加 <code>--buffer_size</code></td>
</tr>
</tbody>
</table>
</section>
<section id="take-home-message" class="level3">
<h3 class="anchored" data-anchor-id="take-home-message">Take Home Message</h3>
<p>下载 unmasked primary_assembly → 解压 → bgzip，然后把 .fa.gz 路径传给 –fasta，VEP 离线跑得又快又稳，磁盘占用还能少一半以上。</p>


<!-- -->

</section>

 ]]></description>
  <category>VEP</category>
  <category>reference genome</category>
  <category>bioinformatics</category>
  <category>variant annotation</category>
  <category>genomics</category>
  <guid>https://leslie-lu.github.io/blog/2025/06/24/vep/</guid>
  <pubDate>Tue, 24 Jun 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250624022739.png" medium="image" type="image/png"/>
</item>
<item>
  <title>2024年度期刊影响因子 JCR2024 公布</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/06/18/2024JCR/</link>
  <description><![CDATA[ 





<p>刚刚，2024 年度期刊影响因子 JCR2024 已在 Web of Science 平台正式公布。目前我们已经快速抓取成 Excel，供大家免费下载使用。公众号后台直接回复 <code>JCR2024</code> 即可获取，注意不是在评论区评论。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/a915b9ca0f6473800c870dac00bd76fc.jpg" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">JCR2024</figcaption>
</figure>
</div>
<section id="关注的一些期刊" class="level4">
<h4 class="anchored" data-anchor-id="关注的一些期刊">关注的一些期刊</h4>
<p>神刊 CA 降至 232.4；医学四大刊全部下降，最高 Lancet 为 88.5；Nature 下降至 48.5，Cell 为 42.5。</p>
<p>值得注意的是，期刊 JOURNAL OF HEPATOLOGY 由 26.8 突破至 33 分。</p>


<!-- -->

</section>

 ]]></description>
  <category>impact-factor</category>
  <category>JCR</category>
  <category>journal</category>
  <guid>https://leslie-lu.github.io/blog/2025/06/18/2024JCR/</guid>
  <pubDate>Wed, 18 Jun 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/a915b9ca0f6473800c870dac00bd76fc.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>色素痣就诊</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/06/17/mole/</link>
  <description><![CDATA[ 





<p>2025 年 6 月 15 日，去医院美容皮肤科就诊。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/f7a6187f4ffa149befd6bd0e974967af.jpg" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">皮肤镜检查报告单</figcaption>
</figure>
</div>
<p>目前无治疗，等待以后复查观察。</p>


<!-- -->


 ]]></description>
  <category>healthcare</category>
  <category>dermatology</category>
  <guid>https://leslie-lu.github.io/blog/2025/06/17/mole/</guid>
  <pubDate>Tue, 17 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>在DNAnexus平台进行生信分析的省钱攻略</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/06/09/DNAnexus/</link>
  <description><![CDATA[ 





<p>在 DNAnexus 平台上进行生信分析时，掌握一些省钱技巧和攻略，能够帮助科研人员和机构更高效地利用资源，降低成本。这里，我们将总结一些在 DNAnexus 平台上进行生信分析时，特别是在应用服务器方面的实用的省钱技巧和攻略，帮助最大限度地节省成本。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250609133401.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">UKBB</figcaption>
</figure>
</div>
<section id="优化计算资源的使用" class="level3">
<h3 class="anchored" data-anchor-id="优化计算资源的使用">1. 优化计算资源的使用</h3>
<p>DNAnexus 平台使用云计算资源，用户需要为所使用的计算资源付费。因此，优化计算资源的使用是节省成本的关键。以下是一些具体建议：</p>
<ul>
<li><p>选择合适的实例类型：DNAnexus 平台支持多种实例类型，用户应根据分析任务的需求选择最合适的实例类型。例如，对于 CPU 密集型任务，选择高 CPU 实例；对于内存密集型任务，选择高内存实例。避免使用过于强大或不足的实例，以平衡性能和成本。前面我们总结过<a href="https://mp.weixin.qq.com/s/teN8eZPAO_JjF4fsmqLS4w?clicktime=1749446074&amp;enterid=1749446074&amp;scene=126&amp;sessionid=1749446067&amp;subscene=91">如何科学选择DNAnexus平台的计算实例</a>，大家可以参考。</p></li>
<li><p>利用批量处理：对于大规模分析任务，用户可以利用 DNAnexus 平台的批量处理功能，同时运行多个任务，以提高效率并降低单位任务的成本。批量处理可以减少资源闲置时间，最大化利用计算资源。</p></li>
<li><p>监控和调整资源配置：定期监控分析任务的性能，并根据需要调整资源配置。例如，如果某个任务的 CPU 利用率较低，可以考虑降低实例的 CPU 核心数以节省成本。DNAnexus 平台提供性能监控工具，用户可以利用这些工具来优化资源使用。</p></li>
</ul>
</section>
<section id="利用闲置资源和峰谷时段" class="level3">
<h3 class="anchored" data-anchor-id="利用闲置资源和峰谷时段">2. 利用闲置资源和峰谷时段</h3>
<p>在某些情况下，用户可以利用平台上的闲置资源或在非高峰时段运行分析任务，以降低成本：</p>
<ul>
<li>规划峰谷时段：了解平台的资源使用高峰和低谷时段，尽量在低谷时段运行分析任务，以获取更低的资源价格。特别地，当我们使用 Swiss Army Knife (SAK) 进行大规模数据处理时，可以选择在资源使用较低的时段运行，设置 priority 为 low，以降低成本。相比于 High 优先级，Low 优先级的任务在资源紧张时可能会被延迟，但在资源充足时仍能正常运行，且能可观地节省成本。</li>
</ul>
</section>
<section id="有效管理数据存储" class="level3">
<h3 class="anchored" data-anchor-id="有效管理数据存储">3. 有效管理数据存储</h3>
<p>存储大量基因组数据可能会产生高昂的费用。</p>
<ul>
<li><p>定期清理不再需要的数据：定期审查存储的数据，删除不再需要的临时文件、中间结果或旧版本数据，以避免不必要的存储费用。DNAnexus 平台提供数据管理工具，帮助用户组织和清理数据。</p></li>
<li><p>优化数据格式和压缩：使用压缩或优化的数据格式可以减少存储空间。例如，使用 gzip 或 bzip2 压缩 FASTQ 文件，使用 CRAM 格式存储比对数据。DNAnexus 平台支持多种数据格式，用户可以选择最节省空间的格式。</p></li>
</ul>
</section>
<section id="利用平台特性提高效率" class="level3">
<h3 class="anchored" data-anchor-id="利用平台特性提高效率">4. 利用平台特性提高效率</h3>
<p>DNAnexus 平台具有许多特性，如自动化工作流程、批处理等，用户可以利用这些特性来提高效率和降低成本：</p>
<ul>
<li><p>自动化工作流程：通过自动化重复性任务，用户可以减少手动干预，降低错误率，并节省时间和资源。DNAnexus 平台支持工作流程的自动化，用户可以使用平台提供的工具或 API 来实现自动化。</p></li>
<li><p>利用 API 优化资源使用：DNAnexus 平台提供 API，用户可以通过编程方式自动化任务和优化资源使用。例如，自动启动和停止计算实例，自动上传和下载数据等。</p></li>
</ul>
</section>
<section id="监控与管理成本" class="level3">
<h3 class="anchored" data-anchor-id="监控与管理成本">5. 监控与管理成本</h3>
<p>定期监控和审查使用情况，帮助用户识别和消除不必要的开支：</p>
<ul>
<li><p>利用平台提供的成本报告：DNAnexus 平台提供详细的使用和成本报告，用户可以定期查看这些报告，了解资源的消耗情况，并根据需要调整策略。</p></li>
<li><p>设置预算和警报：用户可以设置预算限制和警报，当成本接近或超过预算时，平台会自动通知用户，以便及时采取措施。</p></li>
</ul>


<!-- -->

</section>

 ]]></description>
  <category>UKB</category>
  <category>UK Biobank</category>
  <category>DNAnexus</category>
  <category>Bioinformatics</category>
  <category>Genomics</category>
  <category>Cost-saving Tips</category>
  <guid>https://leslie-lu.github.io/blog/2025/06/09/DNAnexus/</guid>
  <pubDate>Mon, 09 Jun 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250609133401.png" medium="image" type="image/png"/>
</item>
<item>
  <title>序列基序（Motifs）解析</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/05/23/motif/</link>
  <description><![CDATA[ 





<p>在基因组学和生物信息学研究中，序列基序（Motifs）的识别是解码基因调控机制的核心任务之一。这些短而保守的 DNA 或蛋白质序列片段，如同生命密码中的<code>关键字符</code>，在转录调控、蛋白相互作用和进化分析中扮演着重要角色。</p>
<section id="什么是序列基序" class="level3">
<h3 class="anchored" data-anchor-id="什么是序列基序">什么是序列基序？</h3>
<p>人类基因组包含约 30 亿个碱基对，仅靠人工分析无法应对。高通量测序技术（如 Illumina 测序）每天可生成数 TB 的数据，生物信息学通过算法和模型提取关键信息。</p>
<p>序列基序则是一段在进化或功能选择压力下高度保守的核苷酸或氨基酸序列模式，长度通常在 5-20 个碱基（DNA）或 3-10 个残基（蛋白质）之间。该短片吨在生物序列中频繁出现，通常与特定的生物学功能相关联。它们可能是DNA中的调控序列，也可能是蛋白质中的功能域。例如，DNA上的转录因子结合位点（如 TATA 盒）、RNA 剪接信号或蛋白质结构域中的特征性模式均可视为 Motifs。</p>
<p>DNA motif 多为转录因子结合位点（TFBS），与基因表达调控直接相关。如，TATA盒，一个经典 motif，序列为 <code>TATAAA</code>，位于真核基因启动子区域，约 80% 的真核基因依赖其启动转录。。而 TFBS 的突变可能导致疾病。例如，癌症中常见的 P53 基因突变常影响其结合 motif，扰乱基因表达。蛋白质 motif 通常与结构或功能相关。如，锌指结构（Zinc Finger）。</p>
</section>
<section id="motifs-识别的算法挑战" class="level3">
<h3 class="anchored" data-anchor-id="motifs-识别的算法挑战">Motifs 识别的算法挑战</h3>
<p>识别 Motifs 的本质是从大量序列中寻找统计显著的保守模式，其复杂性源于以下挑战：</p>
<ul>
<li><p>模糊性：Motifs 可能存在碱基变异（如单核苷酸多态性），需容忍一定错配。</p></li>
<li><p>背景噪声：基因组中随机出现的相似序列可能干扰检测。</p></li>
<li><p>计算复杂度：穷举所有可能的 Motifs 组合在计算上不可行（NP 难问题）。</p></li>
</ul>
</section>
<section id="常用算法" class="level3">
<h3 class="anchored" data-anchor-id="常用算法">常用算法</h3>
<section id="枚举" class="level4">
<h4 class="anchored" data-anchor-id="枚举">1. 枚举</h4>
<p>早期的 Motif 识别算法主要基于枚举方法，如 WINNOWER 和 MITRA。这些算法通过穷举所有可能的 k-mer（长度为 k 的子序列）进行比对，虽然能保证全局最优解，但仅适用于短 Motifs（k&lt;15）。随着基因组数据量的增加，这种方法逐渐被更高效的算法所取代。</p>
</section>
<section id="概率优化" class="level4">
<h4 class="anchored" data-anchor-id="概率优化">2. 概率优化</h4>
<p>概率优化算法是当前 Motif 识别的主流方法。它们基于统计模型，通过迭代优化 Motif 的位置权重矩阵（PWM）来寻找最优解。常用的概率优化算法包括：</p>
<ul>
<li><p><strong>期望最大化（EM）算法</strong>：以隐马尔可夫模型为基础，迭代优化 PWM 参数。该方法在理论上收敛稳定，但易陷入局部最优解。</p></li>
<li><p><strong>Gibbs 抽样</strong>：通过马尔可夫链蒙特卡洛（MCMC）随机采样，逐步逼近最优解。该方法灵活，适用于长 Motifs 或大数据集，但结果依赖初始条件。</p></li>
<li><p><strong>基于进化算法的创新</strong>：如遗传算法（GA）模拟自然选择过程，通过交叉、突变操作优化候选 Motifs，平衡全局搜索与计算效率。</p></li>
<li><p><strong>基于图的算法</strong>：如基于图的 Motif 识别方法，通过构建序列图谱，利用图论算法寻找 Motifs。这些方法在处理大规模数据时表现出色。</p></li>
<li><p><strong>深度学习方法</strong>：近年来，深度学习在 Motif 识别中展现出强大的潜力。通过卷积神经网络（CNN）等模型，自动提取序列特征，显著提高了识别精度。</p></li>
</ul>


<!-- -->

</section>
</section>

 ]]></description>
  <category>bioinformatics</category>
  <category>algorithms</category>
  <category>motifs</category>
  <category>biology</category>
  <category>biostatistics</category>
  <guid>https://leslie-lu.github.io/blog/2025/05/23/motif/</guid>
  <pubDate>Fri, 23 May 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250523153427.png" medium="image" type="image/png"/>
</item>
<item>
  <title>PE0004: Largest Palindrome Product</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/05/07/pe0004/</link>
  <description><![CDATA[ 





<section id="题目" class="level3">
<h3 class="anchored" data-anchor-id="题目">题目</h3>
<p>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009=91*99.</p>
<p>Find the largest palindrome made from the product of two 3-digit numbers.</p>
</section>
<section id="问题描述" class="level3">
<h3 class="anchored" data-anchor-id="问题描述">问题描述</h3>
<p>题目要求：给定两个三位数，找到它们的乘积中最大的回文数。</p>
</section>
<section id="解答" class="level3">
<h3 class="anchored" data-anchor-id="解答">解答</h3>
<section id="方法一暴力遍历法新手入门" class="level4">
<h4 class="anchored" data-anchor-id="方法一暴力遍历法新手入门">方法一：暴力遍历法（新手入门）</h4>
<p>思路：生成所有3位数的乘积，逐个检查是否为回文数，记录最大值。</p>
<div id="4b209249" class="cell" data-execution_count="1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> find_maximum():</span>
<span id="cb1-2">    ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(</span>
<span id="cb1-3">        i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>j</span>
<span id="cb1-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>j) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>j)[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb1-7">    )</span>
<span id="cb1-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span>
<span id="cb1-9"></span>
<span id="cb1-10">find_maximum()</span></code></pre></div></div>
</div>
<p>优点：代码简单，逻辑直观。 缺点：计算次数高达810,000次，效率极低。</p>
</section>
<section id="方法二" class="level4">
<h4 class="anchored" data-anchor-id="方法二">方法二</h4>
<div id="b2444bda" class="cell" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reverse(n):  </span>
<span id="cb2-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  </span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:  </span>
<span id="cb2-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  </span>
<span id="cb2-5">        n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  </span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>  </span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_palindrome(n):  </span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> reverse(n)  </span>
<span id="cb2-10"></span>
<span id="cb2-11">largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  </span>
<span id="cb2-12">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>  </span>
<span id="cb2-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> palindrome():  </span>
<span id="cb2-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> largestPalindrome, a  </span>
<span id="cb2-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>:  </span>
<span id="cb2-16">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>  </span>
<span id="cb2-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>:  </span>
<span id="cb2-18">            product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b  </span>
<span id="cb2-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_palindrome(product) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> largestPalindrome:  </span>
<span id="cb2-20">                largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> product  </span>
<span id="cb2-21">            b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb2-22">        a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb2-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> largestPalindrome  </span></code></pre></div></div>
</div>
<p>reverse()：通过数学方法反转数字，避免字符串转换。</p>
<p>global变量：全局记录最大值，但嵌套循环未优化，计算量仍为810,000次。</p>
</section>
<section id="方法三减少重复计算" class="level4">
<h4 class="anchored" data-anchor-id="方法三减少重复计算">方法三：减少重复计算</h4>
<p>优化点：内层循环从a开始，避免重复检查i*j和j*i。</p>
<div id="a30030d4" class="cell" data-execution_count="3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  </span>
<span id="cb3-2">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>  </span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> improved_palindrome():  </span>
<span id="cb3-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> largestPalindrome, a  </span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>:  </span>
<span id="cb3-6">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 从a开始，避免重复  </span></span>
<span id="cb3-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>:  </span>
<span id="cb3-8">            product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b  </span>
<span id="cb3-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_palindrome(product) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> largestPalindrome:  </span>
<span id="cb3-10">                largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> product  </span>
<span id="cb3-11">            b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb3-12">        a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb3-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> largestPalindrome  </span></code></pre></div></div>
</div>
</section>
<section id="方法四倒序搜索-提前终止" class="level4">
<h4 class="anchored" data-anchor-id="方法四倒序搜索-提前终止">方法四：倒序搜索 + 提前终止</h4>
<p>优化点：从999开始倒序搜索，若乘积小于当前最大值则提前终止。</p>
<div id="d89bedf5" class="cell" data-execution_count="4">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  </span>
<span id="cb4-2">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>  </span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> optimized_palindrome():  </span>
<span id="cb4-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> largestPalindrome, a  </span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>:  </span>
<span id="cb4-6">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 从999开始  </span></span>
<span id="cb4-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> a:  </span>
<span id="cb4-8">            product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b  </span>
<span id="cb4-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> largestPalindrome:  </span>
<span id="cb4-10">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 提前终止  </span></span>
<span id="cb4-11">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_palindrome(product):  </span>
<span id="cb4-12">                largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> product  </span>
<span id="cb4-13">            b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb4-14">        a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb4-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> largestPalindrome  </span></code></pre></div></div>
</div>
<p>break：当product &lt;= largestPalindrome时跳出循环，实际计算约5,000次。</p>
</section>
<section id="方法五数学优化" class="level4">
<h4 class="anchored" data-anchor-id="方法五数学优化">方法五：数学优化</h4>
<p>数学原理：若乘积为回文数，至少一个数为11的倍数（仅限6位回文数）</p>
<div id="1fbe28c8" class="cell" data-execution_count="5">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  </span>
<span id="cb5-2">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>  </span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> further_optimized_palindrome():  </span>
<span id="cb5-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> largestPalindrome, a  </span>
<span id="cb5-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>:  </span>
<span id="cb5-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:  </span>
<span id="cb5-7">            b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>  </span>
<span id="cb5-8">            subtract <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb5-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:  </span>
<span id="cb5-10">            b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">990</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 最大11倍数  </span></span>
<span id="cb5-11">            subtract <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>  </span>
<span id="cb5-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> a:  </span>
<span id="cb5-13">            product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b  </span>
<span id="cb5-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> largestPalindrome:  </span>
<span id="cb5-15">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span>  </span>
<span id="cb5-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_palindrome(product):  </span>
<span id="cb5-17">                largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> product  </span>
<span id="cb5-18">            b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> subtract  </span>
<span id="cb5-19">        a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb5-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> largestPalindrome  </span></code></pre></div></div>
</div>
<p>b = 990：当a非11倍数时，b仅取11的倍数，减少候选数。</p>
<p>subtract = 11：步长为11，跳过非11倍数。</p>
</section>
<section id="方法六向量化计算" class="level4">
<h4 class="anchored" data-anchor-id="方法六向量化计算">方法六：向量化计算</h4>
<p>代码逻辑：利用NumPy矩阵运算加速。</p>
<div id="a584c441" class="cell" data-execution_count="6">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np  </span>
<span id="cb6-2">reverse_vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vectorize(reverse)  </span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_palindrome_vec(n):  </span>
<span id="cb6-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> reverse_vec(n)  </span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> max_palindrome_vec(n):  </span>
<span id="cb6-8">    num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n[is_palindrome_vec(n)]  </span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(num) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.size(num) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>  </span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> vectorized_palindrome(n):  </span>
<span id="cb6-12">    largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  </span>
<span id="cb6-13">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, n)  </span>
<span id="cb6-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> x:  </span>
<span id="cb6-15">        max_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_palindrome_vec(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x)  </span>
<span id="cb6-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> max_value <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> max_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> largestPalindrome:  </span>
<span id="cb6-17">            largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_value  </span>
<span id="cb6-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> largestPalindrome  </span></code></pre></div></div>
</div>
</section>
</section>
<section id="答案" class="level3">
<h3 class="anchored" data-anchor-id="答案">答案</h3>
<p>答案为906609。</p>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>project euler</category>
  <category>algorithm</category>
  <category>math</category>
  <category>programming</category>
  <category>palindrome</category>
  <category>product</category>
  <guid>https://leslie-lu.github.io/blog/2025/05/07/pe0004/</guid>
  <pubDate>Wed, 07 May 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250507225223.png" medium="image" type="image/png"/>
</item>
<item>
  <title>手写 Transformer</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/05/04/transformer/</link>
  <description><![CDATA[ 





<section id="引言" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="引言">引言</h3>
<p>Transfomer 是一种用于自然语言处理（NLP）任务的深度学习模型架构。它在2017年由 Vaswani 等人提出，并在论文《Attention is All You Need》中首次介绍。Transformer 模型的核心思想是使用自注意力机制来捕捉输入序列中不同位置之间的依赖关系，而不依赖于传统的循环神经网络（RNN）或卷积神经网络（CNN）。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504183843.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Attention is All You Need</figcaption>
</figure>
</div>
<p>这里，我们将手动搭建并实现该论文中的 Transformer 模型。我们将使用 PyTorch 框架来实现该模型，并逐步解释每个组件的功能和实现细节。</p>
<blockquote class="blockquote">
<p>本文代码实现参考哈佛大学 <a href="https://nlp.seas.harvard.edu/annotated-transformer/#prelims" title="The Annotated Transformer">The Annotated Transformer</a>，特别致谢 Ashish Vaswani 等原论文作者。</p>
</blockquote>
</section>
<section id="模型架构全景" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="模型架构全景">模型架构全景</h3>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504184016.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Transfomer</figcaption>
</figure>
</div>
</section>
<section id="核心模块" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="核心模块">核心模块</h3>
<section id="多头注意力机制multi-head-attention" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="多头注意力机制multi-head-attention">1. 多头注意力机制（Multi-Head Attention）</h4>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504184542.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Multi-Head Attention</figcaption>
</figure>
</div>
<p>注意力公式为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BAttention%7D(Q,%20K,%20V)%20=%20%5Ctext%7Bsoftmax%7D%5Cleft(%5Cfrac%7BQK%5ET%7D%7B%5Csqrt%7Bd_k%7D%7D%5Cright)V%0A"></p>
<p>代码实现：</p>
<div id="fe7c9850" class="cell" data-execution_count="1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MultiHeaderAttention(nn.Module):</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, h, d_model, dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>):</span>
<span id="cb1-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Take in model size and number of heads."</span></span>
<span id="cb1-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb1-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> d_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assume d_v always equals d_k</span></span>
<span id="cb1-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> h</span>
<span id="cb1-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h</span>
<span id="cb1-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linears<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clones(nn.Linear(d_model, d_model), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.attn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Dropout(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dropout)</span>
<span id="cb1-12"></span>
<span id="cb1-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, query, key, value, mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb1-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mask <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-15">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Same mask applied to all h heads.</span></span>
<span id="cb1-16">            mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-17">        nbatches<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-18"></span>
<span id="cb1-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1) Do all the linear projections in batch from d_model =&gt; h x d_k</span></span>
<span id="cb1-20">        query, key, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-21">            lin(x).view(nbatches, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d_k).transpose(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> lin, x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linears, (query, key, value))</span>
<span id="cb1-23">        ]</span>
<span id="cb1-24"></span>
<span id="cb1-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2) Apply attention on all the prokjected vectors in batch.</span></span>
<span id="cb1-26">        x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.attn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> attention(</span>
<span id="cb1-27">            query, key, value, mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask, dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dropout</span>
<span id="cb1-28">        )</span>
<span id="cb1-29"></span>
<span id="cb1-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3) Concat using a view and apply a final linear.</span></span>
<span id="cb1-31">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb1-32">            x.transpose(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-33">            .contiguous()</span>
<span id="cb1-34">            .view(nbatches, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d_k)</span>
<span id="cb1-35">        )</span>
<span id="cb1-36">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> query</span>
<span id="cb1-37">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> key</span>
<span id="cb1-38">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> value</span>
<span id="cb1-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linears[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>](x)</span></code></pre></div></div>
</div>
<p>其中，<code>h=8</code> 表示头数，为原文默认设置，<code>d_model=512</code> 表示模型的维度。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504184650.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Annotation</figcaption>
</figure>
</div>
</section>
<section id="位置编码positional-encoding" class="level4">
<h4 class="anchored" data-anchor-id="位置编码positional-encoding">2. 位置编码（Positional Encoding）</h4>
<p>数学公式：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BPE%7D_%7B(pos,%202i)%7D%20=%20%5Csin%5Cleft(%5Cfrac%7Bpos%7D%7B10000%5E%7B2i/d_%7Bmodel%7D%7D%7D%5Cright)%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BPE%7D_%7B(pos,%202i+1)%7D%20=%20%5Ccos%5Cleft(%5Cfrac%7Bpos%7D%7B10000%5E%7B2i/d_%7Bmodel%7D%7D%7D%5Cright)%0A"></p>
<p>代码实现：</p>
<div id="2d624b42" class="cell" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> PositionalEncoding(nn.Module):</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Implement the PE function."</span></span>
<span id="cb2-3"></span>
<span id="cb2-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, d_model, dropout, max_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>):</span>
<span id="cb2-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Dropout(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dropout)</span>
<span id="cb2-7"></span>
<span id="cb2-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the positional endcodings once in log sapce.</span></span>
<span id="cb2-9">        pe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(max_len, d_model)</span>
<span id="cb2-10">        position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, max_len).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-11">        div_term<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.exp(</span>
<span id="cb2-12">            torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, d_model, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(math.log(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000.0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>d_model)</span>
<span id="cb2-13">        )</span>
<span id="cb2-14">        pe[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>::<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.sin(position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> div_term)</span>
<span id="cb2-15">        pe[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>::<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cos(position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> div_term)</span>
<span id="cb2-16">        pe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pe.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.register_buffer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pe'</span>, pe)</span>
<span id="cb2-18"></span>
<span id="cb2-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb2-20">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pe[:,:x.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)].requires_grad_(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dropout(x)</span></code></pre></div></div>
</div>
</section>
<section id="编码器层encoder-layer" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="编码器层encoder-layer">3. 编码器层（Encoder Layer）</h4>
<p>架构组成：</p>
<ul>
<li><p>自注意力子层</p></li>
<li><p>前馈神经网络子层</p></li>
<li><p>残差连接和层归一化</p></li>
</ul>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504185554.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Encoder block</figcaption>
</figure>
</div>
<p>代码实现：</p>
<div id="c66e7581" class="cell" data-execution_count="3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> EncoderLayer(nn.Module):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Encoder is made up of self-attn and feed forward."</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, size, self_attn, feed_forward, dropout):</span>
<span id="cb3-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.self_attn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> self_attn</span>
<span id="cb3-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.feed_forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feed_forward</span>
<span id="cb3-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sublayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clones(SublayerConnection(size, dropout), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> size</span>
<span id="cb3-10"></span>
<span id="cb3-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, mask):</span>
<span id="cb3-12">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sublayer[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>](x, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.self_attn(x, x, x, mask))</span>
<span id="cb3-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sublayer[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>](x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.feed_forward)</span></code></pre></div></div>
</div>
</section>
<section id="解码器层decoder-layer" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="解码器层decoder-layer">4. 解码器层（Decoder Layer）</h4>
<p>架构组成：</p>
<ul>
<li><p>带掩码的自注意力子层</p></li>
<li><p>编码器-解码器注意力子层</p></li>
<li><p>前馈神经网络子层</p></li>
</ul>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504185838.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Decoder block</figcaption>
</figure>
</div>
<p>代码实现：</p>
<div id="7a3b3ae1" class="cell" data-execution_count="4">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> DecoderLayer(nn.Module):</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Decoder is made of self-attn, src-attn, and feed forward"</span></span>
<span id="cb4-3"></span>
<span id="cb4-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, size, self_attn, src_attn, feed_forward, dropout):</span>
<span id="cb4-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb4-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> size</span>
<span id="cb4-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.self_attn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> self_attn</span>
<span id="cb4-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.src_attn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> src_attn</span>
<span id="cb4-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.feed_forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feed_forward</span>
<span id="cb4-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sublayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clones(SublayerConnection(size, dropout), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb4-11"></span>
<span id="cb4-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, memory, src_mask, tgt_mask):</span>
<span id="cb4-13">        m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> memory</span>
<span id="cb4-14">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sublayer[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>](x, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.self_attn(x, x, x, tgt_mask))</span>
<span id="cb4-15">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sublayer[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>](x, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.src_attn(x, m, m, src_mask))</span>
<span id="cb4-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sublayer[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>](x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.feed_forward)</span></code></pre></div></div>
</div>
<p>其中，掩码生成函数如下：</p>
<div id="f402fd6d" class="cell" data-execution_count="5">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> subsequent_mask(size):</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Mask out subsequent positions."</span></span>
<span id="cb5-3">    attn_shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, size, size)</span>
<span id="cb5-4">    subsequent_mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.triu(torch.ones(attn_shape, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>), diagonal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>subsequent_mask</span></code></pre></div></div>
</div>
<p>借助于 <code>subsequent_mask</code> 函数，我们可以生成一个上三角矩阵，用于掩码掉后续位置的注意力权重。</p>
</section>
<section id="模型初始化与参数设置" class="level4">
<h4 class="anchored" data-anchor-id="模型初始化与参数设置">5. 模型初始化与参数设置</h4>
<div id="cbdbd8c5" class="cell" data-execution_count="6">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> make_model(</span>
<span id="cb6-2">    src_vocab, tgt_vocab, N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, d_model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, d_ff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>, h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb6-3">):</span>
<span id="cb6-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Helper: Construct a model from hyperparameters."</span></span>
<span id="cb6-5">    c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> copy.deepcopy</span>
<span id="cb6-6">    attn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MultiHeaderAttention(h, d_model)</span>
<span id="cb6-7">    ff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PositionWiseFeedForward(d_model, d_ff, dropout)</span>
<span id="cb6-8">    position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PositionalEncoding(d_model, dropout)</span>
<span id="cb6-9">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EncoderDecoder(</span>
<span id="cb6-10">        Encoder(EncoderLayer(d_model, c(attn), c(ff), dropout), N),</span>
<span id="cb6-11">        Decoder(DecoderLayer(d_model, c(attn), c(attn), c(ff), dropout), N),</span>
<span id="cb6-12">        nn.Sequential(Embeddings(d_model, src_vocab), c(position)),</span>
<span id="cb6-13">        nn.Sequential(Embeddings(d_model, tgt_vocab), c(position)),</span>
<span id="cb6-14">        Generator(d_model, tgt_vocab)</span>
<span id="cb6-15">    )</span>
<span id="cb6-16"></span>
<span id="cb6-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initiailize parameters with Glorot / fan_avg.</span></span>
<span id="cb6-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.parameters():</span>
<span id="cb6-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> p.dim() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb6-20">            nn.init.xavier_uniform_(p)</span>
<span id="cb6-21">    </span>
<span id="cb6-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model</span></code></pre></div></div>
</div>
</section>
</section>
<section id="训练过程" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="训练过程">训练过程</h3>
<section id="动态学习率调整" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="动态学习率调整">1. 动态学习率调整</h4>
<p>公式：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Blr%7D%20=%20%5Ctext%7Bd_model%7D%5E%7B-0.5%7D%20%5Ccdot%20%5Ctext%7Bmin%7D(%5Ctext%7Bstep%7D%5E%7B-0.5%7D,%20%5Ctext%7Bstep%7D%20%5Ccdot%20%5Ctext%7Bwarmup%7D%5E%7B-1.5%7D)%0A"></p>
<p>代码实现：</p>
<div id="d0aea914" class="cell" data-execution_count="7">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rate(step, model_size, factor, warmup):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    We have to default the step to 1 for LambdaLR function to avoid zero rasing to negative power.</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb7-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb7-6">        step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (model_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> warmup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span></code></pre></div></div>
</div>
<p>学习率变化曲线：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504190612.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">lr</figcaption>
</figure>
</div>
<p>前4000步线性增长，之后指数衰减。</p>
</section>
<section id="标签平滑label-smoothing" class="level4">
<h4 class="anchored" data-anchor-id="标签平滑label-smoothing">2. 标签平滑（Label Smoothing）</h4>
<p>标签平滑是一种正则化技术，用于缓解模型过拟合和提高泛化能力。它通过将目标标签的概率分布进行平滑处理，使得模型在训练时不会过于自信地预测某个特定的标签。</p>
<p>代码实现：</p>
<div id="e85364a5" class="cell" data-execution_count="8">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LabelSmoothing(nn.Module):</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Implement label smoothing.</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb8-5"></span>
<span id="cb8-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, size, padding_idx, smoothing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>):</span>
<span id="cb8-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb8-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.criterion<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.KLDivLoss(reduction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>)</span>
<span id="cb8-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.padding_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> padding_idx</span>
<span id="cb8-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.confidence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> smoothing</span>
<span id="cb8-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.smoothing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smoothing</span>
<span id="cb8-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> size</span>
<span id="cb8-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.true_dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb8-14"></span>
<span id="cb8-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, target):</span>
<span id="cb8-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> x.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vocab_size</span></span>
<span id="cb8-17">        true_dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.data.clone() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clone the data to avoid in-place operation</span></span>
<span id="cb8-18">        true_dist.fill_(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.smoothing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb8-19">        true_dist.scatter_(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, target.data.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.confidence)</span>
<span id="cb8-20">        true_dist[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.padding_idx]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ignore the category of padding_idx</span></span>
<span id="cb8-21">        mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nonzero(target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.padding_idx)</span>
<span id="cb8-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mask.dim() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb8-23">            true_dist.index_fill_(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, mask.squeeze(), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>)</span>
<span id="cb8-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.true_dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> true_dist</span>
<span id="cb8-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.criterion(x, true_dist.clone().detach())</span></code></pre></div></div>
</div>
</section>
<section id="分布式训练加速" class="level4">
<h4 class="anchored" data-anchor-id="分布式训练加速">3. 分布式训练加速</h4>
<p>多 GPU 训练：</p>
<div id="b5221a40" class="cell" data-execution_count="9">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_worker(</span>
<span id="cb9-2">    gpu,</span>
<span id="cb9-3">    ngpus_per_node,</span>
<span id="cb9-4">    vocab_src,</span>
<span id="cb9-5">    vocab_tgt,</span>
<span id="cb9-6">    spacy_de,</span>
<span id="cb9-7">    spacy_en,</span>
<span id="cb9-8">    config,</span>
<span id="cb9-9">    is_distributed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb9-10">):</span>
<span id="cb9-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Train worker process using GPU: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gpu<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> for training'</span>, flush<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-12">    torch.cuda.set_device(gpu)</span>
<span id="cb9-13"></span>
<span id="cb9-14">    pad_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vocab_tgt[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;blank&gt;"</span>]</span>
<span id="cb9-15">    d_model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb9-16">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_model(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(vocab_src), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(vocab_tgt), N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb9-17">    model.cuda(gpu)</span>
<span id="cb9-18">    module<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model</span>
<span id="cb9-19"></span>
<span id="cb9-20">    is_main_process<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb9-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_distributed:</span>
<span id="cb9-22">        dist.init_process_group(</span>
<span id="cb9-23">            backend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nccl'</span>,</span>
<span id="cb9-24">            init_method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'env://'</span>,</span>
<span id="cb9-25">            rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gpu,</span>
<span id="cb9-26">            world_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ngpus_per_node</span>
<span id="cb9-27">        )</span>
<span id="cb9-28">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DDP(model, device_ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[gpu])</span>
<span id="cb9-29">        module<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.module</span>
<span id="cb9-30">        is_main_process<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-31">    </span>
<span id="cb9-32">    criterion<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LabelSmoothing(</span>
<span id="cb9-33">        size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(vocab_tgt),</span>
<span id="cb9-34">        padding_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pad_idx,</span>
<span id="cb9-35">        smoothing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb9-36">    )</span>
<span id="cb9-37">    criterion.cuda(gpu)</span>
<span id="cb9-38"></span>
<span id="cb9-39">    train_dataloader, valid_dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_dataloaders(</span>
<span id="cb9-40">        gpu,</span>
<span id="cb9-41">        vocab_src,</span>
<span id="cb9-42">        vocab_tgt,</span>
<span id="cb9-43">        spacy_de,</span>
<span id="cb9-44">        spacy_en,</span>
<span id="cb9-45">        batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch_size'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> ngpus_per_node,</span>
<span id="cb9-46">        max_padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_padding'</span>],</span>
<span id="cb9-47">        is_distributed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>is_distributed</span>
<span id="cb9-48">    )</span>
<span id="cb9-49"></span>
<span id="cb9-50">    optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(</span>
<span id="cb9-51">        model.parameters(),</span>
<span id="cb9-52">        lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'base_lr'</span>],</span>
<span id="cb9-53">        betas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.98</span>),</span>
<span id="cb9-54">        eps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-9</span></span>
<span id="cb9-55">    )</span>
<span id="cb9-56">    lr_scheduler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LambdaLR(</span>
<span id="cb9-57">        optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optimizer,</span>
<span id="cb9-58">        lr_lambda<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> step: rate(</span>
<span id="cb9-59">            step, model_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>d_model,</span>
<span id="cb9-60">            factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, warmup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup'</span>]</span>
<span id="cb9-61">        )</span>
<span id="cb9-62">    )</span>
<span id="cb9-63">    train_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TrainState()</span>
<span id="cb9-64"></span>
<span id="cb9-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_epochs'</span>]):</span>
<span id="cb9-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_distributed:</span>
<span id="cb9-67">            train_dataloader.sampler.set_epoch(epoch)</span>
<span id="cb9-68">            valid_dataloader.sampler.set_epoch(epoch)</span>
<span id="cb9-69"></span>
<span id="cb9-70">        model.train()</span>
<span id="cb9-71">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'[GPU </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gpu<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Training ===='</span>, flush<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-72">        _, train_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(</span>
<span id="cb9-73">            (Batch(b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], pad_idx) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_dataloader),</span>
<span id="cb9-74">            model,</span>
<span id="cb9-75">            SimpleLossCompute(module.generator, criterion),</span>
<span id="cb9-76">            optimizer,</span>
<span id="cb9-77">            lr_scheduler,</span>
<span id="cb9-78">            mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train+log'</span>,</span>
<span id="cb9-79">            accum_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accum_iter'</span>],</span>
<span id="cb9-80">            train_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_state</span>
<span id="cb9-81">        )</span>
<span id="cb9-82"></span>
<span id="cb9-83">        GPUtil.showUtilization()</span>
<span id="cb9-84">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_main_process:</span>
<span id="cb9-85">            file_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s%.2d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.pt'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file_prefix'</span>], epoch)</span>
<span id="cb9-86">            torch.save(module.state_dict(), file_path)</span>
<span id="cb9-87">        torch.cuda.empty_cache()</span>
<span id="cb9-88"></span>
<span id="cb9-89">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'[GPU </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gpu<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Validation ===='</span>, flush<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-90">        model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb9-91">        sloss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(</span>
<span id="cb9-92">            (Batch(b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], pad_idx) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> valid_dataloader),</span>
<span id="cb9-93">            model,</span>
<span id="cb9-94">            SimpleLossCompute(module.generator, criterion),</span>
<span id="cb9-95">            DummyOptimizer,</span>
<span id="cb9-96">            DummyScheduler,</span>
<span id="cb9-97">            mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'eval'</span></span>
<span id="cb9-98">        )[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb9-99">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'[GPU </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gpu<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Validation Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sloss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, flush<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-100">        torch.cuda.empty_cache()</span>
<span id="cb9-101"></span>
<span id="cb9-102">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_main_process:</span>
<span id="cb9-103">        file_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">final.pt'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file_prefix'</span>])</span>
<span id="cb9-104">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Training finished.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Model saved to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pt.'</span>, flush<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-105">        torch.save(</span>
<span id="cb9-106">            module.state_dict(),</span>
<span id="cb9-107">            file_path</span>
<span id="cb9-108">        )</span></code></pre></div></div>
</div>
</section>
</section>
<section id="实例" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="实例">实例</h3>
<p>我们使用 WMT 2014 英德翻译数据集进行训练，完成德语到英语的翻译任务。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504191540.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Training</figcaption>
</figure>
</div>
<p>完整注释的 python 代码已经放进了<a href="https://mp.weixin.qq.com/s/4IR-KMAZ-q2VbI0Fz4fYRg">星球</a>里。</p>


<!-- -->

</section>

 ]]></description>
  <category>Transformer</category>
  <category>NLP</category>
  <category>Deep Learning</category>
  <category>Machine Learning</category>
  <category>AI</category>
  <category>Python</category>
  <category>PyTorch</category>
  <guid>https://leslie-lu.github.io/blog/2025/05/04/transformer/</guid>
  <pubDate>Sun, 04 May 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504183843.png" medium="image" type="image/png"/>
</item>
<item>
  <title>脱发就诊</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/04/23/hair_loss/</link>
  <description><![CDATA[ 





<section id="背景" class="level3">
<h3 class="anchored" data-anchor-id="背景">背景</h3>
<p>头发容易出油，头皮屑多，发际线后移。</p>
</section>
<section id="就诊" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="就诊">就诊</h3>
<p>2025年4月22日，去医院美容皮肤科就诊。</p>
<p>皮肤镜检测诊断 119￥：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/53127b7cf0231efed796e6253161f7d.jpg" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">皮肤镜检查报告单</figcaption>
</figure>
</div>
<p>临床诊断：雄激素性脱发，脂溢性皮炎。</p>
</section>
<section id="治疗" class="level3">
<h3 class="anchored" data-anchor-id="治疗">治疗</h3>
<ol type="1">
<li>二硫化硒洗剂 1瓶 230g 80￥，治疗头皮屑和头皮脂溢性皮炎。</li>
</ol>
<p>用法：</p>
<ul>
<li><p>每周2次，一个疗程2-4周。</p></li>
<li><p>先用洗发水洗头，冲洗干净后再用二硫化硒洗剂。</p></li>
<li><p>二硫化硒洗剂取 5-10克，涂抹在湿发及头皮上，轻揉至出泡沫，待3-5分钟后用温水冲洗干净。必要时可重复一次。</p></li>
</ul>
<ol start="2" type="1">
<li><p>米诺地尔泡沫剂 2瓶 396￥。用法：每天两次。</p></li>
<li><p>激光疗法（1200￥）+ 红光治疗(300￥)。</p></li>
<li><p>口服非那雄胺片 1mg*84片 148.96￥。用法：每天一次，一次一片。</p></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>daily life</category>
  <category>health</category>
  <guid>https://leslie-lu.github.io/blog/2025/04/23/hair_loss/</guid>
  <pubDate>Tue, 22 Apr 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Conventional Commits 规范详解</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/04/17/Conventional_Commits/</link>
  <description><![CDATA[ 





<section id="背景" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="背景">背景</h3>
<p>在软件开发中，版本控制是一个至关重要的环节。Git 是最流行的版本控制系统之一，而 Git 提交信息（commit message）则是记录代码变更的重要方式。而我们经常会遇见：</p>
<ul>
<li><p>查看项目 Git 日志时，提交信息杂乱无章，完全看不懂每个提交的意图。</p></li>
<li><p>手动编写 CHANGELOG 耗时费力，还容易遗漏重要变更。</p></li>
<li><p>团队协作中，成员提交风格不一，代码审查效率低下</p></li>
</ul>
<p>为了提高 Git 提交信息的可读性和一致性，Conventional Commits 规范（地址：https://www.conventionalcommits.org/en/v1.0.0/）应运而生。这是一套被 Angular、Vue 等顶级开源项目广泛采用的 Git 提交规范，能将提交信息从混乱的草稿变为清晰的文档。</p>
<p>这里，我们将详细介绍 Conventional Commits 规范的定义、格式、使用场景以及一些最佳实践。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250417174052.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Conventional Commits</figcaption>
</figure>
</div>
</section>
<section id="conventional-commits-规范" class="level3">
<h3 class="anchored" data-anchor-id="conventional-commits-规范">Conventional Commits 规范</h3>
<p>Conventional Commits 是一套基于 Git 提交消息的轻量级约定，旨在通过结构化格式提升提交信息的可读性和自动化处理能力。它的核心目标包括：</p>
<ul>
<li><p>人类可读：清晰描述提交的意图和影响范围。</p></li>
<li><p>机器友好：支持自动化生成 CHANGELOG 和语义化版本（SemVer）。</p></li>
<li><p>团队协作：统一提交风格，减少沟通成本。</p></li>
</ul>
</section>
<section id="格式结构" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="格式结构">格式结构</h3>
<p>一条规范的提交消息需包含以下部分（部分可选）：</p>
<pre class="{plaintext}"><code>&lt;类型&gt;[可选范围]: &lt;简短描述&gt;

[可选正文]

[可选脚注]</code></pre>
<section id="类型type" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="类型type">1. 类型（type）</h4>
<p>类型是提交的核心部分，表示提交的目的和性质。常见的类型包括：</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>类型</th>
<th>用途</th>
<th>对应 SemVer</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>feat</td>
<td>新增功能</td>
<td>MINOR（次版本）</td>
</tr>
<tr class="even">
<td>fix</td>
<td>修复 Bug</td>
<td>PATCH（补丁版本）</td>
</tr>
<tr class="odd">
<td>BREAKING CHANGE</td>
<td>破坏性变更（如 API 不兼容）</td>
<td>MAJOR（主版本）</td>
</tr>
<tr class="even">
<td>docs</td>
<td>文档更新</td>
<td>-（不影响版本）</td>
</tr>
<tr class="odd">
<td>style</td>
<td>代码格式调整（如缩进、空格）</td>
<td>-（不影响版本）</td>
</tr>
<tr class="even">
<td>refactor</td>
<td>代码重构（不新增功能或修复 Bug）</td>
<td>-（不影响版本）</td>
</tr>
</tbody>
</table>
<p>其他推荐类型有：build（构建系统）、ci（持续集成）、test（测试用例）等。</p>
<p>这里我们插一句，对于版本号的控制，可以参考以下规则：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/7d015e4e53587fc795168c70981bbfb.jpg" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">版本号控制</figcaption>
</figure>
</div>
</section>
<section id="可选范围scope" class="level4">
<h4 class="anchored" data-anchor-id="可选范围scope">2. 可选范围（scope）</h4>
<p>可选范围用于指定提交影响的模块或功能区域。它可以是一个具体的模块名、文件名或其他标识符。范围有助于快速定位问题和理解变更的上下文。</p>
<p>例如：<code>feat(auth): add JWT authentication</code> 表示在 <code>auth</code> 模块中新增了 JWT 身份验证功能。</p>
</section>
<section id="简短描述subject" class="level4">
<h4 class="anchored" data-anchor-id="简短描述subject">3. 简短描述（subject）</h4>
<p>简短描述是对提交内容的简要说明，通常不超过 72 个字符。它应以小写字母开头，并使用祈使句（imperative mood）来描述变更的目的。</p>
<p>例如：<code>fix: correct typo in README</code> 表示修复了 README 文件中的拼写错误。</p>
</section>
<section id="可选正文body" class="level4">
<h4 class="anchored" data-anchor-id="可选正文body">4. 可选正文（body）</h4>
<p>可选正文用于详细描述提交的内容和背景信息。它可以包含多行文本，通常用于解释为什么要进行此更改、如何实现等。正文应与简短描述之间空一行。</p>
<p>例如：</p>
<pre class="{plaintext}"><code>feat: 支持多语言切换  
  
新增中英文切换按钮，默认跟随系统语言。  
依赖第三方库 `i18n-utils`，需运行 `npm install` 安装。  </code></pre>
</section>
<section id="可选脚注footer" class="level4">
<h4 class="anchored" data-anchor-id="可选脚注footer">5. 可选脚注（footer）</h4>
<p>可选脚注用于记录与提交相关的其他信息，如关联的任务、问题或破坏性变更。它通常以 <code>BREAKING CHANGE:</code> 开头，后跟详细说明。脚注也可以包含引用的 issue 编号或链接。</p>
<p>例如：</p>
<pre class="{plaintext}"><code>BREAKING CHANGE:
- 更新了 API 接口，删除了 `getUser` 方法，改为 `fetchUser`。
- 需要更新客户端代码以适应新接口。
Closes #123
Review by @zhenlu</code></pre>
</section>
</section>
<section id="为什么推荐使用" class="level3">
<h3 class="anchored" data-anchor-id="为什么推荐使用">为什么推荐使用</h3>
<section id="自动化工具支持" class="level4">
<h4 class="anchored" data-anchor-id="自动化工具支持">1. 自动化工具支持</h4>
<ul>
<li><p>生成 CHANGELOG：工具（如 standard-version）可自动从提交历史提取内容生成变更日志。</p></li>
<li><p>语义化版本控制：根据提交类型自动升级版本号（feat → MINOR，fix → PATCH，BREAKING CHANGE → MAJOR）。</p></li>
<li><p>代码审查加速：通过类型快速定位提交意图，减少沟通成本。</p></li>
</ul>
</section>
<section id="团队协作效率提升" class="level4">
<h4 class="anchored" data-anchor-id="团队协作效率提升">2. 团队协作效率提升</h4>
<ul>
<li><p>统一提交风格：团队成员遵循相同的提交规范，减少沟通障碍，避免风格混乱。</p></li>
<li><p>清晰的历史记录：通过结构化的提交信息，团队成员可以快速了解项目进展和变更。</p></li>
<li><p>问题追溯：通过关联的 issue 编号和脚注，快速定位问题和变更历史。</p></li>
</ul>
</section>
<section id="开源项目友好性" class="level4">
<h4 class="anchored" data-anchor-id="开源项目友好性">3. 开源项目友好性</h4>
<ul>
<li><p>开源项目通常需要清晰的文档和变更记录，Conventional Commits 规范可以帮助维护者和用户快速了解项目的演变。</p></li>
<li><p>社区贡献者可以通过遵循规范的提交信息，轻松参与项目开发，降低贡献门槛。</p></li>
</ul>
</section>
</section>
<section id="takeaway" class="level3">
<h3 class="anchored" data-anchor-id="takeaway">Takeaway</h3>
<p>Conventional Commits 不仅是技术规范，更是团队协作的沟通协议。通过标准化提交信息，它能将 Git 日志从杂乱的历史记录升级为项目演进的清晰路线图。无论是个人项目还是大型团队，尽早引入这一规范都将显著提升开发效率和代码质量。</p>


<!-- -->

</section>

 ]]></description>
  <category>git</category>
  <category>git-commit</category>
  <category>conventional-commits</category>
  <category>git-flow</category>
  <guid>https://leslie-lu.github.io/blog/2025/04/17/Conventional_Commits/</guid>
  <pubDate>Thu, 17 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250417174052.png" medium="image" type="image/png"/>
</item>
<item>
  <title>大模型翻译个人博客post</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/04/16/llm_translator/</link>
  <description><![CDATA[ 





<section id="背景" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="背景">背景</h3>
<p>前一段时间，大家想必已经在小红书上感受到了大模型双语翻译的魅力，应该来讲，信达雅的程度已经相当高了。对于一些个人技术博客网站而言，依靠大模型中英文翻译的能力，我们已经可以实现快速发布中英文双语版本的博客文章。</p>
<p>受到 <code>Rico00121/hugo-translator</code> 项目的启发（地址：https://github.com/Rico00121/hugo-translator），我们利用 python 和 deepseek 对自己依靠 quarto 构建的个人网站上的文章进行了全部的自动翻译，下面是翻译的效果：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/aa.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">中英本双语版本对比</figcaption>
</figure>
</div>
</section>
<section id="实现" class="level3">
<h3 class="anchored" data-anchor-id="实现">实现</h3>
<section id="api-接入" class="level4">
<h4 class="anchored" data-anchor-id="api-接入">API 接入</h4>
<p>首先是接入硅基流动上可选的模型，我们没有使用 deepseek 官网的 api：</p>
<div id="a196bf57" class="cell" data-execution_count="1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load the env file</span></span>
<span id="cb1-2">    load_dotenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Python/materials/.env'</span>, override<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> os.path.exists(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Python/materials/.env'</span>):</span>
<span id="cb1-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'The file .env does not exist.'</span>)</span>
<span id="cb1-5">        sys.exit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OPENAI_API_KEY'</span>):</span>
<span id="cb1-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'The OPENAI_API_KEY is not set.'</span>)</span>
<span id="cb1-8">        sys.exit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-9">    </span>
<span id="cb1-10">    client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> llm_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'openai'</span>:</span>
<span id="cb1-12">        client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> openai.OpenAI(api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OPENAI_API_KEY'</span>))</span>
<span id="cb1-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Using OpenAI to translate the post...'</span>)</span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-15">        client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> openai.OpenAI(</span>
<span id="cb1-16">            api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OPENAI_API_KEY'</span>),</span>
<span id="cb1-17">            base_url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DEEPSEEK_API_URL'</span>)</span>
<span id="cb1-18">        )</span>
<span id="cb1-19">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Using DeepSeek to translate the post...'</span>)</span></code></pre></div></div>
</div>
<p>这里，提醒大家，注意通过 <code>.env</code> 文件管理 API 密钥，避免 hard code 造成泄露风险。关于硅基流动的 API 使用，大家可以参考他们的官方文档或者我们之前的这篇<a href="https://mp.weixin.qq.com/s/aVknGB4hCdEhYxEseV1YnQ">文章</a>。</p>
</section>
<section id="读取-qmd-文件" class="level4">
<h4 class="anchored" data-anchor-id="读取-qmd-文件">读取 qmd 文件</h4>
<p>对于 qmd 文件，我们需要识别应用于我们网页的 metadata，对于这部分信息，我们翻译了 title 并回写，以保证翻译后生成的 _en.qmd 文件可直接用于静态网站生成，无需手动调整。代码如下：</p>
<div id="5ede66e0" class="cell" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the QMD file</span></span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-3">    post <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> frontmatter.load(f)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the title and content of the post</span></span>
<span id="cb2-6">title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> post.metadata.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Untitled'</span>)</span>
<span id="cb2-7">content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> post.content</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Translate the title and content</span></span>
<span id="cb2-10">en_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> translate_title(title, llm_type)</span>
<span id="cb2-11">en_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> translate_text(content, llm_type)</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare metadata for the translated post</span></span>
<span id="cb2-14">en_metadata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> post.metadata.copy()</span>
<span id="cb2-15">en_metadata[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> en_title</span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new post with translated content</span></span>
<span id="cb2-18">en_post <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> frontmatter.Post(content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>en_content, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>en_metadata)</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the translated post to a new file</span></span>
<span id="cb2-21">en_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> file_path.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.qmd'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_en.qmd'</span>)</span>
<span id="cb2-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(en_file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-23">    f.write(frontmatter.dumps(en_post))</span>
<span id="cb2-24"></span>
<span id="cb2-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Successfully translated the post to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>en_file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div></div>
</div>
</section>
<section id="翻译函数" class="level4">
<h4 class="anchored" data-anchor-id="翻译函数">翻译函数</h4>
<p>再次感谢 <code>Rico00121/hugo-translator</code> 项目，由于原项目在翻译时，对于 code 的支持并不好，我们在原有的基础上，修改了大模型的 prompt，增加了对代码的翻译支持：要求翻译时，保留代码的原有格式和内容，不要破坏 Markdown 格式。</p>
<div id="6f38db67" class="cell" data-execution_count="3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> translate_text(text, llm_type):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    translate text to english using llm</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-5">    total_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text)</span>
<span id="cb3-6">    translated_text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb3-7"></span>
<span id="cb3-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Start translating the main text...'</span>)</span>
<span id="cb3-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># translate in chunks to show progress</span></span>
<span id="cb3-10">    chunk_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, total_length, chunk_size):</span>
<span id="cb3-12">        chunk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>chunk_size]</span>
<span id="cb3-13">        translated_text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> get_translation(llm_type,</span>
<span id="cb3-14">                                          [</span>
<span id="cb3-15">                                              {</span>
<span id="cb3-16">                                                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'role'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'system'</span>, </span>
<span id="cb3-17">                                                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'You are a professional translator. '</span></span>
<span id="cb3-18">                                                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Translate the following Chinese text into English. '</span></span>
<span id="cb3-19">                                                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Strictly preserve the original text format in qmd file, including line breaks, indentation, and any special characters for inserting codes. '</span></span>
<span id="cb3-20">                                                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Do not add, remove, or modify any content. '</span></span>
<span id="cb3-21">                                                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Only return the translated text without any additional explanation, comments, or extra content.'</span></span>
<span id="cb3-22">                                              },</span>
<span id="cb3-23">                                              {</span>
<span id="cb3-24">                                                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'role'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user'</span>, </span>
<span id="cb3-25">                                                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>: chunk</span>
<span id="cb3-26">                                              }</span>
<span id="cb3-27">                                          ]</span>
<span id="cb3-28">                                         )</span>
<span id="cb3-29">        progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>((i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>chunk_size)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb3-30">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Tranlation progress: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>progress<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: .2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%'</span>)</span>
<span id="cb3-31">    </span>
<span id="cb3-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> translated_text</span></code></pre></div></div>
</div>
<p>这里我们同样采取了分块翻译的方式，避免大模型的 token 长度限制。最终效果前面已经展示。最终输出的格式完美的英文 <code>.qmd</code> 文件，我们可以直接部署到 GitHub Pages。完整 python 代码已经放进了<a href="https://mp.weixin.qq.com/s/4IR-KMAZ-q2VbI0Fz4fYRg">星球</a>里。</p>
</section>
</section>
<section id="takeaway" class="level3">
<h3 class="anchored" data-anchor-id="takeaway">Takeaway</h3>
<p>基于这种方式，对于需要中英文双语的 API 文档、个人技术教程、博客论文等，我们可以实现快速的中英文双语版本的生成。对于一些需要定期更新的内容，我们可以通过定时任务，自动化的实现中英文双语版本的更新。</p>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>llm</category>
  <category>translator</category>
  <category>qmd</category>
  <category>large-language-model</category>
  <guid>https://leslie-lu.github.io/blog/2025/04/16/llm_translator/</guid>
  <pubDate>Wed, 16 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/aa.png" medium="image" type="image/png"/>
</item>
<item>
  <title>PE0003: Largest Prime Factor</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/04/09/pe0003/</link>
  <description><![CDATA[ 





<section id="题目" class="level3">
<h3 class="anchored" data-anchor-id="题目">题目</h3>
<p>The prime factors of 13195 are 5, 7, 13, and 29. What is the largest prime factor of the number 600851475143?</p>
</section>
<section id="问题描述" class="level3">
<h3 class="anchored" data-anchor-id="问题描述">问题描述</h3>
<p>题目要求：给定一个合数（如600851475143），找到它的最大质因数。 示例：13195的质因数为5、7、13、29，最大质因数是29。</p>
</section>
<section id="解答" class="level3">
<h3 class="anchored" data-anchor-id="解答">解答</h3>
<section id="方法一基础试除法适合小数据" class="level4">
<h4 class="anchored" data-anchor-id="方法一基础试除法适合小数据">方法一：基础试除法（适合小数据）</h4>
<p>思路：从2开始逐个试除，记录能整除的最大质数。若剩余数&gt;1，则其本身为质数，直接作为最大质因数。</p>
<div id="4bc35624" class="cell" data-execution_count="1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> find_largest_prime_factor(n):</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"输入必须大于1"</span></span>
<span id="cb1-5">    largest_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, math.isqrt(n) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 只需检查到sqrt(n)</span></span>
<span id="cb1-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 完全除尽当前质因数</span></span>
<span id="cb1-8">            largest_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i</span>
<span id="cb1-9">            n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//=</span> i</span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 剩余n本身是质数</span></span>
<span id="cb1-11">        largest_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n</span>
<span id="cb1-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> largest_factor</span>
<span id="cb1-13"></span>
<span id="cb1-14">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_largest_prime_factor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600851475143</span>)</span>
<span id="cb1-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 输出：6857</span></span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>6857</code></pre>
</div>
</div>
<p>优点：逻辑简单，适合理解质因数分解原理。 缺点：未优化时需遍历所有数，大数效率低。</p>
</section>
<section id="优化试除法效率翻倍" class="level4">
<h4 class="anchored" data-anchor-id="优化试除法效率翻倍">优化试除法（效率翻倍）</h4>
<p>核心优化：单独处理2，2是唯一的偶质数，先除尽2，后续只需检查奇数。</p>
<div id="a4716728" class="cell" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> optimized_largest_prime_factor(n):</span>
<span id="cb3-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-3">        largest_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-5">            n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-7">        largest_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-8">    </span>
<span id="cb3-9">    factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-10">    max_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.isqrt(n)</span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> max_factor:</span>
<span id="cb3-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-13">            largest_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> factor</span>
<span id="cb3-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-15">                n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//=</span> factor</span>
<span id="cb3-16">            max_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.isqrt(n)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 更新平方根上限</span></span>
<span id="cb3-17">        factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 只检查奇数</span></span>
<span id="cb3-18">    </span>
<span id="cb3-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb3-20">        largest_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n</span>
<span id="cb3-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> largest_factor</span>
<span id="cb3-22"></span>
<span id="cb3-23">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optimized_largest_prime_factor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600851475143</span>)</span>
<span id="cb3-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 输出：6857</span></span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>6857</code></pre>
</div>
</div>
<p>优点：时间复杂度降低50%，适合千万级数据。</p>
</section>
<section id="方法三numpy" class="level4">
<h4 class="anchored" data-anchor-id="方法三numpy">方法三：numpy</h4>
<p>思路：利用 numpy的向量化运算，快速筛选质因数。</p>
<div id="7f5bf67f" class="cell" data-execution_count="3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> s3(n):</span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input must be greater than 1"</span></span>
<span id="cb5-4">    ranges<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, math.isqrt(n) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb5-5">    factors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ranges[n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> ranges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb5-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(factors[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> factors[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb5-8">            factors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> factors[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb5-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb5-11"></span>
<span id="cb5-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(factors[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb5-13"></span>
<span id="cb5-14">n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600_851_475_143</span></span>
<span id="cb5-15">s3(n)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>6857</code></pre>
</div>
</div>
</section>
</section>
<section id="答案" class="level3">
<h3 class="anchored" data-anchor-id="答案">答案</h3>
<p>答案为6857。</p>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>project euler</category>
  <category>algorithm</category>
  <category>math</category>
  <category>programming</category>
  <category>prime</category>
  <category>factor</category>
  <guid>https://leslie-lu.github.io/blog/2025/04/09/pe0003/</guid>
  <pubDate>Wed, 09 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250409003655.png" medium="image" type="image/png"/>
</item>
<item>
  <title>如何科学选择DNAnexus平台的计算实例</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/04/04/dnanexus_instance/</link>
  <description><![CDATA[ 





<section id="引言" class="level3">
<h3 class="anchored" data-anchor-id="引言">引言</h3>
<p>在生物信息学领域，DNAnexus 平台以其强大的数据管理和分析能力<code>不得不</code>成为许多研究者的首选工具。</p>
<p>DNAnexus平台为用户提供了丰富的云计算资源，适用于从轻量级数据处理到高性能基因组分析的各种场景。实例类型作为决定计算资源的核心配置，直接影响作业的运行效率和成本。选择不当可能导致作业失败、运行时间过长或资源浪费。因此，了解实例类型的特性并根据需求进行选择，是每个DNAnexus用户都需要掌握的技能。要高效完成分析任务，选择合适的实例类型（Instance Type）至关重要。</p>
<p>这里，我们将提供一份实用的实例选择指南，帮助大家在性能与成本之间找到最佳平衡。</p>
</section>
<section id="实例类型概述" class="level3">
<h3 class="anchored" data-anchor-id="实例类型概述">实例类型概述</h3>
<p>DNAnexus平台上的实例类型是虚拟机配置的集合，包含内存（Memory）、存储（Storage）和核心数（Cores）等关键参数。实例名称通常遵循特定规则，例如 mem1_ssd1_v2_x16，其含义如下：</p>
<ul>
<li><p>mem：内存级别（mem1、mem2、mem3、mem4等，数字越大内存越多）</p></li>
<li><p>ssd/hdd：存储类型（SSD为固态硬盘，速度快，适合高频读写；HDD为机械硬盘，成本低适合冷数据）</p></li>
<li><p>v2：实例版本（通常为升级版本）</p></li>
<li><p>x16：核心数（例如16核），并行计算能力直接影响任务速度</p></li>
</ul>
<p>此外，部分实例还包含GPU支持（如 gpu1 或 gpu4），适用于深度学习模型训练任务。</p>
</section>
<section id="如何科学选择实例类型" class="level3">
<h3 class="anchored" data-anchor-id="如何科学选择实例类型">如何科学选择实例类型</h3>
<p>选择实例类型时，需要综合考虑任务需求和预算。以下是几个关键点值得大家注意：</p>
<section id="数据大小" class="level4">
<h4 class="anchored" data-anchor-id="数据大小">1. 数据大小</h4>
<p>大数据集需要更大的存储空间。如果处理的是TB级基因组数据，选择存储容量高的实例。</p>
<p>提示：HDD实例通常存储容量更大但速度较慢，适合存储密集型任务；SSD实例则更适合需要快速读写的场景。</p>
</section>
<section id="计算密集度" class="level4">
<h4 class="anchored" data-anchor-id="计算密集度">2. 计算密集度</h4>
<p>计算密集型任务（如基因组组装或变异检测）需要更多核心。选择高核心数的实例。</p>
<p>提示：核心数越多，处理速度越快，但成本也随之上升。</p>
</section>
<section id="内存需求" class="level4">
<h4 class="anchored" data-anchor-id="内存需求">3. 内存需求</h4>
<p>内存密集型工具（如某些比对或组装软件）需要充足的内存支持。优先选择高内存实例，避免因内存不足导致作业失败。</p>
<p>提示：日志中若提示 <code>Out of Memory</code>，说明当前内存不足。</p>
</section>
<section id="成本效益" class="level4">
<h4 class="anchored" data-anchor-id="成本效益">4. 成本效益</h4>
<p>在满足性能的前提下控制成本。对于中小型任务，避免过度配置，选择刚好满足需求的实例类型。</p>
</section>
<section id="调试日志的经验" class="level4">
<h4 class="anchored" data-anchor-id="调试日志的经验">5. 调试日志的经验</h4>
<p>调试日志是优化实例选择的利器。我们建议：</p>
<ul>
<li><p>监控资源使用：检查CPU、内存和存储的实际使用率。如果CPU长期满载，说明计算资源不足，可增加核心数；若内存接近上限，日志中出现 <code>Killed</code> 或 <code>Out of Memory</code> 时，需提升内存；若存储接近上限，日志中若出现 <code>Low scratch storage space</code>，则需增加存储空间。</p></li>
<li><p>识别瓶颈：日志显示I/O等待时间长时、大量磁盘读写等待时间，优先选择SSD实例，提升I/O性能。</p></li>
<li><p>迭代优化：通过日志分析实际资源使用情况，避免选择过于强大的实例。例如，若任务只用了50%内存，可尝试更低配置。</p></li>
</ul>
</section>
</section>
<section id="实例类型列表" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="实例类型列表">实例类型列表</h3>
<p>我们整理了一份 DNAnexus 平台的部分实例类型及其规格和价格，大家公众号后台回复<strong>instance</strong>即可获取表格链接。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250404211402.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">DNAnexus</figcaption>
</figure>
</div>


<!-- -->

</section>

 ]]></description>
  <category>wgs</category>
  <category>genomics</category>
  <category>analysis</category>
  <category>dnanexus</category>
  <category>instance</category>
  <guid>https://leslie-lu.github.io/blog/2025/04/04/dnanexus_instance/</guid>
  <pubDate>Fri, 04 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250404212101.png" medium="image" type="image/png"/>
</item>
<item>
  <title>WGS: GATK vs GraphTyper vs DRAGEN</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/04/02/dragen_wgs/</link>
  <description><![CDATA[ 





<section id="引言" class="level3">
<h3 class="anchored" data-anchor-id="引言">引言</h3>
<p>随着高通量测序技术的飞速发展，全基因组测序（WGS）已成为精准医学和基因组学研究的重要支柱。然而，WGS 数据分析是一项复杂任务，尤其是变异检测环节，需要兼顾准确性、速度和易用性。GATK、GraphTyper 和 DRAGEN 正是这一领域的代表性工具，它们通过不同的技术手段，满足了不同的分析需求。</p>
<p>这里我们将深入探讨这三种工具的区别与联系，帮助更好地理解它们在 WGS 数据分析中的应用。</p>
</section>
<section id="gatk业界标准" class="level3">
<h3 class="anchored" data-anchor-id="gatk业界标准">GATK：业界标准</h3>
<p>GATK（Genome Analysis Toolkit）是由 Broad Institute 开发的一套开源工具集，专为高通量测序数据分析设计。它在变异检测方面表现尤为突出，能够精准识别单核苷酸变异（SNV）和插入缺失（Indel）。作为 WGS 数据分析的业界标准，GATK 被广泛应用于人类基因组研究。GATK 提供从原始数据（BAM）到变异结果（VCF）的全流程解决方案，以严谨的<code>最佳实践</code>著称，适合需要高度定制化分析的研究项目，尤其是在追求准确性和灵活性时。其通过多步骤流程（包括 reads 比对、变异调用和过滤）确保结果可靠。</p>
</section>
<section id="graphtyper基于图的变异检测" class="level3">
<h3 class="anchored" data-anchor-id="graphtyper基于图的变异检测">GraphTyper：基于图的变异检测</h3>
<p>GraphTyper 是一种创新的变异检测工具，采用变异感知的基因组图（variation-aware genome graph）技术。与传统基于线性参考基因组的方法不同，它通过构建包含变异信息的图结构来比对测序 reads，从而减少参考等位基因偏倚。GraphTyper 特别适用于基因组复杂区域的变异检测，或需要提升检测灵敏度的研究，尤其在 SNV 和 Indel 检测中表现出色，因而适合处理大规模 WGS 数据，广泛用于群体遗传学研究。</p>
</section>
<section id="dragen硬件加速的快速分析平台" class="level3">
<h3 class="anchored" data-anchor-id="dragen硬件加速的快速分析平台">DRAGEN：硬件加速的快速分析平台</h3>
<p>DRAGEN（Dynamic Read Analysis for GENomics）是 Illumina 推出的硬件加速平台，利用 FPGA（现场可编程门阵列）技术实现超快速数据处理。它能够从原始 reads 到变异检测的全流程分析，效率远超传统软件工具。对于 30X 覆盖度的 WGS 数据，DRAGEN可在约30分钟内完成分析，极大地缩短了数据处理时间。除了 SNV 和 Indel，还能检测短串联重复（STR）、结构变异（SV）和拷贝数变异（CNV）。</p>


<!-- -->

</section>

 ]]></description>
  <category>wgs</category>
  <category>genomics</category>
  <category>analysis</category>
  <category>gatk</category>
  <category>graph-typer</category>
  <category>dragen</category>
  <guid>https://leslie-lu.github.io/blog/2025/04/02/dragen_wgs/</guid>
  <pubDate>Wed, 02 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250402182406.png" medium="image" type="image/png"/>
</item>
<item>
  <title>PE0002: Even Fibonacci Numbers</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/04/01/pe0002/</link>
  <description><![CDATA[ 





<section id="题目" class="level3">
<h3 class="anchored" data-anchor-id="题目">题目</h3>
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
<div style="text-align:center;">
<p>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …</p>
</div>
<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>
</section>
<section id="问题描述" class="level3">
<h3 class="anchored" data-anchor-id="问题描述">问题描述</h3>
<p>题目要求：找出斐波那契数列中不超过四百万的所有偶数项，并计算它们的和。 斐波那契数列以1和2开始，后续项由前两项相加生成，例如：1, 2, 3, 5, 8, 13, 21, 34… 目标：求所有偶数项（如2、8、34等）的总和。</p>
</section>
<section id="解答" class="level3">
<h3 class="anchored" data-anchor-id="解答">解答</h3>
<section id="方法一直接遍历法新手友好" class="level4">
<h4 class="anchored" data-anchor-id="方法一直接遍历法新手友好">方法一：直接遍历法（新手友好）</h4>
<p>思路：逐个生成斐波那契数，检查是否为偶数，累加符合条件的项。</p>
<div id="3792a4fe" class="cell" data-execution_count="1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sum_of_even_fibonacci(limit) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Returns the sum of even Fibonacci numbers not exceeding the limit."""</span></span>
<span id="cb1-3">    a, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-4">    total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> limit:</span>
<span id="cb1-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-7">            total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> a</span>
<span id="cb1-8">        a, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b, a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>b</span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> total</span>
<span id="cb1-10"></span>
<span id="cb1-11">sum_of_even_fibonacci(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4_000_000</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>4613732</code></pre>
</div>
</div>
<p>优点：逻辑简单，适合理解基础循环和条件判断。 缺点：需检查每个数是否为偶数，效率较低（时间复杂度 <code>O(n)</code>）。</p>
</section>
<section id="方法二生成器-numpy效率升级" class="level4">
<h4 class="anchored" data-anchor-id="方法二生成器-numpy效率升级">方法二：生成器 + NumPy（效率升级）</h4>
<p>思路：用生成器无限生成斐波那契数，结合NumPy数组快速筛选偶数。</p>
<div id="00d62851" class="cell" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># solution using a more efficient method</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fibonacci():</span>
<span id="cb3-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Generator for Fibonacci numbers"""</span></span>
<span id="cb3-4">    a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb3-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> b</span>
<span id="cb3-7">        a, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b, a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>b</span>
<span id="cb3-8"></span>
<span id="cb3-9">series<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fibonacci():</span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4_000_000</span>:</span>
<span id="cb3-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb3-13">    series.append(num)</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># series</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-18">arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(series)</span>
<span id="cb3-19">arr[arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sum of even Fibonacci numbers</span></span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>np.int64(4613732)</code></pre>
</div>
</div>
<p>优点：生成器减少内存占用，NumPy向量化操作加速计算。 缺点：仍需生成全部数列，大范围数据仍不够高效。</p>
</section>
<section id="方法三数学优化法" class="level4">
<h4 class="anchored" data-anchor-id="方法三数学优化法">方法三：数学优化法</h4>
<p>核心发现：斐波那契数列中，每第三项为偶数（如2, 8, 34, 144…）。 利用此规律，只需计算这些特定项的和，跳过无关项，效率飙升。</p>
<div id="eb6fba0f" class="cell" data-execution_count="3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> SumThirdValue(limit) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Every third Fibonacci number is even.</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-5">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> limit:</span>
<span id="cb5-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>y)</span>
<span id="cb5-9">        x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y</span>
<span id="cb5-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span></span>
<span id="cb5-11"></span>
<span id="cb5-12">SumThirdValue(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4_000_000</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>4613732</code></pre>
</div>
</div>
<p>优点：时间复杂度降至 <code>O(log n)</code>，四千万甚至十亿级数据也能瞬间完成。</p>
</section>
</section>
<section id="答案" class="level3">
<h3 class="anchored" data-anchor-id="答案">答案</h3>
<p>答案为4613732。</p>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>project euler</category>
  <category>algorithm</category>
  <category>math</category>
  <category>programming</category>
  <category>fibonacci</category>
  <guid>https://leslie-lu.github.io/blog/2025/04/01/pe0002/</guid>
  <pubDate>Tue, 01 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250401160955.png" medium="image" type="image/png"/>
</item>
<item>
  <title>PE0001: Multiples of 3 and 5</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/03/31/pe0001/</link>
  <description><![CDATA[ 





<section id="题目" class="level3">
<h3 class="anchored" data-anchor-id="题目">题目</h3>
<p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6, 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.</p>
</section>
<section id="问题描述" class="level3">
<h3 class="anchored" data-anchor-id="问题描述">问题描述</h3>
<p>题目要求：找出所有小于1000的自然数中，3或5的倍数的总和。 例如，小于10的符合条件的数有3、5、6、9，它们的和为23。</p>
</section>
<section id="解答" class="level3">
<h3 class="anchored" data-anchor-id="解答">解答</h3>
<section id="暴力遍历法适合小数据" class="level4">
<h4 class="anchored" data-anchor-id="暴力遍历法适合小数据">暴力遍历法（适合小数据）</h4>
<p>思路：遍历1到999的所有数，逐个检查是否为3或5的倍数，累加符合条件的数。</p>
<div id="3505c017" class="cell" data-execution_count="1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution to Project Euler Problem 1</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sum_of_multiples(limit):</span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(limit) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sum_of_multiples(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-6">result</span>
<span id="cb1-7">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sum_of_multiples(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-8">result</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>233168</code></pre>
</div>
</div>
<p>优点：简单直观，适合编程新手。 缺点：当数据量极大（如十亿）时，遍历耗时极长。</p>
</section>
<section id="方法二数学公式法" class="level4">
<h4 class="anchored" data-anchor-id="方法二数学公式法">方法二：数学公式法</h4>
<p>思路：利用等差数列求和公式，避免重复计算。分别计算3、5的倍数总和，减去15的倍数总和（因为15的倍数被重复计算了两次）。</p>
<div id="717b5b2f" class="cell" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># solution using a more efficient method</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> SumDivisibleBy(n, limit) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb3-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns the sum of all numbers less than limit that are divisible by n.</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the largest number less than limit that is divisible by n</span></span>
<span id="cb3-7">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (limit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> n</span>
<span id="cb3-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the formula for the sum of an arithmetic series to calculate the sum</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-10"></span>
<span id="cb3-11">SumDivisibleBy(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> SumDivisibleBy(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> SumDivisibleBy(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb3-12">SumDivisibleBy(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> SumDivisibleBy(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> SumDivisibleBy(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>233168</code></pre>
</div>
</div>
<p>优点：时间复杂度仅为 <code>O(1)</code>，十亿级数据也能秒出结果。</p>
</section>
</section>
<section id="答案" class="level3">
<h3 class="anchored" data-anchor-id="答案">答案</h3>
<p>答案为233168。</p>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>project euler</category>
  <category>algorithm</category>
  <category>math</category>
  <category>programming</category>
  <guid>https://leslie-lu.github.io/blog/2025/03/31/pe0001/</guid>
  <pubDate>Mon, 31 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250331154617.png" medium="image" type="image/png"/>
</item>
<item>
  <title>NumPy 广播机制详解</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/03/25/broadcasting_in_numpy/</link>
  <description><![CDATA[ 





<section id="引言" class="level3">
<h3 class="anchored" data-anchor-id="引言">引言</h3>
<p>这里我们介绍 NumPy 中的广播机制，这一功能是 NumPy 库的核心特性之一，特别适用于数据科学和数值计算领域，其允许不同形状的数组进行算术操作，显著简化代码并提升计算效率。</p>
</section>
<section id="背景与定义" class="level3">
<h3 class="anchored" data-anchor-id="背景与定义">背景与定义</h3>
<p>NumPy 是 Python 中用于高效数组操作的库，广泛应用于科学计算、机器学习和数据分析。广播机制是指 NumPy 在算术操作中处理不同形状数组的能力，通过<strong>扩展</strong>较小数组的维度，使其与较大数组匹配，从而进行逐元素操作。</p>
<p>例如，将标量 2 加到数组 [1, 2, 3] 上，结果为 [3, 4, 5]，标量 2 被概念上扩展为 [2, 2, 2]。这种机制不仅节省内存（不实际复制数据），还避免了手动循环，显著提高了计算效率，尤其在处理大型数据集时。</p>
</section>
<section id="广播规则详解" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="广播规则详解">广播规则详解</h3>
<p>广播的实现依赖于以下规则，确保数组形状兼容：</p>
<ul>
<li><p>维度对齐：比较两个数组的形状，从右向左（尾部维度开始）。如果维度数不同，较小数组会在左侧补齐维度 1。例如，形状 (3,) 的数组可视为 (1, 3)。</p></li>
<li><p>形状兼容性：如果对应维度大小相等，直接操作。如果一个维度为 1，NumPy 会<strong>拉伸</strong>该维度，使其匹配另一个维度的大小。例如，形状 (1, 3) 的数组与 (2, 3) 相加，前者会被重复为 (2, 3)。如果对应维度既不等也不为 1，操作失败，抛出 ValueError，提示 <code>operands could not be broadcast together</code>。</p></li>
</ul>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/broadcasting_2.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">broadcasting</figcaption>
</figure>
</div>
<ul>
<li>结果形状：广播后的结果形状取每个维度的最大值，缺失维度视为 1。</li>
</ul>
<p>例如：数组 A 形状 (2, 3)，数组 B 形状 (3,)：B 被视为 (1, 3)，然后广播为 (2, 3)，操作可进行。数组 C 形状 (2, 3)，数组 D 形状 (2, 2)：比较最后维度 3 和 2，不兼容，抛出错误。这些规则确保操作的正确性，但需要大家理解形状匹配的逻辑。</p>
<p>以下是几个具体例子，展示广播机制的应用：</p>
<div id="74af02d5" class="cell" data-execution_count="1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2">arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb1-3">scalar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-4">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> scalar</span>
<span id="cb1-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>[3 4 5]</code></pre>
</div>
</div>
<p>这里，标量 2 被广播为 [2, 2, 2]，与 [1, 2, 3] 逐元素相加。效率高，因为不实际创建新数组。</p>
<div id="bc963a25" class="cell" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">arr1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb3-2">                 [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]])</span>
<span id="cb3-3">arr2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>])</span>
<span id="cb3-4">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arr1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> arr2</span>
<span id="cb3-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[11 22 33]
 [14 25 36]]</code></pre>
</div>
</div>
<p>arr1 形状 (2, 3)，arr2 形状 (3,)。arr2 被视为 (1, 3)，然后广播为 (2, 3)，即 [[10, 20, 30], [10, 20, 30]]。结果为逐元素相加，符合预期。</p>
<p>在图像处理中，假设有形状 (2, 2, 3) 的图像数组（高度、宽度、通道），与形状 (3,) 的缩放向量：</p>
<div id="2c30b84f" class="cell" data-execution_count="3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.9</span>],</span>
<span id="cb5-2">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">52.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">23.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">36.5</span>]],</span>
<span id="cb5-3">                  [[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">55.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">31.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">23.9</span>],</span>
<span id="cb5-4">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.9</span>]]])</span>
<span id="cb5-5">scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>])</span>
<span id="cb5-6">scaled_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span></code></pre></div></div>
</div>
<p>scale 被广播为 (2, 2, 3)，每个像素的通道值分别乘以 [3, 3, 8]。这种操作在数据标准化或特征缩放中非常常见。</p>
</section>
<section id="常见陷阱与优化建议" class="level3">
<h3 class="anchored" data-anchor-id="常见陷阱与优化建议">常见陷阱与优化建议</h3>
<p>尽管广播强大，但有以下常见问题需要注意：</p>
<ul>
<li><p>形状不匹配：如果数组形状无法广播，NumPy 会抛出 ValueError。建议先打印形状（如 print(arr.shape)）确认。</p></li>
<li><p>意外广播：一维数组与二维数组相加，可能按行或按列广播，需明确意图。例如，np.array([1,2]) + np.array([[3,4],[5,6]]) 需要注意广播方向。</p></li>
</ul>
<div id="0a68234f" class="cell" data-execution_count="4">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb6-2">b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]])</span>
<span id="cb6-3">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb6-4">a[:, np.newaxis] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>array([[4, 5],
       [7, 8]])</code></pre>
</div>
</div>
<ul>
<li>性能问题：对于大型数组，广播可能创建临时数组，增加内存使用。在内存受限情况下，考虑使用循环或显式重塑。</li>
</ul>
<section id="优化建议" class="level4">
<h4 class="anchored" data-anchor-id="优化建议">优化建议：</h4>
<ul>
<li><p>使用 np.newaxis 或 reshape 显式控制维度，例如 arr[:, np.newaxis] 将一维数组转为列向量。</p></li>
<li><p>检查数组形状，确保符合预期。</p></li>
<li><p>对于超大型数据集，评估广播是否会导致内存瓶颈，可能需要替代方案。</p></li>
</ul>


<!-- -->

</section>
</section>

 ]]></description>
  <category>python</category>
  <category>numpy</category>
  <category>broadcasting</category>
  <guid>https://leslie-lu.github.io/blog/2025/03/25/broadcasting_in_numpy/</guid>
  <pubDate>Tue, 25 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/broadcasting_2.png" medium="image" type="image/png"/>
</item>
<item>
  <title>来拿2025年中科院最新分区Excel表</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/03/22/SCI_journal_partitions/</link>
  <description><![CDATA[ 





<p>3 月 20 日，期刊分区表官方正式发布了 2025 年升级版《2025 年中国科学院文献情报中心期刊分区表》。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250321235926.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">期刊分区表官方</figcaption>
</figure>
</div>
<p>我们也是第一时间将最新的中科院分区表医学大类的期刊数据爬出来整理成 Excel 表格，供大家科研投稿参考。</p>
<p>大家公众号后台回复<strong>2025中科院分区</strong>即可获取表格链接。</p>
<p>注意：直接复制回复<code>2025中科院分区</code>这几个字即可，不要打错了哦。</p>


<!-- -->


 ]]></description>
  <category>SCI</category>
  <guid>https://leslie-lu.github.io/blog/2025/03/22/SCI_journal_partitions/</guid>
  <pubDate>Sat, 22 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250321235926.png" medium="image" type="image/png"/>
</item>
<item>
  <title>全基因组测序GWAS vs. 传统GWAS</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/03/11/WGS_GWAS/</link>
  <description><![CDATA[ 





<section id="引言" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="引言">引言</h3>
<p>全基因组关联分析（Genome-Wide Association Study, GWAS）是遗传学领域研究复杂性状和疾病遗传基础的强大工具。传统GWAS主要依赖SNP芯片技术，而随着测序技术的飞速发展，全基因组测序（Whole-Genome Sequencing, WGS）逐渐成为GWAS研究的新选择。</p>
<p>WGS-GWAS相比传统GWAS到底有哪些优势呢？</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250311233414.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Interconnected techniques in genome-wide association studies (GWAS) research<span class="citation" data-cites="RN1159">(Omidiran et al. 2024)</span></figcaption>
</figure>
</div>
<p>图片来自：<a href="https://doi.org/10.1016/j.jbi.2021.103837" title="Interconnected techniques in genome-wide association studies (GWAS) research">Interconnected techniques in genome-wide association studies (GWAS) research</a></p>
</section>
<section id="传统gwas的局限性" class="level3">
<h3 class="anchored" data-anchor-id="传统gwas的局限性">传统GWAS的局限性</h3>
<p>传统GWAS使用SNP芯片技术，虽然在过去取得了巨大成功，但也存在一些明显的局限性：</p>
<ul>
<li><p><strong>变异覆盖有限</strong>：SNP芯片只能检测预先设计的常见变异位点（SNP），无法发现新的或罕见的遗传变异。</p></li>
<li><p><strong>分辨率低</strong>：由于芯片探针数量有限，难以精确定位与疾病相关的具体变异。</p></li>
<li><p><strong>罕见变异检测能力弱</strong>：主要针对常见变异（MAF &gt; 0.05），对罕见变异（MAF &lt; 0.01）的捕捉能力不足。</p></li>
<li><p><strong>因果变异难识别</strong>：通常只能找到与疾病相关的标记SNP，而非真正的致病变异。</p></li>
<li><p><strong>结构变异检测受限</strong>：SNP芯片专注于单核苷酸变异，对插入、删除等结构变异的检测能力较差。</p></li>
<li><p><strong>群体特异性问题</strong>：芯片设计基于特定人群数据，可能不适用于其他群体。</p></li>
<li><p><strong>数据质量依赖技术</strong>：依赖杂交技术，易受杂交误差影响。</p></li>
<li><p><strong>灵活性低</strong>：分析局限于芯片预设的变异类型和范围。</p></li>
</ul>
<p>这些局限性使得传统GWAS在研究复杂疾病的遗传机制时受到一定制约。</p>
</section>
<section id="wgs-gwas的优势" class="level3">
<h3 class="anchored" data-anchor-id="wgs-gwas的优势">WGS-GWAS的优势</h3>
<p>相比之下，使用全基因组测序数据进行GWAS（WGS-GWAS）带来了革命性的改进，以下是其主要优势：</p>
<section id="全面的遗传变异覆盖" class="level4">
<h4 class="anchored" data-anchor-id="全面的遗传变异覆盖">1. <strong>全面的遗传变异覆盖</strong></h4>
<p>WGS能够测定整个基因组的DNA序列，覆盖所有类型的遗传变异，包括SNP、罕见变异以及插入、删除等结构变异。</p>
</section>
<section id="更高的分辨率" class="level4">
<h4 class="anchored" data-anchor-id="更高的分辨率">2. <strong>更高的分辨率</strong></h4>
<p>WGS的分辨率可以精确到单个碱基对级别，帮助研究者更准确地定位与性状或疾病相关的遗传变异，避免传统GWAS中模糊定位的问题。</p>
</section>
<section id="罕见变异的检测能力" class="level4">
<h4 class="anchored" data-anchor-id="罕见变异的检测能力">3. <strong>罕见变异的检测能力</strong></h4>
<p>罕见变异（MAF &lt; 0.01）在复杂疾病中可能扮演重要角色。WGS能够全面捕捉这些低频变异，为研究提供新的突破口。</p>
</section>
<section id="直接识别因果变异" class="level4">
<h4 class="anchored" data-anchor-id="直接识别因果变异">4. <strong>直接识别因果变异</strong></h4>
<p>传统GWAS通常找到的是与疾病关联的标记位点，而WGS可以直接检测潜在的因果变异，提升对疾病机制的理解。</p>
</section>
<section id="结构变异的捕捉" class="level4">
<h4 class="anchored" data-anchor-id="结构变异的捕捉">5. <strong>结构变异的捕捉</strong></h4>
<p>WGS不仅限于SNP，还能检测插入、删除、倒位等结构变异，这些变异可能对性状和疾病有重要影响。</p>
</section>
<section id="群体特异性变异的研究" class="level4">
<h4 class="anchored" data-anchor-id="群体特异性变异的研究">6. <strong>群体特异性变异的研究</strong></h4>
<p>WGS不受芯片设计的群体偏见限制，能发现特定人群特有的变异，为跨人群遗传研究提供支持。</p>
</section>
<section id="更高的数据质量" class="level4">
<h4 class="anchored" data-anchor-id="更高的数据质量">7. <strong>更高的数据质量</strong></h4>
<p>WGS通过直接测序DNA生成数据，相比SNP芯片的杂交技术，减少了技术误差，结果更可靠。</p>
</section>
<section id="分析灵活性" class="level4">
<h4 class="anchored" data-anchor-id="分析灵活性">8. <strong>分析灵活性</strong></h4>
<p>WGS数据包含整个基因组信息，研究者可以根据需要选择不同的变异类型和分析策略，灵活性远超传统GWAS。</p>
</section>
</section>
<section id="take-home-message" class="level3">
<h3 class="anchored" data-anchor-id="take-home-message">Take-Home Message</h3>
<p>总的来说，使用全基因组测序数据进行GWAS在变异覆盖、分辨率、罕见变异检测、因果变异识别、结构变异分析、群体特异性、数据质量和灵活性等方面都显著优于传统GWAS。这些优势使得WGS-GWAS在探索复杂性状和疾病遗传基础时展现出更大的潜力，为精准医学和遗传学研究开辟了新的可能性。</p>


<!-- -->


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-RN1159" class="csl-entry">
Omidiran, Oluwaferanmi, Aashna Patel, Sarah Usman, Ishani Mhatre, Habiba Abdelhalim, William Degroat, Rishabh Narayanan, Kritika Singh, Dinesh Mendhe, and Zeeshan Ahmed. 2024. <span>“GWAS Advancements to Investigate Disease Associations and Biological Mechanisms.”</span> Journal Article. <em>Clinical and Translational Discovery</em> 4 (3). <a href="https://doi.org/10.1002/ctd2.296">https://doi.org/10.1002/ctd2.296</a>.
</div>
</div></section></div> ]]></description>
  <category>GWAS</category>
  <category>bioinformatics</category>
  <category>genetics</category>
  <category>WGS</category>
  <guid>https://leslie-lu.github.io/blog/2025/03/11/WGS_GWAS/</guid>
  <pubDate>Tue, 11 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250311233414.png" medium="image" type="image/png"/>
</item>
<item>
  <title>证明随机化和盲法消除向均值回归偏倚</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/03/08/randomizationandBlindness/</link>
  <description><![CDATA[ 





<section id="引言" class="level3">
<h3 class="anchored" data-anchor-id="引言">引言</h3>
<p>讨论治疗分配时采用随机化和评估处理效应时采用盲法将如何帮助消除向均值回归所导致的偏倚。</p>
</section>
<section id="背景" class="level3">
<h3 class="anchored" data-anchor-id="背景">背景</h3>
<p>我们假设 <img src="https://latex.codecogs.com/png.latex?X_1"> 是处理组的基线测量值，<img src="https://latex.codecogs.com/png.latex?X_2"> 是同一组的随访测量值，且配对测量值 <img src="https://latex.codecogs.com/png.latex?(X_1,%20X_2)"> 服从二元正态分布。向均值回归（regression to the mean）是一种统计现象，是仅对那些具有 <strong>极端</strong> 初始测量值的个体进行第二次测量时发生的现象，指基线测量值 <img src="https://latex.codecogs.com/png.latex?X_1"> 较高（低）的个体在随访测量中 <img src="https://latex.codecogs.com/png.latex?X_2"> 回归到总体均值 <img src="https://latex.codecogs.com/png.latex?%5Cmu"> 的现象。</p>
<p>在临床试验中，这种现象可能被误认为是治疗效果。这里我们试着使用线性回归模型证明，随机化和盲法可以消除这种向均值回归的偏倚。</p>
</section>
<section id="线性回归模型" class="level3">
<h3 class="anchored" data-anchor-id="线性回归模型">线性回归模型</h3>
<p>设处理组的 <img src="https://latex.codecogs.com/png.latex?X_1"> 和 <img src="https://latex.codecogs.com/png.latex?X_2"> 二元正态分布的均值向量和协方差矩阵为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bpmatrix%7D%20X_1%20%5C%5C%20X_2%20%5Cend%7Bpmatrix%7D%20%5Csim%20%5Ctext%7BN%7D%20%5Cleft(%20%5Cbegin%7Bpmatrix%7D%20%5Cmu_1%20%5C%5C%20%5Cmu_2%20%5Cend%7Bpmatrix%7D,%20%5Cbegin%7Bpmatrix%7D%20%5Csigma_1%5E2%20&amp;%20%5Crho%5Csigma_1%5Csigma_2%20%5C%5C%20%5Crho%5Csigma_1%5Csigma_2%20&amp;%20%5Csigma_2%5E2%20%5Cend%7Bpmatrix%7D%20%5Cright)%0A"></p>
<p>其中，</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Crho%20=%20%5Cfrac%7B%5Ctext%7BCov%7D(X_1,%20X_2)%7D%7B%5Csigma_1%20%5Csigma_2%7D"> 是 <img src="https://latex.codecogs.com/png.latex?X_1"> 和 <img src="https://latex.codecogs.com/png.latex?X_2"> 之间的相关系数。</p>
<p>我们使用简单的线性回归模型来描述 <img src="https://latex.codecogs.com/png.latex?X_1"> 和 <img src="https://latex.codecogs.com/png.latex?X_2"> 之间的关系：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE(X_2%7CX_1)%20=%20%5Calpha%20+%20%5Cbeta%20X_1=%20%5Cmu_2%20+%20%5Crho%20%5Cfrac%7B%5Csigma_2%7D%7B%5Csigma_1%7D%20(X_1%20-%20%5Cmu_1)%0A"></p>
<p>其中：</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%20%5Cmu_2-%20%5Cbeta%20%5Cmu_1"> ，</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta=%20%5Crho%20%5Cfrac%7B%5Csigma_2%7D%7B%5Csigma_1%7D"> 。</li>
</ul>
</section>
<section id="向均值回归的影响" class="level3">
<h3 class="anchored" data-anchor-id="向均值回归的影响">向均值回归的影响</h3>
<p>我们假设该处理组无治疗效果，即 <img src="https://latex.codecogs.com/png.latex?%5Cmu_1=%5Cmu_2=%5Cmu"> 且 <img src="https://latex.codecogs.com/png.latex?%5Csigma_1=%5Csigma_2=%5Csigma"> ，则对于特定值 <img src="https://latex.codecogs.com/png.latex?X_1=x_1">，有：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE(X_2%7CX_1=x_1)%20=%20%5Cmu%20+%20%5Crho%20(x_1-%5Cmu)%0A"></p>
<p>在等号两侧各减去 <img src="https://latex.codecogs.com/png.latex?%5Cmu"> 并取绝对值后，有以下不等式成立：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7CE(X_2%7CX_1=x_1)%20-%20%5Cmu%7C%20=%20%7C%5Crho%7C%20%7C(x_1-%5Cmu)%7C%20%5Cleq%20%7C(x_1-%5Cmu)%7C%0A"></p>
<p>如此一来，我们可以看到，当 <img src="https://latex.codecogs.com/png.latex?x_1"> 取极端值时，<img src="https://latex.codecogs.com/png.latex?X_2"> 与 <img src="https://latex.codecogs.com/png.latex?%5Cmu"> 之间的差异大体上始终会减小，<img src="https://latex.codecogs.com/png.latex?X_2"> 的期望值会向 <img src="https://latex.codecogs.com/png.latex?%5Cmu"> 靠拢，这也就是著名的向均值回归现象。而在临床试验中，这种自然变化可能被误认为是治疗效果（因为在无处理效应时却看似产生了效果），从而带来偏倚。</p>
<p>上面式子也可以表示为:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7CE(X_2%7CX_1=x_1)-x_1%7C%20=%20%7C(%5Crho-1)(x_1-%5Cmu)%7C%0A"></p>
<p>可以更加清楚地看到，对于特定的 <img src="https://latex.codecogs.com/png.latex?X_1=x_1">，公式左侧向均值回归所产生的影响通常不为零。只有当 <img src="https://latex.codecogs.com/png.latex?%5Crho=1"> 或者 <img src="https://latex.codecogs.com/png.latex?x_1"> 是一个等于总体均值 <img src="https://latex.codecogs.com/png.latex?%5Cmu"> 的完美样本时，向均值回归的影响消失为零。</p>
</section>
<section id="随机化的作用" class="level3">
<h3 class="anchored" data-anchor-id="随机化的作用">随机化的作用</h3>
<p>接下来，我们开始讨论随机化如何帮助消除向均值回归的偏倚。</p>
<p>由于随机化，使得处理组和对照组的基线测量值的分布相同，即均值均为 <img src="https://latex.codecogs.com/png.latex?%5Cmu">，方差相同。对照组模型为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7CE(Y_2%7CY_1=y_1)-y_1%7C%20=%20%7C(%5Crho-1)(y_1-%5Cmu)%7C%0A"></p>
<p>处理组和对照组均会发生向均值回归，治疗效果则通常通过组间差异来评估：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5CDelta%20=%20%7CE(X_2%7CX_1=x_1)-x_1%7C%20-%20%7CE(Y_2%7CY_1=y_1)-y_1%7C%0A"></p>
<p>因为随机化使得 <img src="https://latex.codecogs.com/png.latex?%7CE(X_2%7CX_1=x_1)-x_1%7C%20%5Capprox%20%7CE(Y_2%7CY_1=y_1)-y_1%7C">，向均值回归的影响在 <img src="https://latex.codecogs.com/png.latex?%5CDelta"> 中抵消。若存在处理效应，则经过随机化之后得到的 <img src="https://latex.codecogs.com/png.latex?%5CDelta"> 会更接近于真实的治疗效果，而排除了向均值回归得偏倚。</p>
</section>
<section id="盲法的作用" class="level3">
<h3 class="anchored" data-anchor-id="盲法的作用">盲法的作用</h3>
<p>而对于盲法帮助消除向均值回归的偏倚，主要在于盲法确保在不知道治疗分配情况下的 <img src="https://latex.codecogs.com/png.latex?x_2"> 和 <img src="https://latex.codecogs.com/png.latex?y_2"> 测量的客观性，避免人为放大或掩盖向均值回归的自然变化，从而进一步防止向均值回归被误解为治疗效应。</p>
</section>
<section id="结论" class="level3">
<h3 class="anchored" data-anchor-id="结论">结论</h3>
<p>随机化通过均衡基线消除向均值回归的组间差异，盲法通过客观测量避免主观偏倚，两者共同确保治疗效果估计无偏。</p>


<!-- -->

</section>

 ]]></description>
  <category>RCT</category>
  <category>Statistics</category>
  <category>Methodology</category>
  <category>randomization</category>
  <category>blindness</category>
  <category>regression to the mean</category>
  <guid>https://leslie-lu.github.io/blog/2025/03/08/randomizationandBlindness/</guid>
  <pubDate>Sat, 08 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250307224129.png" medium="image" type="image/png"/>
</item>
<item>
  <title>配对样本t检验的统计学效率</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/03/07/pairedttest/</link>
  <description><![CDATA[ 





<section id="引言" class="level3">
<h3 class="anchored" data-anchor-id="引言">引言</h3>
<p>复习独立样本 t 检验和配对样本 t 检验的统计量，并证明配对样本 t 检验的统计学效率高于独立样本 t 检验。</p>
<p>统计学效率通常指在相同的显著性水平和样本量下，检验检测真实差异（效应量）的能力（即检验功效 power）更高，或者在达到相同power时所需样本量更小。</p>
</section>
<section id="两种t检验的定义与适用场景" class="level3">
<h3 class="anchored" data-anchor-id="两种t检验的定义与适用场景">两种t检验的定义与适用场景</h3>
<ul>
<li><p><strong>配对样本t检验</strong>：适用于同一组个体在两个不同条件下的测量结果，或配对设计的实验。其核心思想是计算每对观测值的差异 <img src="https://latex.codecogs.com/png.latex?D_i%20=%20X_i%20-%20Y_i">，然后检验这些差异的均值是否为零。</p></li>
<li><p><strong>独立样本t检验</strong>：适用于两个独立组的均值比较，例如实验组和对照组的测量结果完全独立。</p></li>
</ul>
</section>
<section id="两种检验的基本公式" class="level3">
<h3 class="anchored" data-anchor-id="两种检验的基本公式">两种检验的基本公式</h3>
<section id="配对样本t检验" class="level4">
<h4 class="anchored" data-anchor-id="配对样本t检验">配对样本t检验</h4>
<p>假设有<img src="https://latex.codecogs.com/png.latex?n">对配对观测值<img src="https://latex.codecogs.com/png.latex?(X_1,%20Y_1),%20(X_2,%20Y_2),%20%5Cldots,%20(X_n,%20Y_n)">，定义差异<img src="https://latex.codecogs.com/png.latex?D_i%20=%20X_i%20-%20Y_i">。目标是检验原假设<img src="https://latex.codecogs.com/png.latex?H_0:%20%5Cmu_D%20=%200">对备择假设<img src="https://latex.codecogs.com/png.latex?H_1:%20%5Cmu_D%20%5Cneq%200">。统计量为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0At%20=%20%5Cfrac%7B%5Cbar%7BD%7D%7D%7Bs_D%20/%20%5Csqrt%7Bn%7D%7D%0A"></p>
<p>其中：</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cbar%7BD%7D%20=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5En%20D_i"> 是差异的样本均值，</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?s_D%20=%20%5Csqrt%7B%5Cfrac%7B1%7D%7Bn-1%7D%20%5Csum_%7Bi=1%7D%5En%20(D_i%20-%20%5Cbar%7BD%7D)%5E2%7D"> 是差异的样本标准差，</p></li>
<li><p>自由度为<img src="https://latex.codecogs.com/png.latex?n%20-%201">。</p></li>
</ul>
</section>
<section id="独立样本t检验" class="level4">
<h4 class="anchored" data-anchor-id="独立样本t检验">独立样本t检验</h4>
<p>假设有两个独立样本，样本1为<img src="https://latex.codecogs.com/png.latex?X_1,%20X_2,%20%5Cldots,%20X_%7Bn_1%7D">，样本2为<img src="https://latex.codecogs.com/png.latex?Y_1,%20Y_2,%20%5Cldots,%20Y_%7Bn_2%7D">，均值分别为<img src="https://latex.codecogs.com/png.latex?%5Cmu_X">和<img src="https://latex.codecogs.com/png.latex?%5Cmu_Y">。目标是检验<img src="https://latex.codecogs.com/png.latex?H_0:%20%5Cmu_X%20=%20%5Cmu_Y">对<img src="https://latex.codecogs.com/png.latex?H_1:%20%5Cmu_X%20%5Cneq%20%5Cmu_Y">。统计量为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0At%20=%20%5Cfrac%7B%5Cbar%7BX%7D%20-%20%5Cbar%7BY%7D%7D%7Bs_p%20%5Csqrt%7B%5Cfrac%7B1%7D%7Bn_1%7D%20+%20%5Cfrac%7B1%7D%7Bn_2%7D%7D%7D%0A"></p>
<p>其中：</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cbar%7BX%7D"> 和 <img src="https://latex.codecogs.com/png.latex?%5Cbar%7BY%7D"> 分别是两个样本的均值，</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?s_p%5E2%20=%20%5Cfrac%7B(n_1%20-%201)s_X%5E2%20+%20(n_2%20-%201)s_Y%5E2%7D%7Bn_1%20+%20n_2%20-%202%7D"> 是合并方差（假设两组方差相等），</p></li>
<li><p>自由度为<img src="https://latex.codecogs.com/png.latex?n_1%20+%20n_2%20-%202">。</p></li>
</ul>
</section>
</section>
<section id="统计学效率的比较框架" class="level3">
<h3 class="anchored" data-anchor-id="统计学效率的比较框架">统计学效率的比较框架</h3>
<p>为公平比较两种检验的效率，我们假设：</p>
<ul>
<li><p>总观测次数相同。例如，配对样本t检验有<img src="https://latex.codecogs.com/png.latex?n">对（共<img src="https://latex.codecogs.com/png.latex?2n">个观测值），独立样本t检验有两个各有<img src="https://latex.codecogs.com/png.latex?n">个观测值的独立样本（共<img src="https://latex.codecogs.com/png.latex?2n">个观测值）。</p></li>
<li><p>配对样本中的<img src="https://latex.codecogs.com/png.latex?X_i">和<img src="https://latex.codecogs.com/png.latex?Y_i">之间存在相关性，相关系数为<img src="https://latex.codecogs.com/png.latex?%5Crho">（通常<img src="https://latex.codecogs.com/png.latex?%5Crho%20%3E%200">，即非负相关性，因为配对设计常用于控制个体差异）。</p></li>
<li><p>两组的总体方差均为<img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2">，效应量（均值差异）为<img src="https://latex.codecogs.com/png.latex?%5Cdelta">。</p></li>
</ul>
<p>统计学效率的关键在于估计量的方差和检验效能的比较。我们通过计算估计量的方差和非中心参数来证明配对样本t检验的优势。</p>
</section>
<section id="估计量的方差比较" class="level3">
<h3 class="anchored" data-anchor-id="估计量的方差比较">估计量的方差比较</h3>
<section id="配对样本t检验-1" class="level4">
<h4 class="anchored" data-anchor-id="配对样本t检验-1">配对样本t检验</h4>
<p>配对差异<img src="https://latex.codecogs.com/png.latex?D_i%20=%20X_i%20-%20Y_i">的方差为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BVar%7D(D_i)%20=%20%5Ctext%7BVar%7D(X_i)%20+%20%5Ctext%7BVar%7D(Y_i)%20-%202%20%5Ctext%7BCov%7D(X_i,%20Y_i)%0A"></p>
<p>假设<img src="https://latex.codecogs.com/png.latex?%5Ctext%7BVar%7D(X_i)%20=%20%5Ctext%7BVar%7D(Y_i)%20=%20%5Csigma%5E2">，且<img src="https://latex.codecogs.com/png.latex?%5Ctext%7BCov%7D(X_i,%20Y_i)%20=%20%5Crho%20%5Csigma%5E2">，则：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BVar%7D(D_i)%20=%202%20%5Csigma%5E2%20(1%20-%20%5Crho)%0A"></p>
<p>差异均值<img src="https://latex.codecogs.com/png.latex?%5Cbar%7BD%7D">的方差为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BVar%7D(%5Cbar%7BD%7D)%20=%20%5Cfrac%7B%5Ctext%7BVar%7D(D_i)%7D%7Bn%7D%20=%20%5Cfrac%7B2%20%5Csigma%5E2%20(1%20-%20%5Crho)%7D%7Bn%7D%0A"></p>
<p>标准误为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BSE%7D(%5Cbar%7BD%7D)%20=%20%5Csqrt%7B%5Cfrac%7B2%20%5Csigma%5E2%20(1%20-%20%5Crho)%7D%7Bn%7D%7D%0A"></p>
</section>
<section id="独立样本t检验-1" class="level4">
<h4 class="anchored" data-anchor-id="独立样本t检验-1">独立样本t检验</h4>
<p>对于两个各有<img src="https://latex.codecogs.com/png.latex?n">个观测值的独立样本，<img src="https://latex.codecogs.com/png.latex?%5Cbar%7BX%7D%20-%20%5Cbar%7BY%7D">的方差为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BVar%7D(%5Cbar%7BX%7D%20-%20%5Cbar%7BY%7D)%20=%20%5Ctext%7BVar%7D(%5Cbar%7BX%7D)%20+%20%5Ctext%7BVar%7D(%5Cbar(Y))%20=%20%5Cfrac%7B2%20%5Csigma%5E2%7D%7Bn%7D%0A"></p>
<p>标准误为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BSE%7D(%5Cbar%7BX%7D%20-%20%5Cbar%7BY%7D)%20=%20%5Csqrt%7B%5Cfrac%7B2%20%5Csigma%5E2%7D%7Bn%7D%7D%0A"></p>
</section>
<section id="方差比较" class="level4">
<h4 class="anchored" data-anchor-id="方差比较">方差比较</h4>
<ul>
<li><p>配对样本t检验的方差：<img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B2%20%5Csigma%5E2%20(1%20-%20%5Crho)%7D%7Bn%7D"></p></li>
<li><p>独立样本t检验的方差：<img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B2%20%5Csigma%5E2%7D%7Bn%7D"></p></li>
</ul>
<p>当<img src="https://latex.codecogs.com/png.latex?%5Crho%20%3E%200">时，<img src="https://latex.codecogs.com/png.latex?1%20-%20%5Crho%20%3C%201">，因此：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B2%20%5Csigma%5E2%20(1%20-%20%5Crho)%7D%7Bn%7D%20%3C%20%5Cfrac%7B2%20%5Csigma%5E2%7D%7Bn%7D%0A"></p>
<p>这表明配对样本t检验的估计量<img src="https://latex.codecogs.com/png.latex?%5Cbar%7BD%7D">比独立样本t检验的估计量<img src="https://latex.codecogs.com/png.latex?%5Cbar%7BX%7D%20-%20%5Cbar%7BY%7D">具有更小的方差。两者的检验统计量分子相同（即效应量），但配对样本t检验的分母（标准误）更小，估计越精确，检验越有可能检测到真实的差异，相应地更容易拒绝原假设，因此具有更高的power，统计学效率更高。</p>
</section>
</section>
<section id="power与非中心参数" class="level3">
<h3 class="anchored" data-anchor-id="power与非中心参数">power与非中心参数</h3>
<p>power 是检验在备择假设为真时拒绝原假设的概率，power 与统计量的非中心参数相关。非中心参数越大，power 越高。</p>
<section id="配对样本t检验-2" class="level4">
<h4 class="anchored" data-anchor-id="配对样本t检验-2">配对样本t检验</h4>
<p>在备择假设<img src="https://latex.codecogs.com/png.latex?%5Cmu_D%20=%20%5Cdelta">下，非中心参数为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clambda_p%20=%20%5Cfrac%7B%5Cdelta%7D%7B%5Ctext%7BSE%7D(%5Cbar%7BD%7D)%7D%20=%20%5Cfrac%7B%5Cdelta%7D%7B%5Csigma%7D%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20(1%20-%20%5Crho)%7D%7D%0A"></p>
</section>
<section id="独立样本t检验-2" class="level4">
<h4 class="anchored" data-anchor-id="独立样本t检验-2">独立样本t检验</h4>
<p>在备择假设<img src="https://latex.codecogs.com/png.latex?%5Cmu_X%20-%20%5Cmu_Y%20=%20%5Cdelta">下，非中心参数为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clambda_i%20=%20%5Cfrac%7B%5Cdelta%7D%7B%5Ctext%7BSE%7D(%5Cbar%7BX%7D%20-%20%5Cbar%7BY%7D)%7D%20=%20%5Cfrac%7B%5Cdelta%7D%7B%5Csigma%7D%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%7D%7D%0A"></p>
</section>
<section id="非中心参数比较" class="level4">
<h4 class="anchored" data-anchor-id="非中心参数比较">非中心参数比较</h4>
<p>比较<img src="https://latex.codecogs.com/png.latex?%5Clambda_p">和<img src="https://latex.codecogs.com/png.latex?%5Clambda_i">：</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Clambda_p%20=%20%5Cfrac%7B%5Cdelta%7D%7B%5Csigma%7D%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20(1%20-%20%5Crho)%7D%7D"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Clambda_i%20=%20%5Cfrac%7B%5Cdelta%7D%7B%5Csigma%7D%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%7D%7D"></p></li>
</ul>
<p>当<img src="https://latex.codecogs.com/png.latex?%5Crho%20%3E%200">时，<img src="https://latex.codecogs.com/png.latex?%5Clambda_p%20%3E%20%5Clambda_i">，表明配对样本t检验在相同条件下具有更高的 power。</p>
</section>
</section>
<section id="结论" class="level2">
<h2 class="anchored" data-anchor-id="结论">结论</h2>
<p>通过估计量方差和非中心参数的比较，证明了当配对观测值正相关时，配对样本t检验的统计学效率高于独立样本t检验。这也是为什么在实验设计中，当可以控制个体差异时，优先选择配对设计的原因。</p>


<!-- -->

</section>

 ]]></description>
  <category>RCT</category>
  <category>Statistics</category>
  <category>Hypothesis Testing</category>
  <category>t-test</category>
  <category>power analysis</category>
  <guid>https://leslie-lu.github.io/blog/2025/03/07/pairedttest/</guid>
  <pubDate>Fri, 07 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/statistical-power-chart.png" medium="image" type="image/png"/>
</item>
<item>
  <title>临床试验中基线数据p值真的有意义吗？</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/03/03/Table1inRCT/</link>
  <description><![CDATA[ 





<p>在临床试验的结果表格中，你是否经常见到<strong>患者人口学与基线特征</strong>的统计表，附带一堆 <code>p</code> 值？这些 <code>p</code> 值到底在验证什么？是证明随机化的成功，还是暴露试验设计的漏洞？</p>
<p>这里，我们试图用一篇文章来讨论下这个问题。</p>
<section id="随机化的完美幻觉基线表格里的-p-值" class="level3">
<h3 class="anchored" data-anchor-id="随机化的完美幻觉基线表格里的-p-值">随机化的完美幻觉：基线表格里的 p 值</h3>
<p>临床试验的核心是随机化分配（Randomization），它试图通过<strong>不可预测</strong>的分组消除混杂因素。然而，许多论文在结果部分展示基线数据时，会针对性别、年龄等变量计算治疗组间的 p 值。这看似严谨的操作，实则暗藏争议。</p>
<p>我们争议的焦点在于：</p>
<section id="无意义论" class="level4">
<h4 class="anchored" data-anchor-id="无意义论">1. 无意义论</h4>
<p>如果试验已声明进行了<strong>随机化</strong>，则所有基线差异（无处理效应）的 p 值本质上反映的是随机误差，而非真实效应。任何由极小 p 值提示的统计显著性都是第一类错误，毫无意义。例如，在 100 次基线比较中，即使完全随机，按 5% 显著性水平也会出现 5 次<strong>假阳性</strong>。</p>
</section>
<section id="验真派" class="level4">
<h4 class="anchored" data-anchor-id="验真派">2. 验真派</h4>
<p>认为 p 值可用于验证随机化是否真实执行。比如，若基线变量显示系统性差异（如年龄显著不均衡），可能暗示分配过程存在人为干扰。</p>
</section>
</section>
<section id="当组间均衡性遭遇挑战何时该调整协变量" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="当组间均衡性遭遇挑战何时该调整协变量">当组间均衡性遭遇挑战：何时该调整协变量？</h3>
<p>随机化的理想情况是治疗组间基线完全均衡，但现实往往骨感。当某个预后因素（如疾病严重程度）不均衡时，该如何处理？这里，我们一般的逻辑是：</p>
<section id="不调整也能成立" class="level4">
<h4 class="anchored" data-anchor-id="不调整也能成立">1. 不调整也能成立</h4>
<p>即使基线不均衡，对于真正的随机化试验，我们仍然可以相信在没有纳入任何协变量的情况下，处理效应主分析的直接结果。无论观察到的处理与协变量之间的关联性如何，主效应分析的结果仍然是有效的。从这个角度看，基线表格里的 p 值是毫无必要的。</p>
</section>
<section id="调整会更高效" class="level4">
<h4 class="anchored" data-anchor-id="调整会更高效">2. 调整会更高效</h4>
<p>而另一方面，若某变量与结局强相关且组间不均衡，纳入协变量分析（如 <code>ANCOVA</code> 模型）可减少误差、提升统计效能。</p>
</section>
<section id="实战指南如何科学设计基线表格" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="实战指南如何科学设计基线表格">实战指南：如何科学设计基线表格？</h4>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250303165121.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">NEJM</figcaption>
</figure>
</div>
<p>这里，我们给研究者的具体建议是：</p>
<ul>
<li><p>简化p值展示：随机化试验中，基线p值无必要，直接呈现变量分布即可。</p></li>
<li><p>关注临床意义：若关键变量（如年龄、疾病分期）组间差异超过10%，需讨论是否调整分析模型。</p></li>
</ul>
</section>
</section>
<section id="结语回归医学研究的本质" class="level3">
<h3 class="anchored" data-anchor-id="结语回归医学研究的本质">结语：回归医学研究的本质</h3>
<p>临床试验的终极目标是评估治疗效应，而非追求表格的 <code>完美对齐</code>。基线可比性应靠科学设计保障，而非事后修补。当一篇论文用大量 p 值自证清白时，我们或许更该追问：它的随机化是否真正无懈可击？分配过程是否足够盲态？毕竟，在医学进步的征途上，随机化需要的是技术硬核，而非统计学 p 值。</p>


<!-- -->

</section>

 ]]></description>
  <category>RCT</category>
  <category>Table 1</category>
  <category>Baseline</category>
  <category>p value</category>
  <guid>https://leslie-lu.github.io/blog/2025/03/03/Table1inRCT/</guid>
  <pubDate>Mon, 03 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250303165121.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Zotero + OneDrive + DeepSeek：构建个人文献阅读管理系统</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/02/17/zotero_onedrive_deepseek/</link>
  <description><![CDATA[ 





<p>最近 DeepSeek 大火，看到有人分享用它来阅读管理文献，非常好用。我自己一直用的是 EndNote，但是似乎不支持接入 Deepseek，所以我决定暂时转投 Zotero 阵营，实现文献管理和阅读的一体化。</p>
<section id="zotero-onedrive" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="zotero-onedrive">Zotero + OneDrive</h3>
<p>Zotero 是一个开源的文献管理工具，但是它有一个缺点，只有 300MB 的免费存储空间。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250217003538.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Storage</figcaption>
</figure>
</div>
<p>我之前的 EndNote 没有存储空间限制的焦虑，为了防止以后 Zotero 的存储空间不够用，我决定顺手把 Zotero 的文献库放到 OneDrive 云上，这样就可以在不同设备上同步，且不适用 Zotero 自带的存储空间。</p>
<p>对于 Zotero 放到云上的设置，可以参考：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250217004027.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Sync</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250217004125.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Files and Folders</figcaption>
</figure>
</div>
<p>只需要将 Zotero 的 Storage 文件夹软链接到 OneDrive 云上，然后在 Zotero 的设置中设置数据文件夹的路径即可。</p>
<p>这样，对于有 Microsoft 365 家庭版订阅的用户，就可以免费使用 1TB 的 OneDrive 存储空间来存储 Zotero 的文献库了。</p>
</section>
<section id="zotero-deepseek" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="zotero-deepseek">Zotero + DeepSeek</h3>
<p>DeepSeek 最近已经火到不需要我再多做介绍了。Deepseek 之前是给每位用户送了 10元 的 API：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250217004626.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">DeepSeek</figcaption>
</figure>
</div>
<p>但是是一个月的有效期，且目前 DeepSeek 的 API 已经无法购买了。我们转向使用硅基流动提供的 API，它也赠送了 14元：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250217005346.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">SiliconCloud</figcaption>
</figure>
</div>
<p>那接下来就是在 Zotero 中设置硅基流动中模型的 API 了，这里我们选择的是模型 deepseek-ai/DeepSeek-R1-Distill-Qwen-32B：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250217005652.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">DeepSeek-R1-Distill-Qwen-32B</figcaption>
</figure>
</div>
<p>浏览下它的 API 文档，我们在 Zotero 的 Awesome GPT 插件中设置好 API 即可，这个插件可以通过 GitHub 下载：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250217005852.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">API</figcaption>
</figure>
</div>
<p>通过了 test 之后（我这里图片上的 error 可以忽略），我们就可以使用 DeepSeek 来阅读文献了。</p>
<p>首先必须读一篇经典文献：Attention is All You Need。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/88c471b106c67bcb6bca973e2a5803a.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Transformer</figcaption>
</figure>
</div>
<p>感兴趣的同学可以参考我们的教程开始使用 DeepSeek 助力自己的科研了。</p>


<!-- -->

</section>

 ]]></description>
  <category>zotero</category>
  <category>onedrive</category>
  <category>deepseek</category>
  <category>tools</category>
  <guid>https://leslie-lu.github.io/blog/2025/02/17/zotero_onedrive_deepseek/</guid>
  <pubDate>Mon, 17 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/88c471b106c67bcb6bca973e2a5803a.png" medium="image" type="image/png"/>
</item>
<item>
  <title>SAS 生存分析模拟</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/02/13/simulating_survival_models/</link>
  <description><![CDATA[ 





<p>生存分析（Survival Analysis）是统计学中用于分析事件发生时间的研究方法。在生存分析中，常常使用比例风险模型（Proportional Hazards Models），例如 Cox 回归模型，来探索影响生存时间的因素。</p>
<p>这里，我们将深入解析如何使用 SAS 进行生存分析模拟，特别是如何生成符合特定假设的生存数据，并使用 Cox 回归模型进行分析。</p>
<section id="生存数据模拟" class="level3">
<h3 class="anchored" data-anchor-id="生存数据模拟">1. 生存数据模拟</h3>
<p>在生存分析中，数据的模拟是研究者进行仿真实验、理解模型行为以及验证方法的重要步骤。以下代码展示了如何使用 SAS 模拟符合指数分布（Exponential Distribution）和 Weibull 分布的生存数据。</p>
<section id="指数分布与-cox-回归模型" class="level4">
<h4 class="anchored" data-anchor-id="指数分布与-cox-回归模型">指数分布与 Cox 回归模型</h4>
<p>指数分布是生存数据中常见的一种分布模型，尤其适用于模拟没有明显时间变化的基线风险（constant baseline hazard），其形式为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clambda(t)%20=%20%5Clambda_0%0A"></p>
<p>其中，<img src="https://latex.codecogs.com/png.latex?%5Clambda_0"> 是基线风险，它在整个时间范围内保持不变。对于 Cox 回归模型来说，基线风险函数并未指定，而是通过比例风险的假设，估计与协变量相关的风险比（hazard ratio）。</p>
<pre class="{SAS}"><code>%macro RandExp(sigma);
    ((&amp;sigma) * rand("Exponential"))
%mend;</code></pre>
<p>在这段代码中，我们定义了一个宏 RandExp，它用于生成指数分布的随机数。<code>rand("Exponential")</code> 生成一个符合指数分布的随机数，而 &amp;sigma 为分布的尺度参数。这里我们通过宏将其封装，方便后续的调用。</p>
<p>接下来，我们创建一个包含100个观测值的数据集 PHData，该数据集模拟了一个包含固定效应（例如协变量 x1 和 x2）和随机事件时间（t）的数据集。</p>
<pre class="{SAS}"><code>do i = 1 to &amp;N;
        xx1{i} = rand("Normal"); xx2{i} = rand("Normal");
    end;
    baseHazardRate = 0.002; /* 事件发生的基线风险 */
    censorRate = 0.001; /* 被删失（censoring）的风险 */
    do i = 1 to &amp;N;
        x1 = xx1{i}; x2 = xx2{i};
        eta = -2*x1 + 1*x2; /* 线性预测变量 */
        tEvent = %RandExp( 1/(baseHazardRate * exp(eta)) ); /* 根据线性预测模拟事件时间 */
        c = %RandExp( 1/censorRate ); /* 被删失时间 */
        t = min(tEvent, c); /* 事件时间或删失时间 */
        censored = (c &lt; tEvent); /* 是否删失的指示变量 */
        output;
    end;</code></pre>
<p>在这部分代码中，我们首先通过 rand(“Normal”) 生成了两个标准正态分布的随机变量 x1 和 x2 作为协变量。然后，我们使用这些协变量和基线风险来计算事件的时间（tEvent）和删失时间（c）。每个观察值的事件时间 t 是事件时间和删失时间中的较小值，而 censored 变量则指示该观测是否为删失。</p>
</section>
</section>
<section id="使用cox回归模型进行分析" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="使用cox回归模型进行分析">2. 使用Cox回归模型进行分析</h3>
<p>生成生存数据后，我们可以使用 SAS中的 PHREG 拟合比例风险模型。在我们的例子中，我们将使用 Cox 回归模型来估计协变量 x1 和 x2 对生存时间的影响。</p>
<pre class="{SAS}"><code>ods graphics on;
proc phreg data=PHData plots(overlay CL)= (survival);
    model t*censored(1)= x1-x2;
    ods select CensoredSummary ParameterEstimates
        ReferenceSet SurvivalPlot;
run;</code></pre>
<p>这里运行结果将提供Cox回归模型的参数估计，包括协变量的风险比（Hazard Ratios），以及不同协变量条件下的生存函数图。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250213224227.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">参数估计</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250213224310.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">生存曲线</figcaption>
</figure>
</div>
<p>完整代码已经上传至<a href="https://mp.weixin.qq.com/s/4IR-KMAZ-q2VbI0Fz4fYRg">星球</a>，感兴趣的同学可以自行查看。</p>


<!-- -->

</section>

 ]]></description>
  <category>sas</category>
  <category>cox</category>
  <category>ph</category>
  <category>survival</category>
  <category>simulation</category>
  <guid>https://leslie-lu.github.io/blog/2025/02/13/simulating_survival_models/</guid>
  <pubDate>Thu, 13 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250213224310.png" medium="image" type="image/png"/>
</item>
<item>
  <title>一文读懂 Dosage 文件</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/02/11/dosage/</link>
  <description><![CDATA[ 





<p>在基因组关联分析（GWAS）中，基因型数据的准确性和高效处理是核心挑战，准确的基因型数据是发现遗传变异与性状关联的关键。传统方法使用硬判型（Hard Call）数据（如 0/1/2 编码），但随着测序技术的发展，Dosage 文件因其对基因型不确定性的量化能力，逐渐成为 GWAS 分析的新标准。而 <a href="https://mp.weixin.qq.com/s/pCfu0tJxvvRIHqtbK9eSug">SAIGE</a> 作为混合模型 GWAS 的明星工具，对 Dosage 文件的支持更是备受关注。</p>
<section id="dosage文件基因型数据的概率化革命" class="level3">
<h3 class="anchored" data-anchor-id="dosage文件基因型数据的概率化革命">Dosage文件：基因型数据的概率化革命</h3>
<section id="什么是-dosage-文件" class="level4">
<h4 class="anchored" data-anchor-id="什么是-dosage-文件">1.1 什么是 Dosage 文件？</h4>
<p>Dosage 文件记录的是每个样本在某个位点的<strong>剂量</strong>（Dosage），即基因型为杂合（如 0/1）或风险等位基因（如 1/1）的期望值（Expected Value）。其取值范围通常为 0.0~2.0，表示从<em>无风险等位基因</em>到<em>两个风险等位基因</em>的概率分布。</p>
<p>数学定义：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0ADosage%20=%20P(0/0)%20%5Ctimes%200%20+%20P(0/1)%20%5Ctimes%201%20+%20P(1/1)%20%5Ctimes%202%0A"></p>
<p>其中 <img src="https://latex.codecogs.com/png.latex?P"> 表示基因型的概率。基于这些概率，可以计算出 dosage 值，也就是参考等位基因的期望拷贝数。</p>
</section>
<section id="dosage-vs-hard-call为什么更科学" class="level4">
<h4 class="anchored" data-anchor-id="dosage-vs-hard-call为什么更科学">1.2 Dosage vs Hard Call：为什么更科学？</h4>
<table class="caption-top table">
<thead>
<tr class="header">
<th>对比维度</th>
<th>Hard Call</th>
<th>Dosage</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>数据本质</td>
<td>离散（0/1/2）</td>
<td>连续（0.0~2.0）</td>
</tr>
<tr class="even">
<td>低深度测序处理</td>
<td>易丢失信息（强制二分类）</td>
<td>保留不确定性（概率加权）</td>
</tr>
<tr class="odd">
<td>统计功效</td>
<td>可能低估关联信号</td>
<td>提高检测灵敏度</td>
</tr>
</tbody>
</table>
<p>举个例子，若某位点的测序深度低，Hard Call 可能强制判为 0/0，而 Dosage 可记录为 0.2（更接近真实生物学状态）。</p>
</section>
</section>
<section id="saige为何偏爱-dosage-文件" class="level3">
<h3 class="anchored" data-anchor-id="saige为何偏爱-dosage-文件">SAIGE为何偏爱 Dosage 文件？</h3>
<p>SAIGE采用基于混合线性模型（Mixed Linear Model, MLM）的算法，通过引入<a href="https://mp.weixin.qq.com/s/QF-0DEPZkD3MeHn3vkqWMg">遗传关系矩阵（GRM）</a>控制群体结构。而 Dosage 文件的优势在于，其连续型变量可直接作为协变量输入，避免离散化导致的信息损失，提高模型对微弱信号的捕捉能力。相比于简单的 hard call，dosage 数据充分利用了 imputation 的概率信息，使得关联分析更敏感、更准确。不过需要注意的是，dosage 文件在使用前必须经过严格的质量控制，确保 imputation 的准确性，以避免低质量数据对分析结果的干扰。</p>
</section>
<section id="dosage-文件的生成与使用" class="level3">
<h3 class="anchored" data-anchor-id="dosage-文件的生成与使用">Dosage 文件的生成与使用</h3>
<p>生成 Dosage 文件的常用工具有 PLINK、BEAGLE、IMPUTE2 等。以 PLINK 为例，通过以下命令将 VCF 文件转换为 Dosage 文件：</p>
<pre class="{bash}"><code># 从VCF转换为Dosage格式
plink --vcf input.vcf --dosage DS --write-snplist --out output</code></pre>
<p>生成的 output.dosage 文件格式如下：</p>
<pre class="{bash}"><code>CHR SNP POS A1 A2 DOSAGE_1 DOSAGE_2 ... DOSAGE_N
1 rs123 1000 A T 0.98 1.76 ... 0.02</code></pre>
</section>
<section id="take-home-message" class="level3">
<h3 class="anchored" data-anchor-id="take-home-message">Take-Home Message</h3>
<p>dosage 文件作为基因型 imputation 的产物，在 GWAS 分析中发挥着至关重要的作用。通过充分利用 dosage 数据中的概率信息，SAIGE 等工具能够更准确地捕捉到基因型与性状之间的微妙关联，为我们揭示遗传机制提供了有力支持。在数据质量和格式得到充分保障的前提下，正确使用 dosage 文件将大大提升 GWAS 分析的精度和效率。</p>


<!-- -->

</section>

 ]]></description>
  <category>genetics</category>
  <category>bioinformatics</category>
  <category>dosage</category>
  <category>saige</category>
  <guid>https://leslie-lu.github.io/blog/2025/02/11/dosage/</guid>
  <pubDate>Tue, 11 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250211205010.png" medium="image" type="image/png"/>
</item>
<item>
  <title>祝大家新年快乐！</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/01/28/red_packet/</link>
  <description><![CDATA[ 





<p>大家除夕快乐，感谢大家一直以来对我们公众号的关注和支持！</p>
<p>新的一年，希望我们继续一起加油进步，共同深度求索更多有价值的内容！</p>


<!-- -->


 ]]></description>
  <category>r</category>
  <category>tools</category>
  <category>red packet</category>
  <category>happy new year</category>
  <guid>https://leslie-lu.github.io/blog/2025/01/28/red_packet/</guid>
  <pubDate>Tue, 28 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/2025_happy_newyear.png" medium="image" type="image/png"/>
</item>
<item>
  <title>公众号智能回复功能终于上线</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/01/21/intelligent_reply/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250120204739.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">公众号智能回复</figcaption>
</figure>
</div>
<p>腾讯终于在公众号后台上线了智能回复功能。</p>
<p>公众号以往发表的文章成为 AI 学习的知识库，用于自动回复用户在后台提出的问题，这也是鹅厂的腾讯元器做的事情。不过，我自己试了一下，鹅厂大模型效果一般，有时候回答的问题不是很准确，还是需要人工干预。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/155cfc03b2e6f4eea482f500c46d3f9.jpg" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">test</figcaption>
</figure>
</div>
<p>欢迎大家后台体验。</p>


<!-- -->


 ]]></description>
  <category>r</category>
  <category>tools</category>
  <category>red packet</category>
  <guid>https://leslie-lu.github.io/blog/2025/01/21/intelligent_reply/</guid>
  <pubDate>Tue, 21 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250120204739.png" medium="image" type="image/png"/>
</item>
<item>
  <title>新年红包封面来了</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/01/20/red_packet/</link>
  <description><![CDATA[ 





<p><a href="https://mp.weixin.qq.com/s/uTjQbwg2AVU4ZwhiGHboOQ">一年一度的事情</a>，用 R 几行代码简单画个微信红包封面，一共发放 6000 个，感谢大家一直以来对我们公众号的关注和支持！</p>
<p><a href="https://mp.weixin.qq.com/s/tsVJsqrzOJXZhmv_PhraGA">请进入公众号文章领取</a>。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/2025_happy_newyear.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">2025_happy_newyear</figcaption>
</figure>
</div>
<p>用了 magick，ggplot2，showtext 几个包，代码直接已经放进了<a href="https://mp.weixin.qq.com/s/4IR-KMAZ-q2VbI0Fz4fYRg">星球</a>里，感兴趣的同学可以去看看。</p>


<!-- -->


 ]]></description>
  <category>r</category>
  <category>tools</category>
  <category>red packet</category>
  <guid>https://leslie-lu.github.io/blog/2025/01/20/red_packet/</guid>
  <pubDate>Mon, 20 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/2025_happy_newyear.png" medium="image" type="image/png"/>
</item>
<item>
  <title>R 中项目环境管理</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/01/19/renv_in_r/</link>
  <description><![CDATA[ 





<p>在 R 语言的项目开发和数据分析过程中，管理包的依赖关系一直是一个挑战。每个项目可能依赖不同版本的R包，而不同项目间的包依赖往往互相冲突。为了避免这些问题，renv 包应运而生，其相当于 python 中的 virtualenv，帮助 R 用户高效地管理和隔离项目的依赖环境。</p>
<p>这里，我们将介绍 renv 包的基本功能及使用方法，帮助大家更好地管理 R 项目的包依赖。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://rstudio.github.io/renv/articles/renv.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">renv</figcaption>
</figure>
</div>
<section id="什么是-renv-包" class="level3">
<h3 class="anchored" data-anchor-id="什么是-renv-包">什么是 renv 包</h3>
<p>renv（R Environment）是一个用于管理 R 项目环境的工具。它允许为每个 R 项目创建一个独立的虚拟环境，从而确保每个项目拥有独立且隔离的 R 包依赖。通过使用 renv，我们可以避免包版本冲突，并且可以轻松地复制和共享项目环境，确保项目在不同的机器或不同的时间点上能够重现。</p>
</section>
<section id="renv-的核心优势" class="level3">
<h3 class="anchored" data-anchor-id="renv-的核心优势">renv 的核心优势</h3>
<ul>
<li>隔离环境：每个项目有独立的库，包的版本不会相互干扰。即使我们在一个项目中更新了某个包的版本，其他项目依然可以使用旧版本。</li>
<li>项目可重现性：通过保存和共享项目的依赖信息（如包的版本），其他开发者可以使用相同的环境重新创建项目，确保研究的可重现性。</li>
<li>便捷的依赖管理：renv 会自动创建和维护 renv.lock 文件，记录项目依赖的包及其版本。这个文件是重现项目环境的关键，确保在不同机器或时间点运行时，依赖的版本完全一致。</li>
</ul>
</section>
<section id="如何在-r-中使用-renv-包" class="level3">
<h3 class="anchored" data-anchor-id="如何在-r-中使用-renv-包">如何在 R 中使用 renv 包</h3>
<section id="初始化项目" class="level4">
<h4 class="anchored" data-anchor-id="初始化项目">1. 初始化项目</h4>
<p>首先，我们需要安装并加载 renv 包。在一个新的 R 项目中，我们可以使用 <code>renv::init()</code> 来初始化 renv 环境。这将会创建一个新的 renv 文件夹并生成 renv.lock 文件。初始化后，项目中会有一个专门的库（renv/library）存放该项目所需的所有 R 包，同时生成 renv.lock 文件，这个文件记录了所有依赖包的具体版本。</p>
</section>
<section id="安装依赖包" class="level4">
<h4 class="anchored" data-anchor-id="安装依赖包">2. 安装依赖包</h4>
<p>当我们开始开发项目时，可以通过 <code>install.packages()</code> 安装所需的 R 包，renv 会将这些包安装到项目的独立环境中。</p>
<p>例如，安装 ggplot2` 包后，renv 会自动更新 renv.lock 文件，记录包的安装信息及其版本。</p>
</section>
<section id="恢复项目环境" class="level4">
<h4 class="anchored" data-anchor-id="恢复项目环境">3. 恢复项目环境</h4>
<p>如果我们或者其他人需要在另一个环境中重新运行该项目，renv 允许我们通过 <code>renv::restore()</code> 命令恢复项目的所有依赖包。这个命令会根据 renv.lock 文件自动安装所有所需的包及其指定版本，从而确保每次运行时的包版本一致，避免了环境问题。</p>
</section>
<section id="查看并更新项目依赖" class="level4">
<h4 class="anchored" data-anchor-id="查看并更新项目依赖">4. 查看并更新项目依赖</h4>
<p>如果我们需要查看项目当前依赖的所有包，可以使用 <code>renv::status()</code> 命令，它会列出所有包及其状态。而当我们需要更新项目中的某个包时，可以使用 <code>renv::update()</code> 命令，它会根据当前最新的包版本进行更新，并更新 renv.lock 文件。</p>
</section>
<section id="分享项目" class="level4">
<h4 class="anchored" data-anchor-id="分享项目">5. 分享项目</h4>
<p>当我们完成项目后，可以将 renv.lock 文件和源代码一起通过 github 分享给其他人，其他人只需要使用 <code>renv::restore()</code> 来恢复项目环境，无需担心包依赖的问题。</p>
</section>
</section>
<section id="renv-与-packrat-的对比" class="level3">
<h3 class="anchored" data-anchor-id="renv-与-packrat-的对比">renv 与 packrat 的对比</h3>
<p>在 renv 之前，R 中有一个较为类似的包叫做 packrat，它也提供环境管理的功能。然而，renv 相比于 packrat 有几个优势：</p>
<ul>
<li>更简洁：renv 比 packrat 更轻量，易于使用和理解。</li>
<li>更强的兼容性：renv 与 R 版本的兼容性更好，适应性更强，能够更好地处理依赖关系。</li>
<li>性能更高：renv 在项目初始化、恢复和更新时速度更快。</li>
</ul>
<p>因此，renv 在目前 R 项目环境管理中得到了更广泛的使用。</p>


<!-- -->

</section>

 ]]></description>
  <category>r</category>
  <category>tools</category>
  <category>version control</category>
  <guid>https://leslie-lu.github.io/blog/2025/01/19/renv_in_r/</guid>
  <pubDate>Sun, 19 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://rstudio.github.io/renv/articles/renv.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Tracy-Widom Statistics</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/01/07/tracy_widom_test/</link>
  <description><![CDATA[ 





<p>在现代基因组学和统计学中，Tracy-Widom 统计量（Tracy-Widom statistics）是一个广泛应用于分析主成分分析（PCA）结果的重要工具。尤其在遗传学、群体学和数据科学等领域，Tracy-Widom 统计量可以帮助研究者评估主成分的统计显著性，为后续的研究分析提供强有力的支持。</p>
<p>这里，我们将带大家深入了解 Tracy-Widom 统计量的概念、应用以及如何通过 twstats 程序进行计算。</p>
<section id="什么是-tracy-widom-统计量" class="level3">
<h3 class="anchored" data-anchor-id="什么是-tracy-widom-统计量">什么是 Tracy-Widom 统计量</h3>
<p>Tracy-Widom 统计量来源于随机矩阵理论，它用于描述随机矩阵的特征值分布，尤其是最大特征值的行为。在大规模数据分析中，Tracy-Widom 分布成为评估主成分显著性的标准工具。</p>
<p>具体来说，Tracy-Widom统计量用于检验 PCA 中主成分的显著性。我们前面讲过<a href="https://mp.weixin.qq.com/s/C_41H2pcDHlYMODcb3S9ew">使用 Eigensoft 中的 smartPCA 进行 PCA 分析</a>。PCA 通常会计算各主成分的方差，并根据这些方差来筛选重要的主成分。然而，如何判断哪些主成分是由于数据的真实结构而非随机噪声引起的呢？这正是Tracy-Widom统计量能够发挥作用的地方，Tracy-Widom 统计量可以帮助我们判断哪些主成分是统计显著的。</p>
<p>Tracy-Widom分布的核心思想是：如果我们从一个高维随机矩阵中提取主成分，那么最大主成分的值将服从特定的统计分布。通过计算 Tracy-Widom统计量，研究者可以对 PCA 中的每个主成分进行显著性检验，评估其是否真的反映了数据的结构，而非偶然性噪声。</p>
</section>
<section id="twstats-程序与-tracy-widom-统计量" class="level3">
<h3 class="anchored" data-anchor-id="twstats-程序与-tracy-widom-统计量">twstats 程序与 Tracy-Widom 统计量</h3>
<p>Eigensoft 中的 twstats 程序可以用来计算 Tracy-Widom 统计量。twstats 程序通过计算给定数据集的特征值分布，具体来说，twstats 程序会根据 Tracy-Widom 分布为每个主成分计算一个 p 值，从而帮助研究者判断哪些主成分是值得关注的。</p>
<p>twstats 适用于随机标记数据，但不适用于含有祖先信息标记（ancestry-informative markers）的数据。它假设数据集是由随机标记构成，这意味着在分析过程中不应该包含任何可能揭示祖先信息的标记（如遗传标记）。因为在包含祖先信息的标记数据中，可能会出现基因组混合 LD（连锁不平衡），这会违背Tracy-Widom统计量的基本假设。如果数据集含有祖先信息标记，Tracy-Widom 统计量的结果可能会不准确。</p>
<p>Eigensoft 中的 twstats 程序示例如下：</p>
<pre class="{perl}"><code>#!/usr/bin/perl

$command = "../bin/twstats";
$command .= " -t twtable ";
$command .= " -i twexample.eval ";
$command .= " -o twexample.out";
print("$command\n");
system("$command");</code></pre>


<!-- -->

</section>

 ]]></description>
  <category>bioinformatics</category>
  <category>biostatistics</category>
  <category>pca</category>
  <guid>https://leslie-lu.github.io/blog/2025/01/07/tracy_widom_test/</guid>
  <pubDate>Tue, 07 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412262344320.png" medium="image" type="image/png"/>
</item>
<item>
  <title>10 个常用终端命令</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/01/06/terminal_commands/</link>
  <description><![CDATA[ 





<p>终端是开发者与操作系统之间的重要桥梁，通过它，我们可以快速进行各种操作。无论是查找文件、修改权限，还是处理文本文件，熟练掌握一些基础的终端命令可以显著提高工作效率。</p>
<p>这里，我们来介绍 10 个每个开发者都应该知道的终端命令，它们能帮助我们在日常开发工作中更加高效地使用终端。</p>
<section id="grep---查找内容" class="level3">
<h3 class="anchored" data-anchor-id="grep---查找内容">1. grep - 查找内容</h3>
<p>grep 是一个强大的搜索命令，用于在文件中查找指定的文本内容。它常用于查找特定的关键词，支持正则表达式，功能非常强大。</p>
<p>常见用法：</p>
<pre class="{bash}"><code>grep "let's find something" file.[txt,json,js,md,etc]</code></pre>
<p>在 file.txt 文件中查找匹配 pattern 的行。</p>
<pre class="{bash}"><code># case-insensitive search
grep -i "pattern" file.txt
# count occurrences
grep -c "pattern" file.txt
# search for multiple patterns
grep -e "pattern1" -e "pattern2" file.txt
# recursive search in directories
grep -o -r "pattern" /path/to/directory | wc -l</code></pre>
</section>
<section id="man---查看命令帮助" class="level3">
<h3 class="anchored" data-anchor-id="man---查看命令帮助">2. man - 查看命令帮助</h3>
<p>man 是 <code>manual</code> 的缩写，用于查看命令的帮助文档。当我们对某个命令不熟悉时，可以通过 man 命令查看其用法、选项和参数等详细信息。</p>
<pre class="{bash}"><code>man grep</code></pre>
<p>查看 grep 命令的帮助文档。</p>
</section>
<section id="cat---查看文件内容" class="level3">
<h3 class="anchored" data-anchor-id="cat---查看文件内容">3. cat - 查看文件内容</h3>
<p>cat 是一个用于查看文件内容的命令，它可以一次性显示整个文件的内容。如果文件较大，可以结合其他命令来分页显示内容。</p>
<pre class="{bash}"><code>cat file.txt</code></pre>
<p>显示 file.txt 文件的所有内容。</p>
<pre class="{bash}"><code># combine multiple files
cat file1.txt file2.txt &gt; combined.txt
# create a new file
cat &gt; newfile.txt</code></pre>
</section>
<section id="head---查看文件开头" class="level3">
<h3 class="anchored" data-anchor-id="head---查看文件开头">4. head - 查看文件开头</h3>
<p>head 命令用于显示文件的前几行内容。默认情况下，它会显示文件的前10行，但可以通过参数指定显示行数。</p>
<pre class="{bash}"><code>head -n 20 file.txt</code></pre>
<p>显示文件 file.txt 的前20行。</p>
</section>
<section id="awk---文本处理工具" class="level3">
<h3 class="anchored" data-anchor-id="awk---文本处理工具">5. awk - 文本处理工具</h3>
<p>我们在这篇文章<a href="https://mp.weixin.qq.com/s/K8yxoqzLcOE45LImJqC98A">探索 AWK</a>已经有过介绍。</p>
</section>
<section id="sed---流编辑器" class="level3">
<h3 class="anchored" data-anchor-id="sed---流编辑器">6. sed - 流编辑器</h3>
<p>sed 是一个流编辑器，用于处理和修改文件内容。它通过匹配模式和替换操作，可以高效地修改文本文件。</p>
<pre class="{bash}"><code># replace a word or pattern in a file
sed -i '' 's/old/new/g' file.md</code></pre>
<p>-i 选项表示<code>就地编辑</code>（in-place editing），即直接修改文件内容。如果不使用 -i，sed 会将结果输出到标准输出，而不会修改原文件。-i 选项后面通常需要一个备份文件的扩展名。如果提供一个空字符串 ’’，表示不创建备份文件。如果不提供这个参数，sed 会默认创建一个备份文件。s 表示替换操作，g 表示全局替换（global），即替换每一行中所有匹配的 old，而不仅仅是第一个匹配项。</p>
<pre class="{bash}"><code># print specific lines
sed -n '10,20p' file.json</code></pre>
<p>-n 选项表示<code>静默模式</code>（silent mode），只有通过 p 命令显式打印的行才会输出。<code>10,20p</code> 表示打印第 10 到第 20 行。</p>
<pre class="{bash}"><code># regular expression
sed 's/[0-9]*/X/g' file.csv</code></pre>
<p>将文件中的数字替换为 X。</p>
<pre class="{bash}"><code># rename files in bulk
for file in *.txt; do 
  mv "$file" "$(echo "$file" | sed 's/.txt$/.md/')"
done</code></pre>
<p>echo “$file” 是为了将文件名传递给 sed 命令，然后将 .txt 后缀替换为 .md。</p>
</section>
<section id="tail---查看文件末尾" class="level3">
<h3 class="anchored" data-anchor-id="tail---查看文件末尾">7. tail - 查看文件末尾</h3>
<p>tail 命令用于查看文件的最后几行内容，特别适合查看日志文件的最新信息。与 head 命令相反，tail 显示的是文件的结尾部分。</p>
<pre class="{bash}"><code>tail -f logfile.log</code></pre>
<p>实时查看日志，-f 选项表示<code>跟踪</code>（follow），即实时显示文件的更新内容。</p>
</section>
<section id="chmod---修改文件权限" class="level3">
<h3 class="anchored" data-anchor-id="chmod---修改文件权限">8. chmod - 修改文件权限</h3>
<p>每个文件和目录都有权限属性，用于控制用户对文件的访问权限。权限属性包括读、写、执行权限，分别对应 r、w、x。用户组包括所有者、所属组和其他用户，分别对应 owner、group、others。chmod 命令用于修改文件或目录的访问权限，可以通过符号模式或数字模式来设置权限。</p>
<p>符号模式包括 u（所有者）、g（所属组）、o（其他用户）、a（所有用户），加号 + 表示添加权限，减号 - 表示删除权限，等号 = 表示设置权限。</p>
<pre class="{bash}"><code>chmod +x script.sh</code></pre>
<p>给 script.sh 脚本添加执行权限。</p>
<p>数字模式包括 0-7，分别对应 rwx 权限。r=4，w=2，x=1。例如，755 表示所有者可读写执行，所属组和其他用户可读执行；777 表示所有用户可读写执行。</p>
<pre class="{bash}"><code>chmod 755 file.txt</code></pre>
<p>递归修改目录权限：</p>
<pre class="{bash}"><code>chmod -R 755 /path/to/directory</code></pre>
</section>
<section id="xargs---将输出作为参数传递" class="level3">
<h3 class="anchored" data-anchor-id="xargs---将输出作为参数传递">9. xargs - 将输出作为参数传递</h3>
<p>xargs 命令常与其他命令结合使用，它可以将标准输入转换为命令行参数，并将其传递给后续的命令。</p>
<pre class="{bash}"><code>echo "file1 file2 file3" | xargs rm</code></pre>
<p>将 file1 file2 file3 传递给 rm 命令，删除这三个文件。</p>
<p>结合 find 使用：</p>
<pre class="{bash}"><code>find . -name "*.txt" | xargs rm</code></pre>
<p>压缩文件：</p>
<pre class="{bash}"><code>ls *.log | xargs tar -czvf logs.tar.gz</code></pre>
</section>
<section id="find---查找文件" class="level3">
<h3 class="anchored" data-anchor-id="find---查找文件">10. find - 查找文件</h3>
<p>find 是一个非常强大的文件查找命令，它可以根据不同的条件查找文件。可以按文件名、大小、修改时间等进行搜索。</p>
<p>常见用法：</p>
<pre class="{bash}"><code>find /path/to/search -name "astro"</code></pre>
<p>在指定路径下查找所有 astro 文件。</p>
<pre class="{bash}"><code># clean up log files
find /var/log -type f -name "*.log" -mtime +7 -delete</code></pre>
<p>-type f 表示只查找文件，-mtime +7 表示修改时间在 7 天前的文件，-delete 表示删除这些文件。</p>
<pre class="{bash}"><code># backup files
find /path/to/files -name "*.txt" -exec cp {} /path/to/backup \;</code></pre>
<p>-exec 选项用于执行其他命令，{} 表示查找到的文件，; 表示命令结束。</p>
</section>
<section id="takeaway" class="level3">
<h3 class="anchored" data-anchor-id="takeaway">takeaway</h3>
<p>掌握这些常用的终端命令能帮助我们在开发和运维工作中事半功倍。每个命令都有其特定的功能，熟练运用它们，我们将能够更高效地处理文件、查找信息、修改权限，甚至进行复杂的文本处理。</p>


<!-- -->

</section>

 ]]></description>
  <category>bioinformatics</category>
  <category>tools</category>
  <category>programming</category>
  <category>linux</category>
  <category>terminal</category>
  <guid>https://leslie-lu.github.io/blog/2025/01/06/terminal_commands/</guid>
  <pubDate>Mon, 06 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://www.freecodecamp.org/news/content/images/2022/03/pexels-pixabay-207580.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>探索 AWK</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/01/02/awk/</link>
  <description><![CDATA[ 





<p>在大数据分析和生物信息学领域，处理文本数据是一项常见的任务。awk 是一种功能强大的文本处理工具，它允许用户对文本文件进行灵活的模式匹配、过滤、计算和格式化。</p>
<p>这里，我们将介绍 awk 的基本概念、常用命令及其在实际数据处理中的应用。</p>
<section id="什么是-awk" class="level3">
<h3 class="anchored" data-anchor-id="什么是-awk">什么是 AWK</h3>
<p>awk 是一种编程语言，用于处理和分析文本文件，尤其是在数据处理和报告生成方面非常有用。其名称来源于其三位创造者的姓氏首字母：Alfred Aho、Peter Weinberger 和 Brian Kernighan。</p>
<p>awk 处理文本文件时，会将文件的每一行视为一个记录，每一行中的字段（由空格或制表符分隔）作为字段。通过指定模式和动作，awk 可以对文件内容进行筛选、处理并输出结果。</p>
</section>
<section id="awk-的基本语法" class="level3">
<h3 class="anchored" data-anchor-id="awk-的基本语法">AWK 的基本语法</h3>
<p>awk 命令的基本语法如下：</p>
<pre class="{bash}"><code>awk [OPTION] 'CONDITION {PROCESS}' FILENAME</code></pre>
<p>在 AWK 中，有一些内建的变量非常实用： - $0 : 表示当前行的所有字段。 - $n : 表示第n列字段。比如 $1 表示第一列，$4 表示第四列。 - NR : 当前处理的行号（记录号）。 - NF : 当前行的字段数。</p>
<p>例如，以下命令会打印出文件中所有的行：</p>
<pre class="{bash}"><code>awk '{ print }' filename</code></pre>
<p>如果我们只想打印文件中第二列的数据，可以这样写：</p>
<pre class="{bash}"><code>awk '{ print $2 }' filename</code></pre>
<p>其中，$2 代表第二列，$1 代表第一列，依此类推。</p>
</section>
<section id="常用-awk-命令" class="level3">
<h3 class="anchored" data-anchor-id="常用-awk-命令">常用 AWK 命令</h3>
<section id="打印特定字段" class="level4">
<h4 class="anchored" data-anchor-id="打印特定字段">1. 打印特定字段</h4>
<p>打印某一列的内容是 awk 最常见的用途之一。选择染色体 2 上的变异（保留表头）：</p>
<pre class="{bash}"><code>awk 'NR==1 || $1==2 {print $0}' sumstats.txt | head</code></pre>
<p><code>NR==1</code> 如果是第一行（通常是表头），打印。<code>$1==2</code> 如果第一列是染色体号为 2 的变异，打印这一行。这段代码保留了表头，并筛选出染色体 2 上的所有变异。</p>
</section>
<section id="使用条件语句筛选数据" class="level4">
<h4 class="anchored" data-anchor-id="使用条件语句筛选数据">2. 使用条件语句筛选数据</h4>
<p>我们可以使用 if 语句来根据特定条件筛选数据。例如，选择全基因组显著的变异（p 值 &lt; 5e-8）：</p>
<pre class="{bash}"><code>awk 'NR==1 || $13&lt;5e-8 {print $0}' sumstats.txt | head</code></pre>
<p><code>$13&lt;5e-8</code> 选择第 13 列（P 值列）小于 5e-8 的行。这个命令用于筛选全基因组显著的变异数据。</p>
</section>
<section id="计算和统计" class="level4">
<h4 class="anchored" data-anchor-id="计算和统计">3. 计算和统计</h4>
<p>awk 还可以用于计算数据，比如求和、平均值等。假设我们有一个文件，每行代表一个学生的成绩，我们想计算总成绩：</p>
<pre class="{bash}"><code>awk '{ sum += $2 } END { print sum }' grades.txt</code></pre>
<p>在这个例子中，$2 是成绩列，sum += $2 会累加第二列的所有成绩，END 是在所有数据处理完后执行的操作。</p>
</section>
<section id="格式化输出" class="level4">
<h4 class="anchored" data-anchor-id="格式化输出">4. 格式化输出</h4>
<p>awk 还支持格式化输出，类似于 <code>C 语言</code>中的 <code>printf</code>。例如，想要将数据格式化为固定宽度，可以这样做：</p>
<pre class="{bash}"><code>awk '{ printf "%-10s %-5s %-8s\n", $1, $2, $3 }' data.txt</code></pre>
<p>这会将每一行的三列数据按指定格式输出，其中 %s 表示字符串，-10 表示左对齐并占用 10 个字符宽度。</p>
</section>
<section id="多文件处理" class="level4">
<h4 class="anchored" data-anchor-id="多文件处理">5. 多文件处理</h4>
<p>awk 也可以同时处理多个文件，甚至将不同文件的内容组合起来。例如：</p>
<pre class="{bash}"><code>awk '{ print FILENAME ": " $0 }' file1.txt file2.txt</code></pre>
<p>这里，FILENAME 是 awk 内置的变量，表示当前处理的文件名。<code>$0</code> 表示当前行的内容（即整行数据）。<code>print FILENAME ": " $0</code> 这部分的作用是打印文件名后跟一个冒号和当前行的内容。</p>
</section>
</section>
<section id="awk-在生物信息学中的应用" class="level3">
<h3 class="anchored" data-anchor-id="awk-在生物信息学中的应用">AWK 在生物信息学中的应用</h3>
<p>在生物信息学数据分析中，awk 被广泛应用于处理基因组学数据、GWAS 数据、RNA-Seq 数据等。这些数据通常包含数百万行，我们可以使用 awk 来快速筛选、过滤、提取特定信息。例如，以下是一些常见的应用场景：</p>
<section id="从-vcf-文件中提取信息" class="level4">
<h4 class="anchored" data-anchor-id="从-vcf-文件中提取信息">1. 从 VCF 文件中提取信息</h4>
<p>VCF（Variant Call Format）文件是基因组变异的标准存储格式，通常包含变异位点的各种信息。如果我们想提取 VCF 文件中所有发生变异的基因，可以使用以下命令：</p>
<pre class="{bash}"><code>awk '$1 !~ /^#/ { print $1, $2, $4, $5 }' variants.vcf</code></pre>
<p>这条命令会跳过以 <code>#</code> 开头的注释行，输出变异位点的染色体位置、参考碱基和变异碱基。</p>
</section>
<section id="清洗-rna-seq-数据" class="level4">
<h4 class="anchored" data-anchor-id="清洗-rna-seq-数据">2. 清洗 RNA-Seq 数据</h4>
<p>RNA-Seq 数据的处理通常需要将表达量数据中的低表达基因或特定条件下的数据进行筛选。比如，删除表达量小于某一阈值的基因：</p>
<pre class="{bash}"><code>awk '$2 &gt; 10 { print $1, $2 }' gene_expression.txt</code></pre>
<p>这里，$2 &gt; 10 表示筛选出表达量大于 10 的基因。</p>


<!-- -->

</section>
</section>

 ]]></description>
  <category>bioinformatics</category>
  <category>tools</category>
  <category>programming</category>
  <category>awk</category>
  <category>linux</category>
  <guid>https://leslie-lu.github.io/blog/2025/01/02/awk/</guid>
  <pubDate>Thu, 02 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202501021926596.png" medium="image" type="image/png"/>
</item>
<item>
  <title>使用 Hail 输出 PLINK 文件：一步到位</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/01/01/export_plink/</link>
  <description><![CDATA[ 





<p>在现代基因组学研究中，数据的处理和转换是至关重要的一环。PLINK 文件（包括 .bed, .bim, .fam 三个文件）是遗传学研究中的标准文件格式之一，经常用于 GWAS（全基因组关联研究）等分析。对于研究人员来说，将原始数据转换为 PLINK 文件格式是分析过程中的关键步骤。而 Hail，作为一个处理大规模基因数据的高效工具，提供了方便的方法来导出这些文件。</p>
<p>前面，我们介绍了如何<a href="https://mp.weixin.qq.com/s/rujbT3WC821spr1AKg5AzQ">掌握 Hail</a>，这里，我们将介绍如何使用 Hail 的 export_plink 功能，轻松导出 PLINK 文件，并深入探讨如何在数据预处理和分析过程中使用它。</p>
<section id="使用-hail-导出-plink-文件" class="level3">
<h3 class="anchored" data-anchor-id="使用-hail-导出-plink-文件">使用 Hail 导出 PLINK 文件</h3>
<p>Hail 提供了一个非常便利的函数 <code>export_plink()</code>，能够将 Hail MatrixTable 格式的数据导出为 PLINK 所需的三种文件格式：<code>.bed</code>、<code>.bim</code> 和 <code>.fam</code>。这些文件是 PLINK 软件包用于处理和分析基因型数据的标准文件格式。</p>
<section id="载入数据" class="level4">
<h4 class="anchored" data-anchor-id="载入数据">1. 载入数据</h4>
<p>首先，我们需要加载基因型数据，通常这些数据存储在 VCF 格式的文件中。使用 Hail 的 <code>import_vcf()</code> 函数，可以轻松导入 VCF 文件。</p>
<div id="01403536" class="cell" data-execution_count="1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hail <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hl</span>
<span id="cb1-2"></span>
<span id="cb1-3">mt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hl.import_vcf(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file://path_to_vcf_data.vcf'</span>, force_bgz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, reference_genome<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GRCh38'</span>)</span></code></pre></div></div>
</div>
</section>
<section id="数据注释" class="level4">
<h4 class="anchored" data-anchor-id="数据注释">2. 数据注释</h4>
<p>为了确保导出的 PLINK 文件包含完整的信息，我们通常需要对数据进行注释。例如，标注样本的性别、家族信息等。这可以通过 <code>annotate_cols()</code> 函数完成。</p>
<div id="c6536c7b" class="cell" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">mt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mt.annotate_cols(</span>
<span id="cb2-2">    pat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>,         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 父代 ID</span></span>
<span id="cb2-3">    mat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>,         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 母代 ID</span></span>
<span id="cb2-4">    is_female<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 是否为女性</span></span>
<span id="cb2-5">    pheno<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 表型（-9 表示缺失值）</span></span>
<span id="cb2-6">)</span></code></pre></div></div>
</div>
<p>在这个例子中，我们为每个样本添加了父母 ID、性别和表型信息。</p>
</section>
<section id="导出为-plink-文件" class="level4">
<h4 class="anchored" data-anchor-id="导出为-plink-文件">3. 导出为 PLINK 文件</h4>
<p>现在，数据已经准备好，可以使用 <code>export_plink()</code> 函数将其导出为 PLINK 所需的 <code>.bed</code>, <code>.bim</code>, <code>.fam</code> 文件。</p>
<div id="8d2db570" class="cell" data-execution_count="3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">hl.export_plink(</span>
<span id="cb3-2">    mt, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output/example'</span>, </span>
<span id="cb3-3">    fam_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.s,       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 样本的 ID</span></span>
<span id="cb3-4">    ind_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.s,       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 样本的 ID</span></span>
<span id="cb3-5">    pat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.pat_id,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 父代 ID</span></span>
<span id="cb3-6">    mat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.mat_id,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 母代 ID</span></span>
<span id="cb3-7">    is_female<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.is_female, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 性别信息</span></span>
<span id="cb3-8">    pheno<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.pheno     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 表型信息</span></span>
<span id="cb3-9">)</span></code></pre></div></div>
</div>
<p>参数解析： - fam_id: 样本的家族 ID，通常使用样本的 ID（即 mt.s）。 - ind_id: 样本的个体 ID，这里使用 mt.s 作为样本 ID。 - pat_id 和 mat_id: 分别代表父母的 ID，通常可以使用默认值 0 表示没有父母信息，或者根据数据 - is_female: 样本的性别信息，Hail 会根据性别表达为 1（男性）或 2（女性）。这里通过注释 is_female 字段来指示性别。 - pheno: 表型数据，可以是布尔值（如是否患病）或者是数值型数据（如身高、体重等）。</p>
<p>导出的文件会包含以下三部分：</p>
<ul>
<li><code>output/example.bed</code>: 存储基因型数据（二进制格式）。</li>
<li><code>output/example.bim</code>: 包含变异信息，如染色体、位置、参考和变异等。</li>
<li><code>output/example.fam</code>: 包含样本信息，如家族 ID、个体 ID、父母 ID、性别和表型。</li>
</ul>
</section>
</section>
<section id="进阶功能批量导出与错误处理" class="level3">
<h3 class="anchored" data-anchor-id="进阶功能批量导出与错误处理">进阶功能：批量导出与错误处理</h3>
<p>当处理大量基因数据时，可能会涉及多个数据批次。在这种情况下，使用批处理来导出 PLINK 文件变得尤为重要。例如，我们可以使用 Python 脚本批量处理多个数据集，并通过适当的异常处理机制确保过程顺利进行。</p>
<div id="d35fb736" class="cell" data-execution_count="4">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> subprocess</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 批量导出并上传</span></span>
<span id="cb4-4">batch_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch1.vcf'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch2.vcf'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch3.vcf'</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 示例批次</span></span>
<span id="cb4-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> batch_file <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> batch_files:</span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 导入 VCF 文件并处理</span></span>
<span id="cb4-7">    mt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hl.import_vcf(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'file://</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, force_bgz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, reference_genome<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GRCh38'</span>)</span>
<span id="cb4-8">    mt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mt.annotate_cols(</span>
<span id="cb4-9">        pat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>,</span>
<span id="cb4-10">        mat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>,</span>
<span id="cb4-11">        is_female<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb4-12">        pheno<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb4-13">    )</span>
<span id="cb4-14">    </span>
<span id="cb4-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 导出 PLINK 文件</span></span>
<span id="cb4-16">    hl.export_plink(mt, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'output/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, fam_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.s, ind_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.s, pat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.pat_id, mat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.mat_id, is_female<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.is_female, pheno<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.pheno)</span>
<span id="cb4-17"></span>
<span id="cb4-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 上传到远程存储</span></span>
<span id="cb4-19">    subprocess.run([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dx'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upload'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'output/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.bed'</span>])</span>
<span id="cb4-20">    subprocess.run([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dx'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upload'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'output/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.bim'</span>])</span>
<span id="cb4-21">    subprocess.run([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dx'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upload'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'output/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.fam'</span>])</span></code></pre></div></div>
</div>


<!-- -->

</section>

 ]]></description>
  <category>hail</category>
  <category>bioinformatics</category>
  <category>dnanexus</category>
  <category>genomics</category>
  <category>plink</category>
  <category>vcf</category>
  <guid>https://leslie-lu.github.io/blog/2025/01/01/export_plink/</guid>
  <pubDate>Wed, 01 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412282307896.png" medium="image" type="image/png"/>
</item>
<item>
  <title>掌握 Hail</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2024/12/28/hail/</link>
  <description><![CDATA[ 





<p>在生物信息学领域，处理大规模基因组数据尤其是 VCF（Variant Call Format）格式的数据常常是一个挑战。传统的处理方法可能面临性能瓶颈，而 Hail 作为一个专为大规模基因组数据分析设计的工具，其高效性和可扩展性使其在基因组学界得到了广泛应用。</p>
<p>这里，我们将介绍 Hail 的基本使用技巧，并探讨如何在 DNAnexus 平台上导入和处理 pVCF 数据。</p>
<section id="什么是hail" class="level3">
<h3 class="anchored" data-anchor-id="什么是hail">什么是Hail？</h3>
<p>Hail 是一个开源的、专为基因组数据分析而设计的 Python 库，特别适合用于处理大规模的 VCF 文件。它在处理和分析基因组数据时，提供了比传统工具（如 GATK）更高效的性能，尤其在进行大规模 GWAS（基因组全关联研究）、变异注释和基因型分析时，它能够显著提高计算效率。</p>
<p>Hail 的核心优势在于其对分布式计算的支持，能够利用 Spark 集群进行大数据的并行处理。此外，Hail 也与很多常见的生物信息学工具兼容，比如 VCF 工具、Plink 等，使得它能够轻松集成到现有的生物信息学分析管道中。</p>
</section>
<section id="hail-在-dnanexus-平台上的应用" class="level3">
<h3 class="anchored" data-anchor-id="hail-在-dnanexus-平台上的应用">Hail 在 DNAnexus 平台上的应用</h3>
<p>在 DNAnexus 平台上，我们可以直接使用 Hail 进行大规模基因组数据分析。平台提供了一个强大的计算环境，可以通过 Hail 轻松地读取、处理和分析 VCF 文件。以下是一些常见的应用场景和技巧：</p>
<section id="使用hail加载和处理vcf文件" class="level4">
<h4 class="anchored" data-anchor-id="使用hail加载和处理vcf文件">1. 使用Hail加载和处理VCF文件</h4>
<p>在 DNAnexus 平台上，VCF 文件通常存储在项目中，用户可以直接加载到 Hail 中进行处理。Hail 提供了简便的 API 来读取 VCF 文件，下面是一个简单的示例，展示如何在 Hail 中加载 VCF 文件：</p>
<div id="50637cb8" class="cell" data-execution_count="1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hail <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hl</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 加载VCF文件</span></span>
<span id="cb1-4">vcf_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gs://my_bucket/my_data.vcf.bgz'</span></span>
<span id="cb1-5">mt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hl.import_vcf(vcf_file)</span></code></pre></div></div>
</div>
<p>在这个示例中，我们使用 <code>hl.import_vcf()</code> 方法来加载 VCF 文件，<code>gs://</code> 是 Google Cloud Storage（GCS）路径格式，在 DNAnexus 平台上，我们也可以使用相应的路径来引用存储在平台上的 VCF 文件。</p>
</section>
<section id="使用-hail-进行数据质量控制" class="level4">
<h4 class="anchored" data-anchor-id="使用-hail-进行数据质量控制">2. 使用 Hail 进行数据质量控制</h4>
<p>在基因组数据分析中，数据质量控制（QC）是不可或缺的一部分，Hail 为此提供了多种功能，例如去除低质量的样本或变异、过滤变异的深度或基因型质量等。</p>
<p>以下是一个常见的 QC 操作示例，过滤掉低质量的变异：</p>
<div id="fd8f04b3" class="cell" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 过滤低质量变异</span></span>
<span id="cb2-2">mt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mt.filter_rows(mt.qual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span></code></pre></div></div>
</div>
<p>通过这样的操作，我们可以去除低质量的变异，保证后续分析结果的准确性。</p>
</section>
<section id="基于-hail-进行群体遗传学分析" class="level4">
<h4 class="anchored" data-anchor-id="基于-hail-进行群体遗传学分析">3. 基于 Hail 进行群体遗传学分析</h4>
<p>Hail 还广泛应用于群体遗传学分析，例如计算群体间的变异频率、构建群体的基因型矩阵、进行 GWAS 分析等。Hail 的高效数据处理能力使其能够轻松处理海量数据，并进行并行计算，极大地提升了数据分析的效率。</p>
</section>
</section>
<section id="pvcf-数据导入教程" class="level3">
<h3 class="anchored" data-anchor-id="pvcf-数据导入教程">pVCF 数据导入教程</h3>
<p>在基因组学中，VCF 文件是常见的变异数据格式，而 pVCF（partitioned VCF）格式则在处理极大规模数据时显得尤为重要。pVCF 将数据分割成多个小文件，避免了单个文件过大导致的内存问题，并使得数据处理更加灵活高效。</p>
<p>在 DNAnexus 平台上，我们可以利用 Hail 来导入 pVCF 数据，具体步骤如下：</p>
<section id="启动-hail-应用" class="level4">
<h4 class="anchored" data-anchor-id="启动-hail-应用">1. 启动 Hail 应用</h4>
<p>在 DNAnexus 平台上，首先需要启动一个 Hail 集群环境。我们可以使用 dx 命令行工具或通过平台的应用界面启动 Hail 应用。</p>
</section>
<section id="加载-pvcf-文件" class="level4">
<h4 class="anchored" data-anchor-id="加载-pvcf-文件">2. 加载 pVCF 文件</h4>
<p>使用 Hail 的 <code>import_vcf</code> 方法加载 pVCF 文件。需要注意的是，pVCF 文件通常由多个分区组成，因此在导入时需要确保指定正确的路径。</p>
<div id="2ba090a0" class="cell" data-execution_count="3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hail <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hl</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 导入pVCF文件</span></span>
<span id="cb3-4">mt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hl.import_vcf(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gs://my_bucket/my_pvcf_file.part*'</span>)</span></code></pre></div></div>
</div>
</section>
<section id="数据分析与处理" class="level4">
<h4 class="anchored" data-anchor-id="数据分析与处理">3. 数据分析与处理</h4>
<p>加载 pVCF 数据后，我们可以利用 Hail 提供的各种功能对数据进行分析。常见的分析操作包括数据过滤、变异注释和群体遗传学分析等。</p>
<blockquote class="blockquote">
<p>小技巧：在 DNAnexus 平台上，我们可以利用分布式计算资源加速分析过程。Hail 与 Apache Spark 紧密集成，可以在集群上并行处理数据，从而大大缩短分析时间。</p>
</blockquote>


<!-- -->

</section>
</section>

 ]]></description>
  <category>hail</category>
  <category>bioinformatics</category>
  <category>dnanexus</category>
  <category>genomics</category>
  <guid>https://leslie-lu.github.io/blog/2024/12/28/hail/</guid>
  <pubDate>Sat, 28 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412282307896.png" medium="image" type="image/png"/>
</item>
<item>
  <title>使用 Eigensoft 中的 smartPCA 进行 PCA 分析</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2024/12/26/smartpca/</link>
  <description><![CDATA[ 





<p><a href="https://mp.weixin.qq.com/s/XChFmrV_vP3BNRUdaQnnDw">昨天</a>我们介绍了如何使用 plink 进行 pca 分析，这里，我们将介绍如何使用 Eigensoft 包中的工具 smartPCA 进行 PCA 分析。</p>
<section id="smartpca" class="level3">
<h3 class="anchored" data-anchor-id="smartpca">smartPCA</h3>
<p>smartPCA 是 <a href="https://hsph.harvard.edu/research/price-lab/software/">Eigensoft 包</a>中的一个工具，专门用于基因型数据的 PCA 分析。它可以处理大规模的遗传数据集，输出主成分和相应的特征值，帮助我们识别数据中最重要的变异模式。</p>
<section id="准备数据" class="level4">
<h4 class="anchored" data-anchor-id="准备数据">1. 准备数据</h4>
<p>首先，需要准备三个输入文件，这些文件包含了基因型数据的核心信息： - SNP 文件（.snp）：包含 SNP 位置信息，如 SNP 名称、染色体、遗传位置、参考等位基因和替代等位基因。 - 个体文件（.ind）：包含个体信息，如个体名称、性别、种群信息等。 - 基因型文件（.geno）：包含实际的基因型数据，每个个体对应一个SNP位点的基因型数据。</p>
<p>这些文件通常采用 EIGENSTRAT 格式，智能地将数据组织成易于处理和分析的形式。</p>
</section>
<section id="编写参数文件" class="level4">
<h4 class="anchored" data-anchor-id="编写参数文件">2. 编写参数文件</h4>
<p>为了运行 smartPCA，需要准备一个参数文件（.par），该文件指定了输入文件和输出文件的路径、PCA 分析的相关设置。一个典型的参数文件示例如下：</p>
<pre class="{bash}"><code>genotypename: &lt;GENOTYPE_DATA&gt;.geno
snpname: &lt;GENOTYPE_DATA&gt;.snp
indivname: &lt;GENOTYPE_DATA&gt;.ind
evecoutname: &lt;OUT_FILE&gt;.evec
evaloutname: &lt;OUT_FILE&gt;.eval
poplistname: &lt;POPULATION_LIST_FILE&gt;.txt
lsqproject: YES
numoutevec: 4
numthreads: 1</code></pre>
<ul>
<li>genotypename: 基因型数据文件路径。</li>
<li>snpname: SNP位点数据文件路径。</li>
<li>indivname: 个体数据文件路径。</li>
<li>evecoutname: 输出的主成分文件路径（.evec）。</li>
<li>evaloutname: 输出的特征值文件路径（.eval）。</li>
<li>poplistname: 种群列表文件路径，指定用于计算主成分的种群。</li>
<li>lsqproject: 是否对缺失数据进行投影。</li>
<li>numoutevec: 计算的主成分数量。</li>
<li>numthreads: 使用的线程数量。</li>
</ul>
</section>
<section id="运行-pca-分析" class="level4">
<h4 class="anchored" data-anchor-id="运行-pca-分析">3. 运行 PCA 分析</h4>
<p>创建好参数文件后，可以通过命令行运行 smartPCA 进行分析。假设参数文件名为 params.par，可以使用以下命令启动 PCA 分析：</p>
<pre class="{bash}"><code>smartpca -p params.par</code></pre>
<p>运行时间通常在 15 到 30 分钟之间，具体时间取决于数据集的大小。</p>
</section>
<section id="查看输出结果" class="level4">
<h4 class="anchored" data-anchor-id="查看输出结果">4. 查看输出结果</h4>
<p>smartPCA 会生成两个主要的输出文件： - <code>.evec</code> 文件：包含每个个体在各个主成分上的坐标。可以使用这些坐标绘制主成分图（例如，二维或三维散点图），以可视化个体或种群之间的关系。 - <code>.eval</code> 文件：包含每个主成分的特征值。这些特征值反映了每个主成分对数据方差的贡献。</p>
<p>例如，特征值较大的主成分通常解释了数据中更大的变异，因此我们可以根据特征值的大小来判断是否保留某个主成分。</p>
</section>
<section id="可视化-pca-结果" class="level4">
<h4 class="anchored" data-anchor-id="可视化-pca-结果">5. 可视化 PCA 结果</h4>
<p>PCA 的最终目的是将数据降到二维或三维空间，便于我们观察数据的分布和结构。常见的做法是将第一主成分和第二主成分的坐标作为横纵坐标，绘制二维散点图。</p>
<p>例如，使用 R 或 Python 中的可视化工具，可以将 .evec 文件中的数据提取出来，并绘制主成分图，来分析不同群体、种群或个体在遗传空间中的分布。</p>
</section>
<section id="投影其他个体" class="level4">
<h4 class="anchored" data-anchor-id="投影其他个体">6. 投影其他个体</h4>
<p>如果我们使用的是包含现代和古代个体的混合数据集，可以使用 smartPCA 的<strong>投影</strong>功能。这个功能允许我们将不在种群列表中的个体投影到已计算的主成分上。这样，可以将古代 DNA 样本投影到现代群体的 PCA 结果中，进一步分析古代遗传变异在现代遗传空间中的位置。</p>
</section>
</section>
<section id="总结" class="level3">
<h3 class="anchored" data-anchor-id="总结">总结</h3>
<p>通过使用 Eigensoft 中的 smartPCA 工具，我们可以方便地对大规模的基因型数据进行 PCA 分析，识别数据中的遗传结构，了解群体之间的遗传关系。通过合理选择主成分，结合特征值和可视化技术，PCA 能够帮助我们从高维遗传数据中提取出有价值的信息，进行种群间比较、演化历史分析等。</p>


<!-- -->

</section>

 ]]></description>
  <category>plink</category>
  <category>gwas</category>
  <category>bioinformatics</category>
  <category>pca</category>
  <category>eigensoft</category>
  <category>smartpca</category>
  <guid>https://leslie-lu.github.io/blog/2024/12/26/smartpca/</guid>
  <pubDate>Thu, 26 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412262344320.png" medium="image" type="image/png"/>
</item>
<item>
  <title>GWAS 前 PCA 步骤详解</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2024/12/25/pca/</link>
  <description><![CDATA[ 





<p>基因组广泛关联研究（GWAS）旨在探索遗传变异与表型特征之间的关系，但由于群体结构（即不同人群间的遗传差异）和样本亲缘关系的影响，可能会导致假阳性或假阴性结果。为了控制这些偏差，<strong>主成分分析（PCA）</strong>成为了 GWAS 前的重要步骤。</p>
<p>这里，我们将详细介绍 GWAS 前 PCA 的原因以及如何通过一系列步骤有效进行 PCA 分析。</p>
<section id="为什么要进行-pca" class="level3">
<h3 class="anchored" data-anchor-id="为什么要进行-pca">为什么要进行 PCA？</h3>
<section id="去除群体结构的影响" class="level4">
<h4 class="anchored" data-anchor-id="去除群体结构的影响">1. 去除群体结构的影响</h4>
<p>在多种族或多地区样本的 GWAS 中，样本的群体结构可能会影响分析结果。例如，不同的群体可能拥有不同的基因频率，这种结构性差异如果不加以控制，可能会误导结果，导致某些表型与基因变异之间的假相关。</p>
</section>
<section id="去除亲缘关系的干扰" class="level4">
<h4 class="anchored" data-anchor-id="去除亲缘关系的干扰">2. 去除亲缘关系的干扰</h4>
<p>如果样本中存在亲缘关系（如父母-子女、兄弟姐妹等），这些亲缘关系会增加样本间的相关性，从而影响 GWAS 的准确性。PCA 能够帮助识别并去除这些干扰，确保样本的独立性。</p>
</section>
<section id="降低计算复杂度" class="level4">
<h4 class="anchored" data-anchor-id="降低计算复杂度">3. 降低计算复杂度</h4>
<p>PCA 能够通过减少数据的维度来降低后续分析的计算复杂度，并帮助更清晰地理解数据的结构。</p>
</section>
</section>
<section id="pca-的步骤" class="level3">
<h3 class="anchored" data-anchor-id="pca-的步骤">PCA 的步骤</h3>
<p>进行 PCA 时，主要分为以下几个关键步骤：</p>
<section id="ld剪枝ld-pruning" class="level4">
<h4 class="anchored" data-anchor-id="ld剪枝ld-pruning">1. LD剪枝（LD-Pruning）</h4>
<p>在进行 PCA 前，我们通常会进行 LD 剪枝，即去除那些高度相关（连锁不平衡，LD）变异位点。这样做的目的是减少冗余信息，使得 PCA 能够更准确地反映独立的遗传变异。</p>
<p>在 PLINK 中，可以使用以下命令进行 LD 剪枝：</p>
<pre class="{bash}"><code>plink2 --bfile ${genotypeFile} \
       --indep-pairwise 50 5 0.2 \
       --out ${outPrefix}.prune</code></pre>
<p><code>--indep-pairwise 50 5 0.2</code> 进行 LD 剪枝，窗口大小为 50 个 SNP，步长为 5，LD 阈值为 0.2，表示去除那些与其他 SNP 高度相关的 SNP。<code>--out</code> 指定输出文件的前缀。这将生成一个包含独立 SNP 的文件 <code>${outPrefix}.prune.in</code>，后续将用于 PCA 计算。</p>
</section>
<section id="去除亲缘关系样本" class="level4">
<h4 class="anchored" data-anchor-id="去除亲缘关系样本">2. 去除亲缘关系样本</h4>
<p>PCA 计算时需要去除亲缘关系较近的样本，通常是 2 度以内的亲属。PLINK 的 <code>--king-cutoff</code> 命令可以用来筛选样本，并去除与其他样本亲缘关系过近的样本。</p>
<pre class="{bash}"><code>plink2 --bfile ${genotypeFile} \
       --king-cutoff 0.0884 \
       --out ${outPrefix}.king.cutoff</code></pre>
<p><code>--king-cutoff 0.0884</code> 此命令通过阈值 0.0884（约对应亲缘关系为 2 度的样本）去除亲缘关系过近的样本。这会生成两个文件：<code>plink_results_king.king.cutoff.in.id</code>（保留的样本 ID）和 <code>plink_results_king.king.cutoff.out.id</code>（被排除的样本 ID）。</p>
</section>
<section id="使用无亲缘关系样本和独立-snp-进行-pca" class="level4">
<h4 class="anchored" data-anchor-id="使用无亲缘关系样本和独立-snp-进行-pca">3. 使用无亲缘关系样本和独立 SNP 进行 PCA</h4>
<p>接下来，使用去除亲缘关系的样本和独立 SNP 来运行 PCA。PCA 计算的目的是识别样本间最显著的遗传变异。我们可以使用 PLINK 中的 <code>--pca</code> 命令来进行 PCA 计算。</p>
<pre class="{bash}"><code>plink2 --bfile ${genotypeFile} \
       --keep ${outPrefix}.king.cutoff.in.id \
       --extract ${outPrefix}.prune.in \
       --freq counts \
       --threads ${threads} \
       --pca approx allele-wts 10 \
       --out ${outPrefix}.pca</code></pre>
<p><code>--keep ${outPrefix}.king.cutoff.in.id</code> 指定只使用无亲缘关系的样本，<code>--extract ${outPrefix}.prune.in</code> 指定仅使用经过 LD 剪枝的独立 SNP。<code>--freq counts</code> 计算等位基因频率，<code>--pca approx allele-wts 10</code> 请求进行 PCA 计算，并输出前 10 个主成分的等位基因权重。此命令会生成多个输出文件，包括主成分得分文件（<code>.eigenvec</code>）、主成分方差解释比例文件（<code>.eigenval</code>）等。</p>
</section>
<section id="将-pca-结果投影到所有样本" class="level4">
<h4 class="anchored" data-anchor-id="将-pca-结果投影到所有样本">4. 将 PCA 结果投影到所有样本</h4>
<p>完成 PCA 后，我们可以将主成分的得分投影到所有样本中。这样可以确保即使是在 PCA 分析后没有被直接计算的样本，也能够获得与前几个主成分的关联。</p>
<pre class="{bash}"><code>plink2 --bfile ${genotypeFile} \
       --threads ${threads} \
       --read-freq ${outPrefix}.acount \
       --score ${outPrefix}.eigenvec.allele 2 6 header-read no-mean-imputation variance-standardize \
       --score-col-nums 7-16 \
       --out ${outPrefix}_projected</code></pre>
<p><code>--read-freq ${outPrefix}.acount</code> 读取计算过的等位基因频率，<code>--score ${outPrefix}.eigenvec.allele 2 6 header-read no-mean-imputation variance-standardize</code> 使用主成分分析的结果对所有样本进行投影，<code>--score-col-nums 7-16</code> 指定投影的主成分列。投影后的结果可以用于进一步的 GWAS 分析，确保将群体结构和亲缘关系的影响考虑在内。</p>
</section>
<section id="分析和解释-pca-结果" class="level4">
<h4 class="anchored" data-anchor-id="分析和解释-pca-结果">5. 分析和解释 PCA 结果</h4>
<p>完成 PCA 分析后，我们可以查看每个主成分的解释比例，了解各个主成分对于遗传变异的贡献。通常，前几个主成分会解释大部分的方差，因此我们关注的是这些主成分的贡献。</p>
<p>在 PLINK 的输出文件中，<code>.eigenval</code> 文件包含每个主成分的特征值，这些特征值表示该主成分对于数据方差的贡献比例。通过查看这些值，我们可以判断哪些主成分最能解释数据中的变异。</p>
</section>
</section>
<section id="总结" class="level3">
<h3 class="anchored" data-anchor-id="总结">总结</h3>
<p>PCA 是 GWAS 分析中的一个关键步骤，能够有效去除群体结构和亲缘关系的影响，从而提高 GWAS 结果的可靠性和准确性。通过 PCA，我们不仅能去除数据中的噪声，还能更好地理解样本之间的遗传结构，为 GWAS 的成功开展奠定坚实基础。</p>


<!-- -->

</section>

 ]]></description>
  <category>plink</category>
  <category>gwas</category>
  <category>bioinformatics</category>
  <category>pca</category>
  <guid>https://leslie-lu.github.io/blog/2024/12/25/pca/</guid>
  <pubDate>Wed, 25 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412252318097.png" medium="image" type="image/png"/>
</item>
<item>
  <title>预 GWAS 阶段的基因型数据 QC 流程</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2024/12/24/genotype_data_QC/</link>
  <description><![CDATA[ 





<p>在进行全基因组关联研究（GWAS）前，数据质量的控制（QC）是至关重要的一步。</p>
<p>预处理和质量控制可以确保我们使用的数据集干净、可靠，避免潜在的偏倚和错误。这里，我们将介绍如何在 GWAS 前进行基因型数据的 QC，确保数据的准确性和可靠性。</p>
<section id="计算缺失率missing-rate与呼叫率call-rate" class="level3">
<h3 class="anchored" data-anchor-id="计算缺失率missing-rate与呼叫率call-rate">1. 计算缺失率（Missing Rate）与呼叫率（Call Rate）</h3>
<p>在 GWAS 分析中，缺失数据可能会影响结果的准确性。基因型数据的质量首先需要评估每个样本和每个 SNP 的缺失率。</p>
<p>缺失率表示某个样本在所有标记位点的基因型缺失的比例；呼叫率表示某个 SNP 在所有样本中的基因型被成功识别的比例。样本缺失率：样本的基因型数据可能因技术问题、平台差异等因素缺失，需要计算每个样本的缺失率，并根据预设的阈值剔除缺失过多的样本。SNP 呼叫率：类似地，每个SNP的呼叫率需要计算。如果某些 SNP 在大多数样本中都没有成功呼叫，可以考虑排除这些 SNP。</p>
<p>在 PLINK 中，可以使用以下命令来计算样本的缺失率和 SNP 的呼叫率：</p>
<pre class="{bash}"><code>plink --bfile ${genotypeFile} --missing --out plink_missing</code></pre>
</section>
<section id="计算等位基因频率allele-frequency" class="level3">
<h3 class="anchored" data-anchor-id="计算等位基因频率allele-frequency">2. 计算等位基因频率（Allele Frequency）</h3>
<p>等位基因频率是 GWAS 中重要的统计量，它表示某个特定等位基因在样本中的出现频率。为了确保我们分析的是常见的变异，我们通常会设置最小等位基因频率（MAF）阈值。通常，筛选出 MAF 低于 1% 的 SNP 是合理的，因为低频变异可能会增加假阳性。</p>
<p>在 PLINK 中，计算等位基因频率非常简单：</p>
<pre class="{bash}"><code>plink --bfile ${genotypeFile} --freq --out plink_freq</code></pre>
</section>
<section id="hardy-weinberg-平衡精确检验hardy-weinberg-equilibrium-test" class="level3">
<h3 class="anchored" data-anchor-id="hardy-weinberg-平衡精确检验hardy-weinberg-equilibrium-test">3. Hardy-Weinberg 平衡精确检验（Hardy-Weinberg Equilibrium Test）</h3>
<p>Hardy-Weinberg 平衡（HWE）检验是 GWAS 中常用的一种质量控制手段。根据 HWE 定律，如果一个群体处于均衡状态，则基因型的分布应该符合预期的频率。如果某个 SNP 的基因型偏离了 HWE，可能是因为样本污染、系统性错误或者是与某些表型相关的变异。通常，对于病例对照研究，HWE检验的p值阈值设定为<img src="https://latex.codecogs.com/png.latex?10%5E%7B-6%7D">。</p>
<p>使用 PLINK 执行 HWE 检验：</p>
<pre class="{bash}"><code>plink --bfile ${genotypeFile} --hwe 1e-6 --out plink_hwe</code></pre>
</section>
<section id="ld-pruning" class="level3">
<h3 class="anchored" data-anchor-id="ld-pruning">4. LD-Pruning</h3>
<p>连锁不平衡（LD）修剪是为了去除那些高度相关的 SNP，减少冗余，确保分析中使用的 SNP 具有独立性。若 SNP 之间存在高度的 LD，它们可能会影响 GWAS 结果的准确性。通常使用 LD-pruning 来去除相关性高的 SNP。</p>
<p>在 PLINK 中，常用的 LD-pruning 命令如下：</p>
<pre class="{bash}"><code>plink --bfile ${genotypeFile} --indep-pairwise 50 5 0.2 --out plink_results</code></pre>
<p>该命令会根据给定的窗口大小（50 个 SNP）、步长（每次移动 5 个 SNP）和 <img src="https://latex.codecogs.com/png.latex?r%5E%7B2%7D"> 阈值（0.2），进行 LD 修剪。</p>
</section>
<section id="计算近交系数-finbreeding-f-coefficient" class="level3">
<h3 class="anchored" data-anchor-id="计算近交系数-finbreeding-f-coefficient">5. 计算近交系数 F（Inbreeding F coefficient）</h3>
<p>近交系数 F（F coefficient）用于衡量样本中的近交程度。较高的 F 值可能表示样本存在近交，而较低的 F 值可能表示样本污染。计算 F 值时，可以使用 PLINK 的 <code>--het</code> 命令，它会生成每个样本的观测和期望纯合子基因型数量，并计算 F 值。</p>
<pre class="{bash}"><code>plink --bfile ${genotypeFile} --het --out plink_results</code></pre>
<p>输出结果中，F 值较高的样本可以考虑进一步检查或排除。常见的处理方法是将 F 值超过 3 个标准差（SD）的样本排除。</p>
</section>
<section id="数据管理make-bed-recode" class="level3">
<h3 class="anchored" data-anchor-id="数据管理make-bed-recode">6. 数据管理（make-bed / recode）</h3>
<p>为了便于后续分析，PLINK 提供了多种数据格式转换工具。最常用的格式是 BED 格式，它是 PLINK 的二进制格式，能够大大提高存储和计算效率。<code>make-bed</code> 将原始的 PED/MAP 文件转换为 BED 格式。通常在预处理数据时使用该命令。</p>
<pre class="{bash}"><code>plink --bfile ${genotypeFile} --make-bed --out plink_bed</code></pre>
<p>bash</p>
<p><code>recode</code> 如果你需要将数据转回 PED 格式或其他格式，可以使用 <code>recode</code> 命令。</p>
<pre class="{bash}"><code>plink --bfile ${genotypeFile} --recode --out plink_recode</code></pre>
<p>这些命令帮助将数据从一种格式转换为另一种格式，确保数据可以被其他分析工具有效读取。</p>
</section>
<section id="总结" class="level3">
<h3 class="anchored" data-anchor-id="总结">总结</h3>
<p>基因型数据的 QC 是 GWAS 分析中的基础步骤，它确保数据的可靠性和准确性。通过执行上述步骤，你可以在 GWAS 分析前排除掉缺失值过多、低频变异、偏离 Hardy-Weinberg 平衡的 SNP，以及冗余的高度 LD SNP。高质量的数据是可靠分析的前提，只有确保数据质量，才能得出科学、可靠的结果。</p>


<!-- -->

</section>

 ]]></description>
  <category>plink</category>
  <category>gwas</category>
  <category>bioinformatics</category>
  <category>genotype data</category>
  <category>qc</category>
  <guid>https://leslie-lu.github.io/blog/2024/12/24/genotype_data_QC/</guid>
  <pubDate>Tue, 24 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412241722219.png" medium="image" type="image/png"/>
</item>
</channel>
</rss>
