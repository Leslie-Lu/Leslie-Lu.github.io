<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Zhen Lu&#39;s blog</title>
<link>https://leslie-lu.github.io/atom.html</link>
<atom:link href="https://leslie-lu.github.io/atom.xml" rel="self" type="application/rss+xml"/>
<description>Zhen Lu&#39;s blog</description>
<language>en</language>
<generator>quarto-1.7.31</generator>
<lastBuildDate>Wed, 07 May 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>PE0004: Largest Palindrome Product</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/05/07/pe0004/</link>
  <description><![CDATA[ 





<section id="题目" class="level3">
<h3 class="anchored" data-anchor-id="题目">题目</h3>
<p>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009=91*99.</p>
<p>Find the largest palindrome made from the product of two 3-digit numbers.</p>
</section>
<section id="问题描述" class="level3">
<h3 class="anchored" data-anchor-id="问题描述">问题描述</h3>
<p>题目要求：给定两个三位数，找到它们的乘积中最大的回文数。</p>
</section>
<section id="解答" class="level3">
<h3 class="anchored" data-anchor-id="解答">解答</h3>
<section id="方法一暴力遍历法新手入门" class="level4">
<h4 class="anchored" data-anchor-id="方法一暴力遍历法新手入门">方法一：暴力遍历法（新手入门）</h4>
<p>思路：生成所有3位数的乘积，逐个检查是否为回文数，记录最大值。</p>
<div id="01d5271b" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> find_maximum():</span>
<span id="cb1-2">    ans<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(</span>
<span id="cb1-3">        i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>j</span>
<span id="cb1-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>j) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>j)[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb1-7">    )</span>
<span id="cb1-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ans</span>
<span id="cb1-9"></span>
<span id="cb1-10">find_maximum()</span></code></pre></div>
</div>
<p>优点：代码简单，逻辑直观。 缺点：计算次数高达810,000次，效率极低。</p>
</section>
<section id="方法二" class="level4">
<h4 class="anchored" data-anchor-id="方法二">方法二</h4>
<div id="071057dd" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reverse(n):  </span>
<span id="cb2-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  </span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:  </span>
<span id="cb2-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  </span>
<span id="cb2-5">        n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  </span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>  </span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_palindrome(n):  </span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> reverse(n)  </span>
<span id="cb2-10"></span>
<span id="cb2-11">largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  </span>
<span id="cb2-12">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>  </span>
<span id="cb2-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> palindrome():  </span>
<span id="cb2-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> largestPalindrome, a  </span>
<span id="cb2-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>:  </span>
<span id="cb2-16">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>  </span>
<span id="cb2-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>:  </span>
<span id="cb2-18">            product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b  </span>
<span id="cb2-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_palindrome(product) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> largestPalindrome:  </span>
<span id="cb2-20">                largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> product  </span>
<span id="cb2-21">            b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb2-22">        a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb2-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> largestPalindrome  </span></code></pre></div>
</div>
<p>reverse()：通过数学方法反转数字，避免字符串转换。</p>
<p>global变量：全局记录最大值，但嵌套循环未优化，计算量仍为810,000次。</p>
</section>
<section id="方法三减少重复计算" class="level4">
<h4 class="anchored" data-anchor-id="方法三减少重复计算">方法三：减少重复计算</h4>
<p>优化点：内层循环从a开始，避免重复检查i*j和j*i。</p>
<div id="e75a397d" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  </span>
<span id="cb3-2">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>  </span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> improved_palindrome():  </span>
<span id="cb3-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> largestPalindrome, a  </span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>:  </span>
<span id="cb3-6">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 从a开始，避免重复  </span></span>
<span id="cb3-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>:  </span>
<span id="cb3-8">            product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b  </span>
<span id="cb3-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_palindrome(product) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> largestPalindrome:  </span>
<span id="cb3-10">                largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> product  </span>
<span id="cb3-11">            b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb3-12">        a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb3-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> largestPalindrome  </span></code></pre></div>
</div>
</section>
<section id="方法四倒序搜索-提前终止" class="level4">
<h4 class="anchored" data-anchor-id="方法四倒序搜索-提前终止">方法四：倒序搜索 + 提前终止</h4>
<p>优化点：从999开始倒序搜索，若乘积小于当前最大值则提前终止。</p>
<div id="cea80ac0" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  </span>
<span id="cb4-2">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>  </span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> optimized_palindrome():  </span>
<span id="cb4-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> largestPalindrome, a  </span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>:  </span>
<span id="cb4-6">        b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 从999开始  </span></span>
<span id="cb4-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> a:  </span>
<span id="cb4-8">            product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b  </span>
<span id="cb4-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> largestPalindrome:  </span>
<span id="cb4-10">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 提前终止  </span></span>
<span id="cb4-11">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_palindrome(product):  </span>
<span id="cb4-12">                largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> product  </span>
<span id="cb4-13">            b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb4-14">        a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb4-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> largestPalindrome  </span></code></pre></div>
</div>
<p>break：当product &lt;= largestPalindrome时跳出循环，实际计算约5,000次。</p>
</section>
<section id="方法五数学优化" class="level4">
<h4 class="anchored" data-anchor-id="方法五数学优化">方法五：数学优化</h4>
<p>数学原理：若乘积为回文数，至少一个数为11的倍数（仅限6位回文数）</p>
<div id="191e050b" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  </span>
<span id="cb5-2">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>  </span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> further_optimized_palindrome():  </span>
<span id="cb5-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">global</span> largestPalindrome, a  </span>
<span id="cb5-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>:  </span>
<span id="cb5-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:  </span>
<span id="cb5-7">            b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>  </span>
<span id="cb5-8">            subtract <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb5-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:  </span>
<span id="cb5-10">            b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">990</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 最大11倍数  </span></span>
<span id="cb5-11">            subtract <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>  </span>
<span id="cb5-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> a:  </span>
<span id="cb5-13">            product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b  </span>
<span id="cb5-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> largestPalindrome:  </span>
<span id="cb5-15">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span>  </span>
<span id="cb5-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_palindrome(product):  </span>
<span id="cb5-17">                largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> product  </span>
<span id="cb5-18">            b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> subtract  </span>
<span id="cb5-19">        a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  </span>
<span id="cb5-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> largestPalindrome  </span></code></pre></div>
</div>
<p>b = 990：当a非11倍数时，b仅取11的倍数，减少候选数。</p>
<p>subtract = 11：步长为11，跳过非11倍数。</p>
</section>
<section id="方法六向量化计算" class="level4">
<h4 class="anchored" data-anchor-id="方法六向量化计算">方法六：向量化计算</h4>
<p>代码逻辑：利用NumPy矩阵运算加速。</p>
<div id="433c2fad" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np  </span>
<span id="cb6-2">reverse_vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vectorize(reverse)  </span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_palindrome_vec(n):  </span>
<span id="cb6-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> reverse_vec(n)  </span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> max_palindrome_vec(n):  </span>
<span id="cb6-8">    num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n[is_palindrome_vec(n)]  </span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(num) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.size(num) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>  </span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> vectorized_palindrome(n):  </span>
<span id="cb6-12">    largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  </span>
<span id="cb6-13">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, n)  </span>
<span id="cb6-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> x:  </span>
<span id="cb6-15">        max_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_palindrome_vec(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x)  </span>
<span id="cb6-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> max_value <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> max_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> largestPalindrome:  </span>
<span id="cb6-17">            largestPalindrome <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_value  </span>
<span id="cb6-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> largestPalindrome  </span></code></pre></div>
</div>
</section>
</section>
<section id="答案" class="level3">
<h3 class="anchored" data-anchor-id="答案">答案</h3>
<p>答案为906609。</p>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>project euler</category>
  <category>algorithm</category>
  <category>math</category>
  <category>programming</category>
  <category>palindrome</category>
  <category>product</category>
  <guid>https://leslie-lu.github.io/blog/2025/05/07/pe0004/</guid>
  <pubDate>Wed, 07 May 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250507225223.png" medium="image" type="image/png"/>
</item>
<item>
  <title>手写 Transformer</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/05/04/transformer/</link>
  <description><![CDATA[ 





<section id="引言" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="引言">引言</h3>
<p>Transfomer 是一种用于自然语言处理（NLP）任务的深度学习模型架构。它在2017年由 Vaswani 等人提出，并在论文《Attention is All You Need》中首次介绍。Transformer 模型的核心思想是使用自注意力机制来捕捉输入序列中不同位置之间的依赖关系，而不依赖于传统的循环神经网络（RNN）或卷积神经网络（CNN）。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504183843.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Attention is All You Need</figcaption>
</figure>
</div>
<p>这里，我们将手动搭建并实现该论文中的 Transformer 模型。我们将使用 PyTorch 框架来实现该模型，并逐步解释每个组件的功能和实现细节。</p>
<blockquote class="blockquote">
<p>本文代码实现参考哈佛大学 <a href="https://nlp.seas.harvard.edu/annotated-transformer/#prelims" title="The Annotated Transformer">The Annotated Transformer</a>，特别致谢 Ashish Vaswani 等原论文作者。</p>
</blockquote>
</section>
<section id="模型架构全景" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="模型架构全景">模型架构全景</h3>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504184016.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Transfomer</figcaption>
</figure>
</div>
</section>
<section id="核心模块" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="核心模块">核心模块</h3>
<section id="多头注意力机制multi-head-attention" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="多头注意力机制multi-head-attention">1. 多头注意力机制（Multi-Head Attention）</h4>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504184542.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Multi-Head Attention</figcaption>
</figure>
</div>
<p>注意力公式为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BAttention%7D(Q,%20K,%20V)%20=%20%5Ctext%7Bsoftmax%7D%5Cleft(%5Cfrac%7BQK%5ET%7D%7B%5Csqrt%7Bd_k%7D%7D%5Cright)V%0A"></p>
<p>代码实现：</p>
<div id="4edaf089" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MultiHeaderAttention(nn.Module):</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, h, d_model, dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>):</span>
<span id="cb1-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Take in model size and number of heads."</span></span>
<span id="cb1-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb1-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> d_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assume d_v always equals d_k</span></span>
<span id="cb1-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> h</span>
<span id="cb1-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h</span>
<span id="cb1-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linears<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clones(nn.Linear(d_model, d_model), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.attn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Dropout(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dropout)</span>
<span id="cb1-12"></span>
<span id="cb1-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, query, key, value, mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb1-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mask <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-15">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Same mask applied to all h heads.</span></span>
<span id="cb1-16">            mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-17">        nbatches<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> query.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-18"></span>
<span id="cb1-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1) Do all the linear projections in batch from d_model =&gt; h x d_k</span></span>
<span id="cb1-20">        query, key, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-21">            lin(x).view(nbatches, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d_k).transpose(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> lin, x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linears, (query, key, value))</span>
<span id="cb1-23">        ]</span>
<span id="cb1-24"></span>
<span id="cb1-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2) Apply attention on all the prokjected vectors in batch.</span></span>
<span id="cb1-26">        x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.attn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> attention(</span>
<span id="cb1-27">            query, key, value, mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask, dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dropout</span>
<span id="cb1-28">        )</span>
<span id="cb1-29"></span>
<span id="cb1-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3) Concat using a view and apply a final linear.</span></span>
<span id="cb1-31">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb1-32">            x.transpose(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-33">            .contiguous()</span>
<span id="cb1-34">            .view(nbatches, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d_k)</span>
<span id="cb1-35">        )</span>
<span id="cb1-36">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> query</span>
<span id="cb1-37">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> key</span>
<span id="cb1-38">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> value</span>
<span id="cb1-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.linears[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>](x)</span></code></pre></div>
</div>
<p>其中，<code>h=8</code> 表示头数，为原文默认设置，<code>d_model=512</code> 表示模型的维度。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504184650.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Annotation</figcaption>
</figure>
</div>
</section>
<section id="位置编码positional-encoding" class="level4">
<h4 class="anchored" data-anchor-id="位置编码positional-encoding">2. 位置编码（Positional Encoding）</h4>
<p>数学公式：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BPE%7D_%7B(pos,%202i)%7D%20=%20%5Csin%5Cleft(%5Cfrac%7Bpos%7D%7B10000%5E%7B2i/d_%7Bmodel%7D%7D%7D%5Cright)%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BPE%7D_%7B(pos,%202i+1)%7D%20=%20%5Ccos%5Cleft(%5Cfrac%7Bpos%7D%7B10000%5E%7B2i/d_%7Bmodel%7D%7D%7D%5Cright)%0A"></p>
<p>代码实现：</p>
<div id="471e3de7" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> PositionalEncoding(nn.Module):</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Implement the PE function."</span></span>
<span id="cb2-3"></span>
<span id="cb2-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, d_model, dropout, max_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>):</span>
<span id="cb2-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Dropout(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dropout)</span>
<span id="cb2-7"></span>
<span id="cb2-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the positional endcodings once in log sapce.</span></span>
<span id="cb2-9">        pe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(max_len, d_model)</span>
<span id="cb2-10">        position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, max_len).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-11">        div_term<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.exp(</span>
<span id="cb2-12">            torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, d_model, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(math.log(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000.0</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>d_model)</span>
<span id="cb2-13">        )</span>
<span id="cb2-14">        pe[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>::<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.sin(position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> div_term)</span>
<span id="cb2-15">        pe[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>::<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cos(position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> div_term)</span>
<span id="cb2-16">        pe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pe.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.register_buffer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pe'</span>, pe)</span>
<span id="cb2-18"></span>
<span id="cb2-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb2-20">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pe[:,:x.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)].requires_grad_(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dropout(x)</span></code></pre></div>
</div>
</section>
<section id="编码器层encoder-layer" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="编码器层encoder-layer">3. 编码器层（Encoder Layer）</h4>
<p>架构组成：</p>
<ul>
<li><p>自注意力子层</p></li>
<li><p>前馈神经网络子层</p></li>
<li><p>残差连接和层归一化</p></li>
</ul>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504185554.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Encoder block</figcaption>
</figure>
</div>
<p>代码实现：</p>
<div id="97ea52a4" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> EncoderLayer(nn.Module):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Encoder is made up of self-attn and feed forward."</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, size, self_attn, feed_forward, dropout):</span>
<span id="cb3-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.self_attn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> self_attn</span>
<span id="cb3-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.feed_forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feed_forward</span>
<span id="cb3-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sublayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clones(SublayerConnection(size, dropout), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> size</span>
<span id="cb3-10"></span>
<span id="cb3-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, mask):</span>
<span id="cb3-12">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sublayer[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>](x, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.self_attn(x, x, x, mask))</span>
<span id="cb3-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sublayer[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>](x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.feed_forward)</span></code></pre></div>
</div>
</section>
<section id="解码器层decoder-layer" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="解码器层decoder-layer">4. 解码器层（Decoder Layer）</h4>
<p>架构组成：</p>
<ul>
<li><p>带掩码的自注意力子层</p></li>
<li><p>编码器-解码器注意力子层</p></li>
<li><p>前馈神经网络子层</p></li>
</ul>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504185838.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Decoder block</figcaption>
</figure>
</div>
<p>代码实现：</p>
<div id="96e27507" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> DecoderLayer(nn.Module):</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Decoder is made of self-attn, src-attn, and feed forward"</span></span>
<span id="cb4-3"></span>
<span id="cb4-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, size, self_attn, src_attn, feed_forward, dropout):</span>
<span id="cb4-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb4-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> size</span>
<span id="cb4-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.self_attn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> self_attn</span>
<span id="cb4-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.src_attn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> src_attn</span>
<span id="cb4-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.feed_forward<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feed_forward</span>
<span id="cb4-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sublayer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> clones(SublayerConnection(size, dropout), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb4-11"></span>
<span id="cb4-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, memory, src_mask, tgt_mask):</span>
<span id="cb4-13">        m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> memory</span>
<span id="cb4-14">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sublayer[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>](x, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.self_attn(x, x, x, tgt_mask))</span>
<span id="cb4-15">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sublayer[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>](x, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.src_attn(x, m, m, src_mask))</span>
<span id="cb4-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sublayer[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>](x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.feed_forward)</span></code></pre></div>
</div>
<p>其中，掩码生成函数如下：</p>
<div id="90b3dcb3" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> subsequent_mask(size):</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Mask out subsequent positions."</span></span>
<span id="cb5-3">    attn_shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, size, size)</span>
<span id="cb5-4">    subsequent_mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.triu(torch.ones(attn_shape, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>), diagonal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>subsequent_mask</span></code></pre></div>
</div>
<p>借助于 <code>subsequent_mask</code> 函数，我们可以生成一个上三角矩阵，用于掩码掉后续位置的注意力权重。</p>
</section>
<section id="模型初始化与参数设置" class="level4">
<h4 class="anchored" data-anchor-id="模型初始化与参数设置">5. 模型初始化与参数设置</h4>
<div id="945adb4b" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> make_model(</span>
<span id="cb6-2">    src_vocab, tgt_vocab, N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, d_model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, d_ff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2048</span>, h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, dropout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb6-3">):</span>
<span id="cb6-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Helper: Construct a model from hyperparameters."</span></span>
<span id="cb6-5">    c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> copy.deepcopy</span>
<span id="cb6-6">    attn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MultiHeaderAttention(h, d_model)</span>
<span id="cb6-7">    ff<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PositionWiseFeedForward(d_model, d_ff, dropout)</span>
<span id="cb6-8">    position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PositionalEncoding(d_model, dropout)</span>
<span id="cb6-9">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EncoderDecoder(</span>
<span id="cb6-10">        Encoder(EncoderLayer(d_model, c(attn), c(ff), dropout), N),</span>
<span id="cb6-11">        Decoder(DecoderLayer(d_model, c(attn), c(attn), c(ff), dropout), N),</span>
<span id="cb6-12">        nn.Sequential(Embeddings(d_model, src_vocab), c(position)),</span>
<span id="cb6-13">        nn.Sequential(Embeddings(d_model, tgt_vocab), c(position)),</span>
<span id="cb6-14">        Generator(d_model, tgt_vocab)</span>
<span id="cb6-15">    )</span>
<span id="cb6-16"></span>
<span id="cb6-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initiailize parameters with Glorot / fan_avg.</span></span>
<span id="cb6-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.parameters():</span>
<span id="cb6-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> p.dim() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb6-20">            nn.init.xavier_uniform_(p)</span>
<span id="cb6-21">    </span>
<span id="cb6-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model</span></code></pre></div>
</div>
</section>
</section>
<section id="训练过程" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="训练过程">训练过程</h3>
<section id="动态学习率调整" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="动态学习率调整">1. 动态学习率调整</h4>
<p>公式：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Blr%7D%20=%20%5Ctext%7Bd_model%7D%5E%7B-0.5%7D%20%5Ccdot%20%5Ctext%7Bmin%7D(%5Ctext%7Bstep%7D%5E%7B-0.5%7D,%20%5Ctext%7Bstep%7D%20%5Ccdot%20%5Ctext%7Bwarmup%7D%5E%7B-1.5%7D)%0A"></p>
<p>代码实现：</p>
<div id="b30d52ca" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rate(step, model_size, factor, warmup):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    We have to default the step to 1 for LambdaLR function to avoid zero rasing to negative power.</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb7-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb7-6">        step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (model_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> warmup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>)</span></code></pre></div>
</div>
<p>学习率变化曲线：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504190612.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">lr</figcaption>
</figure>
</div>
<p>前4000步线性增长，之后指数衰减。</p>
</section>
<section id="标签平滑label-smoothing" class="level4">
<h4 class="anchored" data-anchor-id="标签平滑label-smoothing">2. 标签平滑（Label Smoothing）</h4>
<p>标签平滑是一种正则化技术，用于缓解模型过拟合和提高泛化能力。它通过将目标标签的概率分布进行平滑处理，使得模型在训练时不会过于自信地预测某个特定的标签。</p>
<p>代码实现：</p>
<div id="d3e2a908" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LabelSmoothing(nn.Module):</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Implement label smoothing.</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb8-5"></span>
<span id="cb8-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, size, padding_idx, smoothing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>):</span>
<span id="cb8-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb8-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.criterion<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.KLDivLoss(reduction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>)</span>
<span id="cb8-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.padding_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> padding_idx</span>
<span id="cb8-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.confidence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> smoothing</span>
<span id="cb8-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.smoothing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smoothing</span>
<span id="cb8-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> size</span>
<span id="cb8-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.true_dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb8-14"></span>
<span id="cb8-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, target):</span>
<span id="cb8-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> x.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vocab_size</span></span>
<span id="cb8-17">        true_dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.data.clone() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clone the data to avoid in-place operation</span></span>
<span id="cb8-18">        true_dist.fill_(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.smoothing <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb8-19">        true_dist.scatter_(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, target.data.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.confidence)</span>
<span id="cb8-20">        true_dist[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.padding_idx]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ignore the category of padding_idx</span></span>
<span id="cb8-21">        mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nonzero(target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.padding_idx)</span>
<span id="cb8-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> mask.dim() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb8-23">            true_dist.index_fill_(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, mask.squeeze(), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>)</span>
<span id="cb8-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.true_dist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> true_dist</span>
<span id="cb8-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.criterion(x, true_dist.clone().detach())</span></code></pre></div>
</div>
</section>
<section id="分布式训练加速" class="level4">
<h4 class="anchored" data-anchor-id="分布式训练加速">3. 分布式训练加速</h4>
<p>多 GPU 训练：</p>
<div id="25a5eab1" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_worker(</span>
<span id="cb9-2">    gpu,</span>
<span id="cb9-3">    ngpus_per_node,</span>
<span id="cb9-4">    vocab_src,</span>
<span id="cb9-5">    vocab_tgt,</span>
<span id="cb9-6">    spacy_de,</span>
<span id="cb9-7">    spacy_en,</span>
<span id="cb9-8">    config,</span>
<span id="cb9-9">    is_distributed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb9-10">):</span>
<span id="cb9-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Train worker process using GPU: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gpu<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> for training'</span>, flush<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-12">    torch.cuda.set_device(gpu)</span>
<span id="cb9-13"></span>
<span id="cb9-14">    pad_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vocab_tgt[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;blank&gt;"</span>]</span>
<span id="cb9-15">    d_model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb9-16">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_model(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(vocab_src), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(vocab_tgt), N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb9-17">    model.cuda(gpu)</span>
<span id="cb9-18">    module<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model</span>
<span id="cb9-19"></span>
<span id="cb9-20">    is_main_process<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb9-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_distributed:</span>
<span id="cb9-22">        dist.init_process_group(</span>
<span id="cb9-23">            backend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nccl'</span>,</span>
<span id="cb9-24">            init_method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'env://'</span>,</span>
<span id="cb9-25">            rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gpu,</span>
<span id="cb9-26">            world_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ngpus_per_node</span>
<span id="cb9-27">        )</span>
<span id="cb9-28">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DDP(model, device_ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[gpu])</span>
<span id="cb9-29">        module<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.module</span>
<span id="cb9-30">        is_main_process<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-31">    </span>
<span id="cb9-32">    criterion<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LabelSmoothing(</span>
<span id="cb9-33">        size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(vocab_tgt),</span>
<span id="cb9-34">        padding_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pad_idx,</span>
<span id="cb9-35">        smoothing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb9-36">    )</span>
<span id="cb9-37">    criterion.cuda(gpu)</span>
<span id="cb9-38"></span>
<span id="cb9-39">    train_dataloader, valid_dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_dataloaders(</span>
<span id="cb9-40">        gpu,</span>
<span id="cb9-41">        vocab_src,</span>
<span id="cb9-42">        vocab_tgt,</span>
<span id="cb9-43">        spacy_de,</span>
<span id="cb9-44">        spacy_en,</span>
<span id="cb9-45">        batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch_size'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> ngpus_per_node,</span>
<span id="cb9-46">        max_padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_padding'</span>],</span>
<span id="cb9-47">        is_distributed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>is_distributed</span>
<span id="cb9-48">    )</span>
<span id="cb9-49"></span>
<span id="cb9-50">    optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(</span>
<span id="cb9-51">        model.parameters(),</span>
<span id="cb9-52">        lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'base_lr'</span>],</span>
<span id="cb9-53">        betas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.98</span>),</span>
<span id="cb9-54">        eps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-9</span></span>
<span id="cb9-55">    )</span>
<span id="cb9-56">    lr_scheduler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LambdaLR(</span>
<span id="cb9-57">        optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optimizer,</span>
<span id="cb9-58">        lr_lambda<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> step: rate(</span>
<span id="cb9-59">            step, model_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>d_model,</span>
<span id="cb9-60">            factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, warmup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'warmup'</span>]</span>
<span id="cb9-61">        )</span>
<span id="cb9-62">    )</span>
<span id="cb9-63">    train_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TrainState()</span>
<span id="cb9-64"></span>
<span id="cb9-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_epochs'</span>]):</span>
<span id="cb9-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_distributed:</span>
<span id="cb9-67">            train_dataloader.sampler.set_epoch(epoch)</span>
<span id="cb9-68">            valid_dataloader.sampler.set_epoch(epoch)</span>
<span id="cb9-69"></span>
<span id="cb9-70">        model.train()</span>
<span id="cb9-71">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'[GPU </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gpu<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Training ===='</span>, flush<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-72">        _, train_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(</span>
<span id="cb9-73">            (Batch(b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], pad_idx) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_dataloader),</span>
<span id="cb9-74">            model,</span>
<span id="cb9-75">            SimpleLossCompute(module.generator, criterion),</span>
<span id="cb9-76">            optimizer,</span>
<span id="cb9-77">            lr_scheduler,</span>
<span id="cb9-78">            mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train+log'</span>,</span>
<span id="cb9-79">            accum_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accum_iter'</span>],</span>
<span id="cb9-80">            train_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_state</span>
<span id="cb9-81">        )</span>
<span id="cb9-82"></span>
<span id="cb9-83">        GPUtil.showUtilization()</span>
<span id="cb9-84">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_main_process:</span>
<span id="cb9-85">            file_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s%.2d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.pt'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file_prefix'</span>], epoch)</span>
<span id="cb9-86">            torch.save(module.state_dict(), file_path)</span>
<span id="cb9-87">        torch.cuda.empty_cache()</span>
<span id="cb9-88"></span>
<span id="cb9-89">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'[GPU </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gpu<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Validation ===='</span>, flush<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-90">        model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb9-91">        sloss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(</span>
<span id="cb9-92">            (Batch(b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], pad_idx) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> valid_dataloader),</span>
<span id="cb9-93">            model,</span>
<span id="cb9-94">            SimpleLossCompute(module.generator, criterion),</span>
<span id="cb9-95">            DummyOptimizer,</span>
<span id="cb9-96">            DummyScheduler,</span>
<span id="cb9-97">            mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'eval'</span></span>
<span id="cb9-98">        )[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb9-99">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'[GPU </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>gpu<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Validation Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sloss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, flush<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-100">        torch.cuda.empty_cache()</span>
<span id="cb9-101"></span>
<span id="cb9-102">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_main_process:</span>
<span id="cb9-103">        file_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">final.pt'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> (config[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file_prefix'</span>])</span>
<span id="cb9-104">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Training finished.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Model saved to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pt.'</span>, flush<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-105">        torch.save(</span>
<span id="cb9-106">            module.state_dict(),</span>
<span id="cb9-107">            file_path</span>
<span id="cb9-108">        )</span></code></pre></div>
</div>
</section>
</section>
<section id="实例" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="实例">实例</h3>
<p>我们使用 WMT 2014 英德翻译数据集进行训练，完成德语到英语的翻译任务。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504191540.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Training</figcaption>
</figure>
</div>
<p>完整注释的 python 代码已经放进了<a href="https://mp.weixin.qq.com/s/4IR-KMAZ-q2VbI0Fz4fYRg">星球</a>里。</p>


<!-- -->

</section>

 ]]></description>
  <category>Transformer</category>
  <category>NLP</category>
  <category>Deep Learning</category>
  <category>Machine Learning</category>
  <category>AI</category>
  <category>Python</category>
  <category>PyTorch</category>
  <guid>https://leslie-lu.github.io/blog/2025/05/04/transformer/</guid>
  <pubDate>Sun, 04 May 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250504183843.png" medium="image" type="image/png"/>
</item>
<item>
  <title>脱发就诊</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/04/23/hair_loss/</link>
  <description><![CDATA[ 





<section id="背景" class="level3">
<h3 class="anchored" data-anchor-id="背景">背景</h3>
<p>头发容易出油，头皮屑多，发际线后移。</p>
</section>
<section id="就诊" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="就诊">就诊</h3>
<p>2025年4月22日，去医院美容皮肤科就诊。</p>
<p>皮肤镜检测诊断 119￥：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/53127b7cf0231efed796e6253161f7d.jpg" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">皮肤镜检查报告单</figcaption>
</figure>
</div>
<p>临床诊断：雄激素性脱发，脂溢性皮炎。</p>
</section>
<section id="治疗" class="level3">
<h3 class="anchored" data-anchor-id="治疗">治疗</h3>
<ol type="1">
<li>二硫化硒洗剂 1瓶 230g 80￥，治疗头皮屑和头皮脂溢性皮炎。</li>
</ol>
<p>用法：</p>
<ul>
<li><p>每周2次，一个疗程2-4周。</p></li>
<li><p>先用洗发水洗头，冲洗干净后再用二硫化硒洗剂。</p></li>
<li><p>二硫化硒洗剂取 5-10克，涂抹在湿发及头皮上，轻揉至出泡沫，待3-5分钟后用温水冲洗干净。必要时可重复一次。</p></li>
</ul>
<ol start="2" type="1">
<li><p>米诺地尔泡沫剂 2瓶 396￥。用法：每天两次。</p></li>
<li><p>激光疗法（1200￥）+ 红光治疗(300￥)。</p></li>
<li><p>口服非那雄胺片 1mg*84片 148.96￥。用法：每天一次，一次一片。</p></li>
</ol>


<!-- -->

</section>

 ]]></description>
  <category>daily life</category>
  <category>health</category>
  <guid>https://leslie-lu.github.io/blog/2025/04/23/hair_loss/</guid>
  <pubDate>Tue, 22 Apr 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Conventional Commits 规范详解</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/04/17/Conventional_Commits/</link>
  <description><![CDATA[ 





<section id="背景" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="背景">背景</h3>
<p>在软件开发中，版本控制是一个至关重要的环节。Git 是最流行的版本控制系统之一，而 Git 提交信息（commit message）则是记录代码变更的重要方式。而我们经常会遇见：</p>
<ul>
<li><p>查看项目 Git 日志时，提交信息杂乱无章，完全看不懂每个提交的意图。</p></li>
<li><p>手动编写 CHANGELOG 耗时费力，还容易遗漏重要变更。</p></li>
<li><p>团队协作中，成员提交风格不一，代码审查效率低下</p></li>
</ul>
<p>为了提高 Git 提交信息的可读性和一致性，Conventional Commits 规范（地址：https://www.conventionalcommits.org/en/v1.0.0/）应运而生。这是一套被 Angular、Vue 等顶级开源项目广泛采用的 Git 提交规范，能将提交信息从混乱的草稿变为清晰的文档。</p>
<p>这里，我们将详细介绍 Conventional Commits 规范的定义、格式、使用场景以及一些最佳实践。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250417174052.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Conventional Commits</figcaption>
</figure>
</div>
</section>
<section id="conventional-commits-规范" class="level3">
<h3 class="anchored" data-anchor-id="conventional-commits-规范">Conventional Commits 规范</h3>
<p>Conventional Commits 是一套基于 Git 提交消息的轻量级约定，旨在通过结构化格式提升提交信息的可读性和自动化处理能力。它的核心目标包括：</p>
<ul>
<li><p>人类可读：清晰描述提交的意图和影响范围。</p></li>
<li><p>机器友好：支持自动化生成 CHANGELOG 和语义化版本（SemVer）。</p></li>
<li><p>团队协作：统一提交风格，减少沟通成本。</p></li>
</ul>
</section>
<section id="格式结构" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="格式结构">格式结构</h3>
<p>一条规范的提交消息需包含以下部分（部分可选）：</p>
<pre class="{plaintext}"><code>&lt;类型&gt;[可选范围]: &lt;简短描述&gt;

[可选正文]

[可选脚注]</code></pre>
<section id="类型type" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="类型type">1. 类型（type）</h4>
<p>类型是提交的核心部分，表示提交的目的和性质。常见的类型包括：</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>类型</th>
<th>用途</th>
<th>对应 SemVer</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>feat</td>
<td>新增功能</td>
<td>MINOR（次版本）</td>
</tr>
<tr class="even">
<td>fix</td>
<td>修复 Bug</td>
<td>PATCH（补丁版本）</td>
</tr>
<tr class="odd">
<td>BREAKING CHANGE</td>
<td>破坏性变更（如 API 不兼容）</td>
<td>MAJOR（主版本）</td>
</tr>
<tr class="even">
<td>docs</td>
<td>文档更新</td>
<td>-（不影响版本）</td>
</tr>
<tr class="odd">
<td>style</td>
<td>代码格式调整（如缩进、空格）</td>
<td>-（不影响版本）</td>
</tr>
<tr class="even">
<td>refactor</td>
<td>代码重构（不新增功能或修复 Bug）</td>
<td>-（不影响版本）</td>
</tr>
</tbody>
</table>
<p>其他推荐类型有：build（构建系统）、ci（持续集成）、test（测试用例）等。</p>
<p>这里我们插一句，对于版本号的控制，可以参考以下规则：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/7d015e4e53587fc795168c70981bbfb.jpg" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">版本号控制</figcaption>
</figure>
</div>
</section>
<section id="可选范围scope" class="level4">
<h4 class="anchored" data-anchor-id="可选范围scope">2. 可选范围（scope）</h4>
<p>可选范围用于指定提交影响的模块或功能区域。它可以是一个具体的模块名、文件名或其他标识符。范围有助于快速定位问题和理解变更的上下文。</p>
<p>例如：<code>feat(auth): add JWT authentication</code> 表示在 <code>auth</code> 模块中新增了 JWT 身份验证功能。</p>
</section>
<section id="简短描述subject" class="level4">
<h4 class="anchored" data-anchor-id="简短描述subject">3. 简短描述（subject）</h4>
<p>简短描述是对提交内容的简要说明，通常不超过 72 个字符。它应以小写字母开头，并使用祈使句（imperative mood）来描述变更的目的。</p>
<p>例如：<code>fix: correct typo in README</code> 表示修复了 README 文件中的拼写错误。</p>
</section>
<section id="可选正文body" class="level4">
<h4 class="anchored" data-anchor-id="可选正文body">4. 可选正文（body）</h4>
<p>可选正文用于详细描述提交的内容和背景信息。它可以包含多行文本，通常用于解释为什么要进行此更改、如何实现等。正文应与简短描述之间空一行。</p>
<p>例如：</p>
<pre class="{plaintext}"><code>feat: 支持多语言切换  
  
新增中英文切换按钮，默认跟随系统语言。  
依赖第三方库 `i18n-utils`，需运行 `npm install` 安装。  </code></pre>
</section>
<section id="可选脚注footer" class="level4">
<h4 class="anchored" data-anchor-id="可选脚注footer">5. 可选脚注（footer）</h4>
<p>可选脚注用于记录与提交相关的其他信息，如关联的任务、问题或破坏性变更。它通常以 <code>BREAKING CHANGE:</code> 开头，后跟详细说明。脚注也可以包含引用的 issue 编号或链接。</p>
<p>例如：</p>
<pre class="{plaintext}"><code>BREAKING CHANGE:
- 更新了 API 接口，删除了 `getUser` 方法，改为 `fetchUser`。
- 需要更新客户端代码以适应新接口。
Closes #123
Review by @zhenlu</code></pre>
</section>
</section>
<section id="为什么推荐使用" class="level3">
<h3 class="anchored" data-anchor-id="为什么推荐使用">为什么推荐使用</h3>
<section id="自动化工具支持" class="level4">
<h4 class="anchored" data-anchor-id="自动化工具支持">1. 自动化工具支持</h4>
<ul>
<li><p>生成 CHANGELOG：工具（如 standard-version）可自动从提交历史提取内容生成变更日志。</p></li>
<li><p>语义化版本控制：根据提交类型自动升级版本号（feat → MINOR，fix → PATCH，BREAKING CHANGE → MAJOR）。</p></li>
<li><p>代码审查加速：通过类型快速定位提交意图，减少沟通成本。</p></li>
</ul>
</section>
<section id="团队协作效率提升" class="level4">
<h4 class="anchored" data-anchor-id="团队协作效率提升">2. 团队协作效率提升</h4>
<ul>
<li><p>统一提交风格：团队成员遵循相同的提交规范，减少沟通障碍，避免风格混乱。</p></li>
<li><p>清晰的历史记录：通过结构化的提交信息，团队成员可以快速了解项目进展和变更。</p></li>
<li><p>问题追溯：通过关联的 issue 编号和脚注，快速定位问题和变更历史。</p></li>
</ul>
</section>
<section id="开源项目友好性" class="level4">
<h4 class="anchored" data-anchor-id="开源项目友好性">3. 开源项目友好性</h4>
<ul>
<li><p>开源项目通常需要清晰的文档和变更记录，Conventional Commits 规范可以帮助维护者和用户快速了解项目的演变。</p></li>
<li><p>社区贡献者可以通过遵循规范的提交信息，轻松参与项目开发，降低贡献门槛。</p></li>
</ul>
</section>
</section>
<section id="takeaway" class="level3">
<h3 class="anchored" data-anchor-id="takeaway">Takeaway</h3>
<p>Conventional Commits 不仅是技术规范，更是团队协作的沟通协议。通过标准化提交信息，它能将 Git 日志从杂乱的历史记录升级为项目演进的清晰路线图。无论是个人项目还是大型团队，尽早引入这一规范都将显著提升开发效率和代码质量。</p>


<!-- -->

</section>

 ]]></description>
  <category>git</category>
  <category>git-commit</category>
  <category>conventional-commits</category>
  <category>git-flow</category>
  <guid>https://leslie-lu.github.io/blog/2025/04/17/Conventional_Commits/</guid>
  <pubDate>Thu, 17 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250417174052.png" medium="image" type="image/png"/>
</item>
<item>
  <title>大模型翻译个人博客post</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/04/16/llm_translator/</link>
  <description><![CDATA[ 





<section id="背景" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="背景">背景</h3>
<p>前一段时间，大家想必已经在小红书上感受到了大模型双语翻译的魅力，应该来讲，信达雅的程度已经相当高了。对于一些个人技术博客网站而言，依靠大模型中英文翻译的能力，我们已经可以实现快速发布中英文双语版本的博客文章。</p>
<p>受到 <code>Rico00121/hugo-translator</code> 项目的启发（地址：https://github.com/Rico00121/hugo-translator），我们利用 python 和 deepseek 对自己依靠 quarto 构建的个人网站上的文章进行了全部的自动翻译，下面是翻译的效果：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/aa.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">中英本双语版本对比</figcaption>
</figure>
</div>
</section>
<section id="实现" class="level3">
<h3 class="anchored" data-anchor-id="实现">实现</h3>
<section id="api-接入" class="level4">
<h4 class="anchored" data-anchor-id="api-接入">API 接入</h4>
<p>首先是接入硅基流动上可选的模型，我们没有使用 deepseek 官网的 api：</p>
<div id="4dfe62d8" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load the env file</span></span>
<span id="cb1-2">    load_dotenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Python/materials/.env'</span>, override<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> os.path.exists(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Python/materials/.env'</span>):</span>
<span id="cb1-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'The file .env does not exist.'</span>)</span>
<span id="cb1-5">        sys.exit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OPENAI_API_KEY'</span>):</span>
<span id="cb1-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'The OPENAI_API_KEY is not set.'</span>)</span>
<span id="cb1-8">        sys.exit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-9">    </span>
<span id="cb1-10">    client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> llm_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'openai'</span>:</span>
<span id="cb1-12">        client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> openai.OpenAI(api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OPENAI_API_KEY'</span>))</span>
<span id="cb1-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Using OpenAI to translate the post...'</span>)</span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-15">        client<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> openai.OpenAI(</span>
<span id="cb1-16">            api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OPENAI_API_KEY'</span>),</span>
<span id="cb1-17">            base_url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DEEPSEEK_API_URL'</span>)</span>
<span id="cb1-18">        )</span>
<span id="cb1-19">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Using DeepSeek to translate the post...'</span>)</span></code></pre></div>
</div>
<p>这里，提醒大家，注意通过 <code>.env</code> 文件管理 API 密钥，避免 hard code 造成泄露风险。关于硅基流动的 API 使用，大家可以参考他们的官方文档或者我们之前的这篇<a href="https://mp.weixin.qq.com/s/aVknGB4hCdEhYxEseV1YnQ">文章</a>。</p>
</section>
<section id="读取-qmd-文件" class="level4">
<h4 class="anchored" data-anchor-id="读取-qmd-文件">读取 qmd 文件</h4>
<p>对于 qmd 文件，我们需要识别应用于我们网页的 metadata，对于这部分信息，我们翻译了 title 并回写，以保证翻译后生成的 _en.qmd 文件可直接用于静态网站生成，无需手动调整。代码如下：</p>
<div id="8a6648a3" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the QMD file</span></span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-3">    post <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> frontmatter.load(f)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the title and content of the post</span></span>
<span id="cb2-6">title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> post.metadata.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Untitled'</span>)</span>
<span id="cb2-7">content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> post.content</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Translate the title and content</span></span>
<span id="cb2-10">en_title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> translate_title(title, llm_type)</span>
<span id="cb2-11">en_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> translate_text(content, llm_type)</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare metadata for the translated post</span></span>
<span id="cb2-14">en_metadata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> post.metadata.copy()</span>
<span id="cb2-15">en_metadata[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> en_title</span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new post with translated content</span></span>
<span id="cb2-18">en_post <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> frontmatter.Post(content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>en_content, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>en_metadata)</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the translated post to a new file</span></span>
<span id="cb2-21">en_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> file_path.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.qmd'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_en.qmd'</span>)</span>
<span id="cb2-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(en_file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-23">    f.write(frontmatter.dumps(en_post))</span>
<span id="cb2-24"></span>
<span id="cb2-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Successfully translated the post to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>en_file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
</div>
</section>
<section id="翻译函数" class="level4">
<h4 class="anchored" data-anchor-id="翻译函数">翻译函数</h4>
<p>再次感谢 <code>Rico00121/hugo-translator</code> 项目，由于原项目在翻译时，对于 code 的支持并不好，我们在原有的基础上，修改了大模型的 prompt，增加了对代码的翻译支持：要求翻译时，保留代码的原有格式和内容，不要破坏 Markdown 格式。</p>
<div id="4cc82c85" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> translate_text(text, llm_type):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    translate text to english using llm</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-5">    total_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text)</span>
<span id="cb3-6">    translated_text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span></span>
<span id="cb3-7"></span>
<span id="cb3-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Start translating the main text...'</span>)</span>
<span id="cb3-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># translate in chunks to show progress</span></span>
<span id="cb3-10">    chunk_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, total_length, chunk_size):</span>
<span id="cb3-12">        chunk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text[i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>chunk_size]</span>
<span id="cb3-13">        translated_text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> get_translation(llm_type,</span>
<span id="cb3-14">                                          [</span>
<span id="cb3-15">                                              {</span>
<span id="cb3-16">                                                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'role'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'system'</span>, </span>
<span id="cb3-17">                                                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'You are a professional translator. '</span></span>
<span id="cb3-18">                                                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Translate the following Chinese text into English. '</span></span>
<span id="cb3-19">                                                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Strictly preserve the original text format in qmd file, including line breaks, indentation, and any special characters for inserting codes. '</span></span>
<span id="cb3-20">                                                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Do not add, remove, or modify any content. '</span></span>
<span id="cb3-21">                                                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Only return the translated text without any additional explanation, comments, or extra content.'</span></span>
<span id="cb3-22">                                              },</span>
<span id="cb3-23">                                              {</span>
<span id="cb3-24">                                                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'role'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user'</span>, </span>
<span id="cb3-25">                                                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'content'</span>: chunk</span>
<span id="cb3-26">                                              }</span>
<span id="cb3-27">                                          ]</span>
<span id="cb3-28">                                         )</span>
<span id="cb3-29">        progress<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>((i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>chunk_size)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>total_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb3-30">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Tranlation progress: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>progress<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: .2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%'</span>)</span>
<span id="cb3-31">    </span>
<span id="cb3-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> translated_text</span></code></pre></div>
</div>
<p>这里我们同样采取了分块翻译的方式，避免大模型的 token 长度限制。最终效果前面已经展示。最终输出的格式完美的英文 <code>.qmd</code> 文件，我们可以直接部署到 GitHub Pages。完整 python 代码已经放进了<a href="https://mp.weixin.qq.com/s/4IR-KMAZ-q2VbI0Fz4fYRg">星球</a>里。</p>
</section>
</section>
<section id="takeaway" class="level3">
<h3 class="anchored" data-anchor-id="takeaway">Takeaway</h3>
<p>基于这种方式，对于需要中英文双语的 API 文档、个人技术教程、博客论文等，我们可以实现快速的中英文双语版本的生成。对于一些需要定期更新的内容，我们可以通过定时任务，自动化的实现中英文双语版本的更新。</p>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>llm</category>
  <category>translator</category>
  <category>qmd</category>
  <category>large-language-model</category>
  <guid>https://leslie-lu.github.io/blog/2025/04/16/llm_translator/</guid>
  <pubDate>Wed, 16 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/aa.png" medium="image" type="image/png"/>
</item>
<item>
  <title>PE0003: Largest Prime Factor</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/04/09/pe0003/</link>
  <description><![CDATA[ 





<section id="题目" class="level3">
<h3 class="anchored" data-anchor-id="题目">题目</h3>
<p>The prime factors of 13195 are 5, 7, 13, and 29. What is the largest prime factor of the number 600851475143?</p>
</section>
<section id="问题描述" class="level3">
<h3 class="anchored" data-anchor-id="问题描述">问题描述</h3>
<p>题目要求：给定一个合数（如600851475143），找到它的最大质因数。 示例：13195的质因数为5、7、13、29，最大质因数是29。</p>
</section>
<section id="解答" class="level3">
<h3 class="anchored" data-anchor-id="解答">解答</h3>
<section id="方法一基础试除法适合小数据" class="level4">
<h4 class="anchored" data-anchor-id="方法一基础试除法适合小数据">方法一：基础试除法（适合小数据）</h4>
<p>思路：从2开始逐个试除，记录能整除的最大质数。若剩余数&gt;1，则其本身为质数，直接作为最大质因数。</p>
<div id="96847596" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> find_largest_prime_factor(n):</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"输入必须大于1"</span></span>
<span id="cb1-5">    largest_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, math.isqrt(n) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 只需检查到sqrt(n)</span></span>
<span id="cb1-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 完全除尽当前质因数</span></span>
<span id="cb1-8">            largest_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i</span>
<span id="cb1-9">            n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//=</span> i</span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 剩余n本身是质数</span></span>
<span id="cb1-11">        largest_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n</span>
<span id="cb1-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> largest_factor</span>
<span id="cb1-13"></span>
<span id="cb1-14">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_largest_prime_factor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600851475143</span>)</span>
<span id="cb1-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 输出：6857</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>6857</code></pre>
</div>
</div>
<p>优点：逻辑简单，适合理解质因数分解原理。 缺点：未优化时需遍历所有数，大数效率低。</p>
</section>
<section id="优化试除法效率翻倍" class="level4">
<h4 class="anchored" data-anchor-id="优化试除法效率翻倍">优化试除法（效率翻倍）</h4>
<p>核心优化：单独处理2，2是唯一的偶质数，先除尽2，后续只需检查奇数。</p>
<div id="03438518" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> optimized_largest_prime_factor(n):</span>
<span id="cb3-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-3">        largest_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-5">            n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-7">        largest_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-8">    </span>
<span id="cb3-9">    factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-10">    max_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.isqrt(n)</span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> max_factor:</span>
<span id="cb3-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-13">            largest_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> factor</span>
<span id="cb3-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-15">                n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//=</span> factor</span>
<span id="cb3-16">            max_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.isqrt(n)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 更新平方根上限</span></span>
<span id="cb3-17">        factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 只检查奇数</span></span>
<span id="cb3-18">    </span>
<span id="cb3-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb3-20">        largest_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n</span>
<span id="cb3-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> largest_factor</span>
<span id="cb3-22"></span>
<span id="cb3-23">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optimized_largest_prime_factor(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600851475143</span>)</span>
<span id="cb3-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 输出：6857</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>6857</code></pre>
</div>
</div>
<p>优点：时间复杂度降低50%，适合千万级数据。</p>
</section>
<section id="方法三numpy" class="level4">
<h4 class="anchored" data-anchor-id="方法三numpy">方法三：numpy</h4>
<p>思路：利用 numpy的向量化运算，快速筛选质因数。</p>
<div id="ce1aa1ab" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> s3(n):</span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input must be greater than 1"</span></span>
<span id="cb5-4">    ranges<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, math.isqrt(n) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb5-5">    factors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ranges[n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> ranges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb5-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>(factors[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> factors[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb5-8">            factors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> factors[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb5-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb5-11"></span>
<span id="cb5-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(factors[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb5-13"></span>
<span id="cb5-14">n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600_851_475_143</span></span>
<span id="cb5-15">s3(n)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>6857</code></pre>
</div>
</div>
</section>
</section>
<section id="答案" class="level3">
<h3 class="anchored" data-anchor-id="答案">答案</h3>
<p>答案为6857。</p>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>project euler</category>
  <category>algorithm</category>
  <category>math</category>
  <category>programming</category>
  <category>prime</category>
  <category>factor</category>
  <guid>https://leslie-lu.github.io/blog/2025/04/09/pe0003/</guid>
  <pubDate>Wed, 09 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250409003655.png" medium="image" type="image/png"/>
</item>
<item>
  <title>如何科学选择DNAnexus平台的计算实例</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/04/04/dnanexus_instance/</link>
  <description><![CDATA[ 





<section id="引言" class="level3">
<h3 class="anchored" data-anchor-id="引言">引言</h3>
<p>在生物信息学领域，DNAnexus 平台以其强大的数据管理和分析能力<code>不得不</code>成为许多研究者的首选工具。</p>
<p>DNAnexus平台为用户提供了丰富的云计算资源，适用于从轻量级数据处理到高性能基因组分析的各种场景。实例类型作为决定计算资源的核心配置，直接影响作业的运行效率和成本。选择不当可能导致作业失败、运行时间过长或资源浪费。因此，了解实例类型的特性并根据需求进行选择，是每个DNAnexus用户都需要掌握的技能。要高效完成分析任务，选择合适的实例类型（Instance Type）至关重要。</p>
<p>这里，我们将提供一份实用的实例选择指南，帮助大家在性能与成本之间找到最佳平衡。</p>
</section>
<section id="实例类型概述" class="level3">
<h3 class="anchored" data-anchor-id="实例类型概述">实例类型概述</h3>
<p>DNAnexus平台上的实例类型是虚拟机配置的集合，包含内存（Memory）、存储（Storage）和核心数（Cores）等关键参数。实例名称通常遵循特定规则，例如 mem1_ssd1_v2_x16，其含义如下：</p>
<ul>
<li><p>mem：内存级别（mem1、mem2、mem3、mem4等，数字越大内存越多）</p></li>
<li><p>ssd/hdd：存储类型（SSD为固态硬盘，速度快，适合高频读写；HDD为机械硬盘，成本低适合冷数据）</p></li>
<li><p>v2：实例版本（通常为升级版本）</p></li>
<li><p>x16：核心数（例如16核），并行计算能力直接影响任务速度</p></li>
</ul>
<p>此外，部分实例还包含GPU支持（如 gpu1 或 gpu4），适用于深度学习模型训练任务。</p>
</section>
<section id="如何科学选择实例类型" class="level3">
<h3 class="anchored" data-anchor-id="如何科学选择实例类型">如何科学选择实例类型</h3>
<p>选择实例类型时，需要综合考虑任务需求和预算。以下是几个关键点值得大家注意：</p>
<section id="数据大小" class="level4">
<h4 class="anchored" data-anchor-id="数据大小">1. 数据大小</h4>
<p>大数据集需要更大的存储空间。如果处理的是TB级基因组数据，选择存储容量高的实例。</p>
<p>提示：HDD实例通常存储容量更大但速度较慢，适合存储密集型任务；SSD实例则更适合需要快速读写的场景。</p>
</section>
<section id="计算密集度" class="level4">
<h4 class="anchored" data-anchor-id="计算密集度">2. 计算密集度</h4>
<p>计算密集型任务（如基因组组装或变异检测）需要更多核心。选择高核心数的实例。</p>
<p>提示：核心数越多，处理速度越快，但成本也随之上升。</p>
</section>
<section id="内存需求" class="level4">
<h4 class="anchored" data-anchor-id="内存需求">3. 内存需求</h4>
<p>内存密集型工具（如某些比对或组装软件）需要充足的内存支持。优先选择高内存实例，避免因内存不足导致作业失败。</p>
<p>提示：日志中若提示 <code>Out of Memory</code>，说明当前内存不足。</p>
</section>
<section id="成本效益" class="level4">
<h4 class="anchored" data-anchor-id="成本效益">4. 成本效益</h4>
<p>在满足性能的前提下控制成本。对于中小型任务，避免过度配置，选择刚好满足需求的实例类型。</p>
</section>
<section id="调试日志的经验" class="level4">
<h4 class="anchored" data-anchor-id="调试日志的经验">5. 调试日志的经验</h4>
<p>调试日志是优化实例选择的利器。我们建议：</p>
<ul>
<li><p>监控资源使用：检查CPU、内存和存储的实际使用率。如果CPU长期满载，说明计算资源不足，可增加核心数；若内存接近上限，日志中出现 <code>Killed</code> 或 <code>Out of Memory</code> 时，需提升内存；若存储接近上限，日志中若出现 <code>Low scratch storage space</code>，则需增加存储空间。</p></li>
<li><p>识别瓶颈：日志显示I/O等待时间长时、大量磁盘读写等待时间，优先选择SSD实例，提升I/O性能。</p></li>
<li><p>迭代优化：通过日志分析实际资源使用情况，避免选择过于强大的实例。例如，若任务只用了50%内存，可尝试更低配置。</p></li>
</ul>
</section>
</section>
<section id="实例类型列表" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="实例类型列表">实例类型列表</h3>
<p>我们整理了一份 DNAnexus 平台的部分实例类型及其规格和价格，大家公众号后台回复<strong>instance</strong>即可获取表格链接。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250404211402.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">DNAnexus</figcaption>
</figure>
</div>


<!-- -->

</section>

 ]]></description>
  <category>wgs</category>
  <category>genomics</category>
  <category>analysis</category>
  <category>dnanexus</category>
  <category>instance</category>
  <guid>https://leslie-lu.github.io/blog/2025/04/04/dnanexus_instance/</guid>
  <pubDate>Fri, 04 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250404212101.png" medium="image" type="image/png"/>
</item>
<item>
  <title>WGS: GATK vs GraphTyper vs DRAGEN</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/04/02/dragen_wgs/</link>
  <description><![CDATA[ 





<section id="引言" class="level3">
<h3 class="anchored" data-anchor-id="引言">引言</h3>
<p>随着高通量测序技术的飞速发展，全基因组测序（WGS）已成为精准医学和基因组学研究的重要支柱。然而，WGS 数据分析是一项复杂任务，尤其是变异检测环节，需要兼顾准确性、速度和易用性。GATK、GraphTyper 和 DRAGEN 正是这一领域的代表性工具，它们通过不同的技术手段，满足了不同的分析需求。</p>
<p>这里我们将深入探讨这三种工具的区别与联系，帮助更好地理解它们在 WGS 数据分析中的应用。</p>
</section>
<section id="gatk业界标准" class="level3">
<h3 class="anchored" data-anchor-id="gatk业界标准">GATK：业界标准</h3>
<p>GATK（Genome Analysis Toolkit）是由 Broad Institute 开发的一套开源工具集，专为高通量测序数据分析设计。它在变异检测方面表现尤为突出，能够精准识别单核苷酸变异（SNV）和插入缺失（Indel）。作为 WGS 数据分析的业界标准，GATK 被广泛应用于人类基因组研究。GATK 提供从原始数据（BAM）到变异结果（VCF）的全流程解决方案，以严谨的<code>最佳实践</code>著称，适合需要高度定制化分析的研究项目，尤其是在追求准确性和灵活性时。其通过多步骤流程（包括 reads 比对、变异调用和过滤）确保结果可靠。</p>
</section>
<section id="graphtyper基于图的变异检测" class="level3">
<h3 class="anchored" data-anchor-id="graphtyper基于图的变异检测">GraphTyper：基于图的变异检测</h3>
<p>GraphTyper 是一种创新的变异检测工具，采用变异感知的基因组图（variation-aware genome graph）技术。与传统基于线性参考基因组的方法不同，它通过构建包含变异信息的图结构来比对测序 reads，从而减少参考等位基因偏倚。GraphTyper 特别适用于基因组复杂区域的变异检测，或需要提升检测灵敏度的研究，尤其在 SNV 和 Indel 检测中表现出色，因而适合处理大规模 WGS 数据，广泛用于群体遗传学研究。</p>
</section>
<section id="dragen硬件加速的快速分析平台" class="level3">
<h3 class="anchored" data-anchor-id="dragen硬件加速的快速分析平台">DRAGEN：硬件加速的快速分析平台</h3>
<p>DRAGEN（Dynamic Read Analysis for GENomics）是 Illumina 推出的硬件加速平台，利用 FPGA（现场可编程门阵列）技术实现超快速数据处理。它能够从原始 reads 到变异检测的全流程分析，效率远超传统软件工具。对于 30X 覆盖度的 WGS 数据，DRAGEN可在约30分钟内完成分析，极大地缩短了数据处理时间。除了 SNV 和 Indel，还能检测短串联重复（STR）、结构变异（SV）和拷贝数变异（CNV）。</p>


<!-- -->

</section>

 ]]></description>
  <category>wgs</category>
  <category>genomics</category>
  <category>analysis</category>
  <category>gatk</category>
  <category>graph-typer</category>
  <category>dragen</category>
  <guid>https://leslie-lu.github.io/blog/2025/04/02/dragen_wgs/</guid>
  <pubDate>Wed, 02 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250402182406.png" medium="image" type="image/png"/>
</item>
<item>
  <title>PE0002: Even Fibonacci Numbers</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/04/01/pe0002/</link>
  <description><![CDATA[ 





<section id="题目" class="level3">
<h3 class="anchored" data-anchor-id="题目">题目</h3>
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
<div style="text-align:center;">
<p>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …</p>
</div>
<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>
</section>
<section id="问题描述" class="level3">
<h3 class="anchored" data-anchor-id="问题描述">问题描述</h3>
<p>题目要求：找出斐波那契数列中不超过四百万的所有偶数项，并计算它们的和。 斐波那契数列以1和2开始，后续项由前两项相加生成，例如：1, 2, 3, 5, 8, 13, 21, 34… 目标：求所有偶数项（如2、8、34等）的总和。</p>
</section>
<section id="解答" class="level3">
<h3 class="anchored" data-anchor-id="解答">解答</h3>
<section id="方法一直接遍历法新手友好" class="level4">
<h4 class="anchored" data-anchor-id="方法一直接遍历法新手友好">方法一：直接遍历法（新手友好）</h4>
<p>思路：逐个生成斐波那契数，检查是否为偶数，累加符合条件的项。</p>
<div id="b2209860" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sum_of_even_fibonacci(limit) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Returns the sum of even Fibonacci numbers not exceeding the limit."""</span></span>
<span id="cb1-3">    a, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-4">    total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> limit:</span>
<span id="cb1-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-7">            total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> a</span>
<span id="cb1-8">        a, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b, a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>b</span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> total</span>
<span id="cb1-10"></span>
<span id="cb1-11">sum_of_even_fibonacci(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4_000_000</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>4613732</code></pre>
</div>
</div>
<p>优点：逻辑简单，适合理解基础循环和条件判断。 缺点：需检查每个数是否为偶数，效率较低（时间复杂度 <code>O(n)</code>）。</p>
</section>
<section id="方法二生成器-numpy效率升级" class="level4">
<h4 class="anchored" data-anchor-id="方法二生成器-numpy效率升级">方法二：生成器 + NumPy（效率升级）</h4>
<p>思路：用生成器无限生成斐波那契数，结合NumPy数组快速筛选偶数。</p>
<div id="da37112f" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># solution using a more efficient method</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fibonacci():</span>
<span id="cb3-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Generator for Fibonacci numbers"""</span></span>
<span id="cb3-4">    a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb3-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> b</span>
<span id="cb3-7">        a, b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b, a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>b</span>
<span id="cb3-8"></span>
<span id="cb3-9">series<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fibonacci():</span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4_000_000</span>:</span>
<span id="cb3-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb3-13">    series.append(num)</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># series</span></span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-18">arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(series)</span>
<span id="cb3-19">arr[arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sum of even Fibonacci numbers</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>np.int64(4613732)</code></pre>
</div>
</div>
<p>优点：生成器减少内存占用，NumPy向量化操作加速计算。 缺点：仍需生成全部数列，大范围数据仍不够高效。</p>
</section>
<section id="方法三数学优化法" class="level4">
<h4 class="anchored" data-anchor-id="方法三数学优化法">方法三：数学优化法</h4>
<p>核心发现：斐波那契数列中，每第三项为偶数（如2, 8, 34, 144…）。 利用此规律，只需计算这些特定项的和，跳过无关项，效率飙升。</p>
<div id="4aa1218f" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> SumThirdValue(limit) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Every third Fibonacci number is even.</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-5">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> limit:</span>
<span id="cb5-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>y)</span>
<span id="cb5-9">        x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y</span>
<span id="cb5-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span></span>
<span id="cb5-11"></span>
<span id="cb5-12">SumThirdValue(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4_000_000</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>4613732</code></pre>
</div>
</div>
<p>优点：时间复杂度降至 <code>O(log n)</code>，四千万甚至十亿级数据也能瞬间完成。</p>
</section>
</section>
<section id="答案" class="level3">
<h3 class="anchored" data-anchor-id="答案">答案</h3>
<p>答案为4613732。</p>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>project euler</category>
  <category>algorithm</category>
  <category>math</category>
  <category>programming</category>
  <category>fibonacci</category>
  <guid>https://leslie-lu.github.io/blog/2025/04/01/pe0002/</guid>
  <pubDate>Tue, 01 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250401160955.png" medium="image" type="image/png"/>
</item>
<item>
  <title>PE0001: Multiples of 3 and 5</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/03/31/pe0001/</link>
  <description><![CDATA[ 





<section id="题目" class="level3">
<h3 class="anchored" data-anchor-id="题目">题目</h3>
<p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6, 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.</p>
</section>
<section id="问题描述" class="level3">
<h3 class="anchored" data-anchor-id="问题描述">问题描述</h3>
<p>题目要求：找出所有小于1000的自然数中，3或5的倍数的总和。 例如，小于10的符合条件的数有3、5、6、9，它们的和为23。</p>
</section>
<section id="解答" class="level3">
<h3 class="anchored" data-anchor-id="解答">解答</h3>
<section id="暴力遍历法适合小数据" class="level4">
<h4 class="anchored" data-anchor-id="暴力遍历法适合小数据">暴力遍历法（适合小数据）</h4>
<p>思路：遍历1到999的所有数，逐个检查是否为3或5的倍数，累加符合条件的数。</p>
<div id="1cb74075" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution to Project Euler Problem 1</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sum_of_multiples(limit):</span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(limit) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sum_of_multiples(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-6">result</span>
<span id="cb1-7">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sum_of_multiples(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb1-8">result</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>233168</code></pre>
</div>
</div>
<p>优点：简单直观，适合编程新手。 缺点：当数据量极大（如十亿）时，遍历耗时极长。</p>
</section>
<section id="方法二数学公式法" class="level4">
<h4 class="anchored" data-anchor-id="方法二数学公式法">方法二：数学公式法</h4>
<p>思路：利用等差数列求和公式，避免重复计算。分别计算3、5的倍数总和，减去15的倍数总和（因为15的倍数被重复计算了两次）。</p>
<div id="352bb420" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># solution using a more efficient method</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> SumDivisibleBy(n, limit) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb3-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns the sum of all numbers less than limit that are divisible by n.</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the largest number less than limit that is divisible by n</span></span>
<span id="cb3-7">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (limit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> n</span>
<span id="cb3-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the formula for the sum of an arithmetic series to calculate the sum</span></span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-10"></span>
<span id="cb3-11">SumDivisibleBy(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> SumDivisibleBy(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> SumDivisibleBy(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb3-12">SumDivisibleBy(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> SumDivisibleBy(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> SumDivisibleBy(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>233168</code></pre>
</div>
</div>
<p>优点：时间复杂度仅为 <code>O(1)</code>，十亿级数据也能秒出结果。</p>
</section>
</section>
<section id="答案" class="level3">
<h3 class="anchored" data-anchor-id="答案">答案</h3>
<p>答案为233168。</p>


<!-- -->

</section>

 ]]></description>
  <category>python</category>
  <category>project euler</category>
  <category>algorithm</category>
  <category>math</category>
  <category>programming</category>
  <guid>https://leslie-lu.github.io/blog/2025/03/31/pe0001/</guid>
  <pubDate>Mon, 31 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250331154617.png" medium="image" type="image/png"/>
</item>
<item>
  <title>NumPy 广播机制详解</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/03/25/broadcasting_in_numpy/</link>
  <description><![CDATA[ 





<section id="引言" class="level3">
<h3 class="anchored" data-anchor-id="引言">引言</h3>
<p>这里我们介绍 NumPy 中的广播机制，这一功能是 NumPy 库的核心特性之一，特别适用于数据科学和数值计算领域，其允许不同形状的数组进行算术操作，显著简化代码并提升计算效率。</p>
</section>
<section id="背景与定义" class="level3">
<h3 class="anchored" data-anchor-id="背景与定义">背景与定义</h3>
<p>NumPy 是 Python 中用于高效数组操作的库，广泛应用于科学计算、机器学习和数据分析。广播机制是指 NumPy 在算术操作中处理不同形状数组的能力，通过<strong>扩展</strong>较小数组的维度，使其与较大数组匹配，从而进行逐元素操作。</p>
<p>例如，将标量 2 加到数组 [1, 2, 3] 上，结果为 [3, 4, 5]，标量 2 被概念上扩展为 [2, 2, 2]。这种机制不仅节省内存（不实际复制数据），还避免了手动循环，显著提高了计算效率，尤其在处理大型数据集时。</p>
</section>
<section id="广播规则详解" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="广播规则详解">广播规则详解</h3>
<p>广播的实现依赖于以下规则，确保数组形状兼容：</p>
<ul>
<li><p>维度对齐：比较两个数组的形状，从右向左（尾部维度开始）。如果维度数不同，较小数组会在左侧补齐维度 1。例如，形状 (3,) 的数组可视为 (1, 3)。</p></li>
<li><p>形状兼容性：如果对应维度大小相等，直接操作。如果一个维度为 1，NumPy 会<strong>拉伸</strong>该维度，使其匹配另一个维度的大小。例如，形状 (1, 3) 的数组与 (2, 3) 相加，前者会被重复为 (2, 3)。如果对应维度既不等也不为 1，操作失败，抛出 ValueError，提示 <code>operands could not be broadcast together</code>。</p></li>
</ul>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/broadcasting_2.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">broadcasting</figcaption>
</figure>
</div>
<ul>
<li>结果形状：广播后的结果形状取每个维度的最大值，缺失维度视为 1。</li>
</ul>
<p>例如：数组 A 形状 (2, 3)，数组 B 形状 (3,)：B 被视为 (1, 3)，然后广播为 (2, 3)，操作可进行。数组 C 形状 (2, 3)，数组 D 形状 (2, 2)：比较最后维度 3 和 2，不兼容，抛出错误。这些规则确保操作的正确性，但需要大家理解形状匹配的逻辑。</p>
<p>以下是几个具体例子，展示广播机制的应用：</p>
<div id="f8871eab" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2">arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb1-3">scalar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-4">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> scalar</span>
<span id="cb1-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[3 4 5]</code></pre>
</div>
</div>
<p>这里，标量 2 被广播为 [2, 2, 2]，与 [1, 2, 3] 逐元素相加。效率高，因为不实际创建新数组。</p>
<div id="7a39fa00" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">arr1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb3-2">                 [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]])</span>
<span id="cb3-3">arr2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>])</span>
<span id="cb3-4">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arr1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> arr2</span>
<span id="cb3-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[11 22 33]
 [14 25 36]]</code></pre>
</div>
</div>
<p>arr1 形状 (2, 3)，arr2 形状 (3,)。arr2 被视为 (1, 3)，然后广播为 (2, 3)，即 [[10, 20, 30], [10, 20, 30]]。结果为逐元素相加，符合预期。</p>
<p>在图像处理中，假设有形状 (2, 2, 3) 的图像数组（高度、宽度、通道），与形状 (3,) 的缩放向量：</p>
<div id="6dcd0042" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.9</span>],</span>
<span id="cb5-2">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">52.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">23.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">36.5</span>]],</span>
<span id="cb5-3">                  [[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">55.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">31.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">23.9</span>],</span>
<span id="cb5-4">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">14.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.9</span>]]])</span>
<span id="cb5-5">scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>])</span>
<span id="cb5-6">scaled_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scale</span></code></pre></div>
</div>
<p>scale 被广播为 (2, 2, 3)，每个像素的通道值分别乘以 [3, 3, 8]。这种操作在数据标准化或特征缩放中非常常见。</p>
</section>
<section id="常见陷阱与优化建议" class="level3">
<h3 class="anchored" data-anchor-id="常见陷阱与优化建议">常见陷阱与优化建议</h3>
<p>尽管广播强大，但有以下常见问题需要注意：</p>
<ul>
<li><p>形状不匹配：如果数组形状无法广播，NumPy 会抛出 ValueError。建议先打印形状（如 print(arr.shape)）确认。</p></li>
<li><p>意外广播：一维数组与二维数组相加，可能按行或按列广播，需明确意图。例如，np.array([1,2]) + np.array([[3,4],[5,6]]) 需要注意广播方向。</p></li>
</ul>
<div id="71f21e75" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb6-2">b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]])</span>
<span id="cb6-3">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb6-4">a[:, np.newaxis] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>array([[4, 5],
       [7, 8]])</code></pre>
</div>
</div>
<ul>
<li>性能问题：对于大型数组，广播可能创建临时数组，增加内存使用。在内存受限情况下，考虑使用循环或显式重塑。</li>
</ul>
<section id="优化建议" class="level4">
<h4 class="anchored" data-anchor-id="优化建议">优化建议：</h4>
<ul>
<li><p>使用 np.newaxis 或 reshape 显式控制维度，例如 arr[:, np.newaxis] 将一维数组转为列向量。</p></li>
<li><p>检查数组形状，确保符合预期。</p></li>
<li><p>对于超大型数据集，评估广播是否会导致内存瓶颈，可能需要替代方案。</p></li>
</ul>


<!-- -->

</section>
</section>

 ]]></description>
  <category>python</category>
  <category>numpy</category>
  <category>broadcasting</category>
  <guid>https://leslie-lu.github.io/blog/2025/03/25/broadcasting_in_numpy/</guid>
  <pubDate>Tue, 25 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/broadcasting_2.png" medium="image" type="image/png"/>
</item>
<item>
  <title>来拿2025年中科院最新分区Excel表</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/03/22/SCI_journal_partitions/</link>
  <description><![CDATA[ 





<p>3 月 20 日，期刊分区表官方正式发布了 2025 年升级版《2025 年中国科学院文献情报中心期刊分区表》。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250321235926.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">期刊分区表官方</figcaption>
</figure>
</div>
<p>我们也是第一时间将最新的中科院分区表医学大类的期刊数据爬出来整理成 Excel 表格，供大家科研投稿参考。</p>
<p>大家公众号后台回复<strong>2025中科院分区</strong>即可获取表格链接。</p>
<p>注意：直接复制回复<code>2025中科院分区</code>这几个字即可，不要打错了哦。</p>


<!-- -->


 ]]></description>
  <category>SCI</category>
  <guid>https://leslie-lu.github.io/blog/2025/03/22/SCI_journal_partitions/</guid>
  <pubDate>Sat, 22 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250321235926.png" medium="image" type="image/png"/>
</item>
<item>
  <title>全基因组测序GWAS vs. 传统GWAS</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/03/11/WGS_GWAS/</link>
  <description><![CDATA[ 





<section id="引言" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="引言">引言</h3>
<p>全基因组关联分析（Genome-Wide Association Study, GWAS）是遗传学领域研究复杂性状和疾病遗传基础的强大工具。传统GWAS主要依赖SNP芯片技术，而随着测序技术的飞速发展，全基因组测序（Whole-Genome Sequencing, WGS）逐渐成为GWAS研究的新选择。</p>
<p>WGS-GWAS相比传统GWAS到底有哪些优势呢？</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250311233414.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Interconnected techniques in genome-wide association studies (GWAS) research<span class="citation" data-cites="RN1159">(Omidiran et al. 2024)</span></figcaption>
</figure>
</div>
<p>图片来自：<a href="https://doi.org/10.1016/j.jbi.2021.103837" title="Interconnected techniques in genome-wide association studies (GWAS) research">Interconnected techniques in genome-wide association studies (GWAS) research</a></p>
</section>
<section id="传统gwas的局限性" class="level3">
<h3 class="anchored" data-anchor-id="传统gwas的局限性">传统GWAS的局限性</h3>
<p>传统GWAS使用SNP芯片技术，虽然在过去取得了巨大成功，但也存在一些明显的局限性：</p>
<ul>
<li><p><strong>变异覆盖有限</strong>：SNP芯片只能检测预先设计的常见变异位点（SNP），无法发现新的或罕见的遗传变异。</p></li>
<li><p><strong>分辨率低</strong>：由于芯片探针数量有限，难以精确定位与疾病相关的具体变异。</p></li>
<li><p><strong>罕见变异检测能力弱</strong>：主要针对常见变异（MAF &gt; 0.05），对罕见变异（MAF &lt; 0.01）的捕捉能力不足。</p></li>
<li><p><strong>因果变异难识别</strong>：通常只能找到与疾病相关的标记SNP，而非真正的致病变异。</p></li>
<li><p><strong>结构变异检测受限</strong>：SNP芯片专注于单核苷酸变异，对插入、删除等结构变异的检测能力较差。</p></li>
<li><p><strong>群体特异性问题</strong>：芯片设计基于特定人群数据，可能不适用于其他群体。</p></li>
<li><p><strong>数据质量依赖技术</strong>：依赖杂交技术，易受杂交误差影响。</p></li>
<li><p><strong>灵活性低</strong>：分析局限于芯片预设的变异类型和范围。</p></li>
</ul>
<p>这些局限性使得传统GWAS在研究复杂疾病的遗传机制时受到一定制约。</p>
</section>
<section id="wgs-gwas的优势" class="level3">
<h3 class="anchored" data-anchor-id="wgs-gwas的优势">WGS-GWAS的优势</h3>
<p>相比之下，使用全基因组测序数据进行GWAS（WGS-GWAS）带来了革命性的改进，以下是其主要优势：</p>
<section id="全面的遗传变异覆盖" class="level4">
<h4 class="anchored" data-anchor-id="全面的遗传变异覆盖">1. <strong>全面的遗传变异覆盖</strong></h4>
<p>WGS能够测定整个基因组的DNA序列，覆盖所有类型的遗传变异，包括SNP、罕见变异以及插入、删除等结构变异。</p>
</section>
<section id="更高的分辨率" class="level4">
<h4 class="anchored" data-anchor-id="更高的分辨率">2. <strong>更高的分辨率</strong></h4>
<p>WGS的分辨率可以精确到单个碱基对级别，帮助研究者更准确地定位与性状或疾病相关的遗传变异，避免传统GWAS中模糊定位的问题。</p>
</section>
<section id="罕见变异的检测能力" class="level4">
<h4 class="anchored" data-anchor-id="罕见变异的检测能力">3. <strong>罕见变异的检测能力</strong></h4>
<p>罕见变异（MAF &lt; 0.01）在复杂疾病中可能扮演重要角色。WGS能够全面捕捉这些低频变异，为研究提供新的突破口。</p>
</section>
<section id="直接识别因果变异" class="level4">
<h4 class="anchored" data-anchor-id="直接识别因果变异">4. <strong>直接识别因果变异</strong></h4>
<p>传统GWAS通常找到的是与疾病关联的标记位点，而WGS可以直接检测潜在的因果变异，提升对疾病机制的理解。</p>
</section>
<section id="结构变异的捕捉" class="level4">
<h4 class="anchored" data-anchor-id="结构变异的捕捉">5. <strong>结构变异的捕捉</strong></h4>
<p>WGS不仅限于SNP，还能检测插入、删除、倒位等结构变异，这些变异可能对性状和疾病有重要影响。</p>
</section>
<section id="群体特异性变异的研究" class="level4">
<h4 class="anchored" data-anchor-id="群体特异性变异的研究">6. <strong>群体特异性变异的研究</strong></h4>
<p>WGS不受芯片设计的群体偏见限制，能发现特定人群特有的变异，为跨人群遗传研究提供支持。</p>
</section>
<section id="更高的数据质量" class="level4">
<h4 class="anchored" data-anchor-id="更高的数据质量">7. <strong>更高的数据质量</strong></h4>
<p>WGS通过直接测序DNA生成数据，相比SNP芯片的杂交技术，减少了技术误差，结果更可靠。</p>
</section>
<section id="分析灵活性" class="level4">
<h4 class="anchored" data-anchor-id="分析灵活性">8. <strong>分析灵活性</strong></h4>
<p>WGS数据包含整个基因组信息，研究者可以根据需要选择不同的变异类型和分析策略，灵活性远超传统GWAS。</p>
</section>
</section>
<section id="take-home-message" class="level3">
<h3 class="anchored" data-anchor-id="take-home-message">Take-Home Message</h3>
<p>总的来说，使用全基因组测序数据进行GWAS在变异覆盖、分辨率、罕见变异检测、因果变异识别、结构变异分析、群体特异性、数据质量和灵活性等方面都显著优于传统GWAS。这些优势使得WGS-GWAS在探索复杂性状和疾病遗传基础时展现出更大的潜力，为精准医学和遗传学研究开辟了新的可能性。</p>


<!-- -->


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-RN1159" class="csl-entry">
Omidiran, Oluwaferanmi, Aashna Patel, Sarah Usman, Ishani Mhatre, Habiba Abdelhalim, William Degroat, Rishabh Narayanan, Kritika Singh, Dinesh Mendhe, and Zeeshan Ahmed. 2024. <span>“GWAS Advancements to Investigate Disease Associations and Biological Mechanisms.”</span> Journal Article. <em>Clinical and Translational Discovery</em> 4 (3). <a href="https://doi.org/10.1002/ctd2.296">https://doi.org/10.1002/ctd2.296</a>.
</div>
</div></section></div> ]]></description>
  <category>GWAS</category>
  <category>bioinformatics</category>
  <category>genetics</category>
  <category>WGS</category>
  <guid>https://leslie-lu.github.io/blog/2025/03/11/WGS_GWAS/</guid>
  <pubDate>Tue, 11 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250311233414.png" medium="image" type="image/png"/>
</item>
<item>
  <title>证明随机化和盲法消除向均值回归偏倚</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/03/08/randomizationandBlindness/</link>
  <description><![CDATA[ 





<section id="引言" class="level3">
<h3 class="anchored" data-anchor-id="引言">引言</h3>
<p>讨论治疗分配时采用随机化和评估处理效应时采用盲法将如何帮助消除向均值回归所导致的偏倚。</p>
</section>
<section id="背景" class="level3">
<h3 class="anchored" data-anchor-id="背景">背景</h3>
<p>我们假设 <img src="https://latex.codecogs.com/png.latex?X_1"> 是处理组的基线测量值，<img src="https://latex.codecogs.com/png.latex?X_2"> 是同一组的随访测量值，且配对测量值 <img src="https://latex.codecogs.com/png.latex?(X_1,%20X_2)"> 服从二元正态分布。向均值回归（regression to the mean）是一种统计现象，是仅对那些具有 <strong>极端</strong> 初始测量值的个体进行第二次测量时发生的现象，指基线测量值 <img src="https://latex.codecogs.com/png.latex?X_1"> 较高（低）的个体在随访测量中 <img src="https://latex.codecogs.com/png.latex?X_2"> 回归到总体均值 <img src="https://latex.codecogs.com/png.latex?%5Cmu"> 的现象。</p>
<p>在临床试验中，这种现象可能被误认为是治疗效果。这里我们试着使用线性回归模型证明，随机化和盲法可以消除这种向均值回归的偏倚。</p>
</section>
<section id="线性回归模型" class="level3">
<h3 class="anchored" data-anchor-id="线性回归模型">线性回归模型</h3>
<p>设处理组的 <img src="https://latex.codecogs.com/png.latex?X_1"> 和 <img src="https://latex.codecogs.com/png.latex?X_2"> 二元正态分布的均值向量和协方差矩阵为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bpmatrix%7D%20X_1%20%5C%5C%20X_2%20%5Cend%7Bpmatrix%7D%20%5Csim%20%5Ctext%7BN%7D%20%5Cleft(%20%5Cbegin%7Bpmatrix%7D%20%5Cmu_1%20%5C%5C%20%5Cmu_2%20%5Cend%7Bpmatrix%7D,%20%5Cbegin%7Bpmatrix%7D%20%5Csigma_1%5E2%20&amp;%20%5Crho%5Csigma_1%5Csigma_2%20%5C%5C%20%5Crho%5Csigma_1%5Csigma_2%20&amp;%20%5Csigma_2%5E2%20%5Cend%7Bpmatrix%7D%20%5Cright)%0A"></p>
<p>其中，</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Crho%20=%20%5Cfrac%7B%5Ctext%7BCov%7D(X_1,%20X_2)%7D%7B%5Csigma_1%20%5Csigma_2%7D"> 是 <img src="https://latex.codecogs.com/png.latex?X_1"> 和 <img src="https://latex.codecogs.com/png.latex?X_2"> 之间的相关系数。</p>
<p>我们使用简单的线性回归模型来描述 <img src="https://latex.codecogs.com/png.latex?X_1"> 和 <img src="https://latex.codecogs.com/png.latex?X_2"> 之间的关系：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE(X_2%7CX_1)%20=%20%5Calpha%20+%20%5Cbeta%20X_1=%20%5Cmu_2%20+%20%5Crho%20%5Cfrac%7B%5Csigma_2%7D%7B%5Csigma_1%7D%20(X_1%20-%20%5Cmu_1)%0A"></p>
<p>其中：</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Calpha%20=%20%5Cmu_2-%20%5Cbeta%20%5Cmu_1"> ，</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cbeta=%20%5Crho%20%5Cfrac%7B%5Csigma_2%7D%7B%5Csigma_1%7D"> 。</li>
</ul>
</section>
<section id="向均值回归的影响" class="level3">
<h3 class="anchored" data-anchor-id="向均值回归的影响">向均值回归的影响</h3>
<p>我们假设该处理组无治疗效果，即 <img src="https://latex.codecogs.com/png.latex?%5Cmu_1=%5Cmu_2=%5Cmu"> 且 <img src="https://latex.codecogs.com/png.latex?%5Csigma_1=%5Csigma_2=%5Csigma"> ，则对于特定值 <img src="https://latex.codecogs.com/png.latex?X_1=x_1">，有：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AE(X_2%7CX_1=x_1)%20=%20%5Cmu%20+%20%5Crho%20(x_1-%5Cmu)%0A"></p>
<p>在等号两侧各减去 <img src="https://latex.codecogs.com/png.latex?%5Cmu"> 并取绝对值后，有以下不等式成立：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7CE(X_2%7CX_1=x_1)%20-%20%5Cmu%7C%20=%20%7C%5Crho%7C%20%7C(x_1-%5Cmu)%7C%20%5Cleq%20%7C(x_1-%5Cmu)%7C%0A"></p>
<p>如此一来，我们可以看到，当 <img src="https://latex.codecogs.com/png.latex?x_1"> 取极端值时，<img src="https://latex.codecogs.com/png.latex?X_2"> 与 <img src="https://latex.codecogs.com/png.latex?%5Cmu"> 之间的差异大体上始终会减小，<img src="https://latex.codecogs.com/png.latex?X_2"> 的期望值会向 <img src="https://latex.codecogs.com/png.latex?%5Cmu"> 靠拢，这也就是著名的向均值回归现象。而在临床试验中，这种自然变化可能被误认为是治疗效果（因为在无处理效应时却看似产生了效果），从而带来偏倚。</p>
<p>上面式子也可以表示为:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7CE(X_2%7CX_1=x_1)-x_1%7C%20=%20%7C(%5Crho-1)(x_1-%5Cmu)%7C%0A"></p>
<p>可以更加清楚地看到，对于特定的 <img src="https://latex.codecogs.com/png.latex?X_1=x_1">，公式左侧向均值回归所产生的影响通常不为零。只有当 <img src="https://latex.codecogs.com/png.latex?%5Crho=1"> 或者 <img src="https://latex.codecogs.com/png.latex?x_1"> 是一个等于总体均值 <img src="https://latex.codecogs.com/png.latex?%5Cmu"> 的完美样本时，向均值回归的影响消失为零。</p>
</section>
<section id="随机化的作用" class="level3">
<h3 class="anchored" data-anchor-id="随机化的作用">随机化的作用</h3>
<p>接下来，我们开始讨论随机化如何帮助消除向均值回归的偏倚。</p>
<p>由于随机化，使得处理组和对照组的基线测量值的分布相同，即均值均为 <img src="https://latex.codecogs.com/png.latex?%5Cmu">，方差相同。对照组模型为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7CE(Y_2%7CY_1=y_1)-y_1%7C%20=%20%7C(%5Crho-1)(y_1-%5Cmu)%7C%0A"></p>
<p>处理组和对照组均会发生向均值回归，治疗效果则通常通过组间差异来评估：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5CDelta%20=%20%7CE(X_2%7CX_1=x_1)-x_1%7C%20-%20%7CE(Y_2%7CY_1=y_1)-y_1%7C%0A"></p>
<p>因为随机化使得 <img src="https://latex.codecogs.com/png.latex?%7CE(X_2%7CX_1=x_1)-x_1%7C%20%5Capprox%20%7CE(Y_2%7CY_1=y_1)-y_1%7C">，向均值回归的影响在 <img src="https://latex.codecogs.com/png.latex?%5CDelta"> 中抵消。若存在处理效应，则经过随机化之后得到的 <img src="https://latex.codecogs.com/png.latex?%5CDelta"> 会更接近于真实的治疗效果，而排除了向均值回归得偏倚。</p>
</section>
<section id="盲法的作用" class="level3">
<h3 class="anchored" data-anchor-id="盲法的作用">盲法的作用</h3>
<p>而对于盲法帮助消除向均值回归的偏倚，主要在于盲法确保在不知道治疗分配情况下的 <img src="https://latex.codecogs.com/png.latex?x_2"> 和 <img src="https://latex.codecogs.com/png.latex?y_2"> 测量的客观性，避免人为放大或掩盖向均值回归的自然变化，从而进一步防止向均值回归被误解为治疗效应。</p>
</section>
<section id="结论" class="level3">
<h3 class="anchored" data-anchor-id="结论">结论</h3>
<p>随机化通过均衡基线消除向均值回归的组间差异，盲法通过客观测量避免主观偏倚，两者共同确保治疗效果估计无偏。</p>


<!-- -->

</section>

 ]]></description>
  <category>RCT</category>
  <category>Statistics</category>
  <category>Methodology</category>
  <category>randomization</category>
  <category>blindness</category>
  <category>regression to the mean</category>
  <guid>https://leslie-lu.github.io/blog/2025/03/08/randomizationandBlindness/</guid>
  <pubDate>Sat, 08 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250307224129.png" medium="image" type="image/png"/>
</item>
<item>
  <title>配对样本t检验的统计学效率</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/03/07/pairedttest/</link>
  <description><![CDATA[ 





<section id="引言" class="level3">
<h3 class="anchored" data-anchor-id="引言">引言</h3>
<p>复习独立样本 t 检验和配对样本 t 检验的统计量，并证明配对样本 t 检验的统计学效率高于独立样本 t 检验。</p>
<p>统计学效率通常指在相同的显著性水平和样本量下，检验检测真实差异（效应量）的能力（即检验功效 power）更高，或者在达到相同power时所需样本量更小。</p>
</section>
<section id="两种t检验的定义与适用场景" class="level3">
<h3 class="anchored" data-anchor-id="两种t检验的定义与适用场景">两种t检验的定义与适用场景</h3>
<ul>
<li><p><strong>配对样本t检验</strong>：适用于同一组个体在两个不同条件下的测量结果，或配对设计的实验。其核心思想是计算每对观测值的差异 <img src="https://latex.codecogs.com/png.latex?D_i%20=%20X_i%20-%20Y_i">，然后检验这些差异的均值是否为零。</p></li>
<li><p><strong>独立样本t检验</strong>：适用于两个独立组的均值比较，例如实验组和对照组的测量结果完全独立。</p></li>
</ul>
</section>
<section id="两种检验的基本公式" class="level3">
<h3 class="anchored" data-anchor-id="两种检验的基本公式">两种检验的基本公式</h3>
<section id="配对样本t检验" class="level4">
<h4 class="anchored" data-anchor-id="配对样本t检验">配对样本t检验</h4>
<p>假设有<img src="https://latex.codecogs.com/png.latex?n">对配对观测值<img src="https://latex.codecogs.com/png.latex?(X_1,%20Y_1),%20(X_2,%20Y_2),%20%5Cldots,%20(X_n,%20Y_n)">，定义差异<img src="https://latex.codecogs.com/png.latex?D_i%20=%20X_i%20-%20Y_i">。目标是检验原假设<img src="https://latex.codecogs.com/png.latex?H_0:%20%5Cmu_D%20=%200">对备择假设<img src="https://latex.codecogs.com/png.latex?H_1:%20%5Cmu_D%20%5Cneq%200">。统计量为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0At%20=%20%5Cfrac%7B%5Cbar%7BD%7D%7D%7Bs_D%20/%20%5Csqrt%7Bn%7D%7D%0A"></p>
<p>其中：</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cbar%7BD%7D%20=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5En%20D_i"> 是差异的样本均值，</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?s_D%20=%20%5Csqrt%7B%5Cfrac%7B1%7D%7Bn-1%7D%20%5Csum_%7Bi=1%7D%5En%20(D_i%20-%20%5Cbar%7BD%7D)%5E2%7D"> 是差异的样本标准差，</p></li>
<li><p>自由度为<img src="https://latex.codecogs.com/png.latex?n%20-%201">。</p></li>
</ul>
</section>
<section id="独立样本t检验" class="level4">
<h4 class="anchored" data-anchor-id="独立样本t检验">独立样本t检验</h4>
<p>假设有两个独立样本，样本1为<img src="https://latex.codecogs.com/png.latex?X_1,%20X_2,%20%5Cldots,%20X_%7Bn_1%7D">，样本2为<img src="https://latex.codecogs.com/png.latex?Y_1,%20Y_2,%20%5Cldots,%20Y_%7Bn_2%7D">，均值分别为<img src="https://latex.codecogs.com/png.latex?%5Cmu_X">和<img src="https://latex.codecogs.com/png.latex?%5Cmu_Y">。目标是检验<img src="https://latex.codecogs.com/png.latex?H_0:%20%5Cmu_X%20=%20%5Cmu_Y">对<img src="https://latex.codecogs.com/png.latex?H_1:%20%5Cmu_X%20%5Cneq%20%5Cmu_Y">。统计量为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0At%20=%20%5Cfrac%7B%5Cbar%7BX%7D%20-%20%5Cbar%7BY%7D%7D%7Bs_p%20%5Csqrt%7B%5Cfrac%7B1%7D%7Bn_1%7D%20+%20%5Cfrac%7B1%7D%7Bn_2%7D%7D%7D%0A"></p>
<p>其中：</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Cbar%7BX%7D"> 和 <img src="https://latex.codecogs.com/png.latex?%5Cbar%7BY%7D"> 分别是两个样本的均值，</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?s_p%5E2%20=%20%5Cfrac%7B(n_1%20-%201)s_X%5E2%20+%20(n_2%20-%201)s_Y%5E2%7D%7Bn_1%20+%20n_2%20-%202%7D"> 是合并方差（假设两组方差相等），</p></li>
<li><p>自由度为<img src="https://latex.codecogs.com/png.latex?n_1%20+%20n_2%20-%202">。</p></li>
</ul>
</section>
</section>
<section id="统计学效率的比较框架" class="level3">
<h3 class="anchored" data-anchor-id="统计学效率的比较框架">统计学效率的比较框架</h3>
<p>为公平比较两种检验的效率，我们假设：</p>
<ul>
<li><p>总观测次数相同。例如，配对样本t检验有<img src="https://latex.codecogs.com/png.latex?n">对（共<img src="https://latex.codecogs.com/png.latex?2n">个观测值），独立样本t检验有两个各有<img src="https://latex.codecogs.com/png.latex?n">个观测值的独立样本（共<img src="https://latex.codecogs.com/png.latex?2n">个观测值）。</p></li>
<li><p>配对样本中的<img src="https://latex.codecogs.com/png.latex?X_i">和<img src="https://latex.codecogs.com/png.latex?Y_i">之间存在相关性，相关系数为<img src="https://latex.codecogs.com/png.latex?%5Crho">（通常<img src="https://latex.codecogs.com/png.latex?%5Crho%20%3E%200">，即非负相关性，因为配对设计常用于控制个体差异）。</p></li>
<li><p>两组的总体方差均为<img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2">，效应量（均值差异）为<img src="https://latex.codecogs.com/png.latex?%5Cdelta">。</p></li>
</ul>
<p>统计学效率的关键在于估计量的方差和检验效能的比较。我们通过计算估计量的方差和非中心参数来证明配对样本t检验的优势。</p>
</section>
<section id="估计量的方差比较" class="level3">
<h3 class="anchored" data-anchor-id="估计量的方差比较">估计量的方差比较</h3>
<section id="配对样本t检验-1" class="level4">
<h4 class="anchored" data-anchor-id="配对样本t检验-1">配对样本t检验</h4>
<p>配对差异<img src="https://latex.codecogs.com/png.latex?D_i%20=%20X_i%20-%20Y_i">的方差为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BVar%7D(D_i)%20=%20%5Ctext%7BVar%7D(X_i)%20+%20%5Ctext%7BVar%7D(Y_i)%20-%202%20%5Ctext%7BCov%7D(X_i,%20Y_i)%0A"></p>
<p>假设<img src="https://latex.codecogs.com/png.latex?%5Ctext%7BVar%7D(X_i)%20=%20%5Ctext%7BVar%7D(Y_i)%20=%20%5Csigma%5E2">，且<img src="https://latex.codecogs.com/png.latex?%5Ctext%7BCov%7D(X_i,%20Y_i)%20=%20%5Crho%20%5Csigma%5E2">，则：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BVar%7D(D_i)%20=%202%20%5Csigma%5E2%20(1%20-%20%5Crho)%0A"></p>
<p>差异均值<img src="https://latex.codecogs.com/png.latex?%5Cbar%7BD%7D">的方差为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BVar%7D(%5Cbar%7BD%7D)%20=%20%5Cfrac%7B%5Ctext%7BVar%7D(D_i)%7D%7Bn%7D%20=%20%5Cfrac%7B2%20%5Csigma%5E2%20(1%20-%20%5Crho)%7D%7Bn%7D%0A"></p>
<p>标准误为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BSE%7D(%5Cbar%7BD%7D)%20=%20%5Csqrt%7B%5Cfrac%7B2%20%5Csigma%5E2%20(1%20-%20%5Crho)%7D%7Bn%7D%7D%0A"></p>
</section>
<section id="独立样本t检验-1" class="level4">
<h4 class="anchored" data-anchor-id="独立样本t检验-1">独立样本t检验</h4>
<p>对于两个各有<img src="https://latex.codecogs.com/png.latex?n">个观测值的独立样本，<img src="https://latex.codecogs.com/png.latex?%5Cbar%7BX%7D%20-%20%5Cbar%7BY%7D">的方差为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BVar%7D(%5Cbar%7BX%7D%20-%20%5Cbar%7BY%7D)%20=%20%5Ctext%7BVar%7D(%5Cbar%7BX%7D)%20+%20%5Ctext%7BVar%7D(%5Cbar(Y))%20=%20%5Cfrac%7B2%20%5Csigma%5E2%7D%7Bn%7D%0A"></p>
<p>标准误为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BSE%7D(%5Cbar%7BX%7D%20-%20%5Cbar%7BY%7D)%20=%20%5Csqrt%7B%5Cfrac%7B2%20%5Csigma%5E2%7D%7Bn%7D%7D%0A"></p>
</section>
<section id="方差比较" class="level4">
<h4 class="anchored" data-anchor-id="方差比较">方差比较</h4>
<ul>
<li><p>配对样本t检验的方差：<img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B2%20%5Csigma%5E2%20(1%20-%20%5Crho)%7D%7Bn%7D"></p></li>
<li><p>独立样本t检验的方差：<img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B2%20%5Csigma%5E2%7D%7Bn%7D"></p></li>
</ul>
<p>当<img src="https://latex.codecogs.com/png.latex?%5Crho%20%3E%200">时，<img src="https://latex.codecogs.com/png.latex?1%20-%20%5Crho%20%3C%201">，因此：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B2%20%5Csigma%5E2%20(1%20-%20%5Crho)%7D%7Bn%7D%20%3C%20%5Cfrac%7B2%20%5Csigma%5E2%7D%7Bn%7D%0A"></p>
<p>这表明配对样本t检验的估计量<img src="https://latex.codecogs.com/png.latex?%5Cbar%7BD%7D">比独立样本t检验的估计量<img src="https://latex.codecogs.com/png.latex?%5Cbar%7BX%7D%20-%20%5Cbar%7BY%7D">具有更小的方差。两者的检验统计量分子相同（即效应量），但配对样本t检验的分母（标准误）更小，估计越精确，检验越有可能检测到真实的差异，相应地更容易拒绝原假设，因此具有更高的power，统计学效率更高。</p>
</section>
</section>
<section id="power与非中心参数" class="level3">
<h3 class="anchored" data-anchor-id="power与非中心参数">power与非中心参数</h3>
<p>power 是检验在备择假设为真时拒绝原假设的概率，power 与统计量的非中心参数相关。非中心参数越大，power 越高。</p>
<section id="配对样本t检验-2" class="level4">
<h4 class="anchored" data-anchor-id="配对样本t检验-2">配对样本t检验</h4>
<p>在备择假设<img src="https://latex.codecogs.com/png.latex?%5Cmu_D%20=%20%5Cdelta">下，非中心参数为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clambda_p%20=%20%5Cfrac%7B%5Cdelta%7D%7B%5Ctext%7BSE%7D(%5Cbar%7BD%7D)%7D%20=%20%5Cfrac%7B%5Cdelta%7D%7B%5Csigma%7D%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20(1%20-%20%5Crho)%7D%7D%0A"></p>
</section>
<section id="独立样本t检验-2" class="level4">
<h4 class="anchored" data-anchor-id="独立样本t检验-2">独立样本t检验</h4>
<p>在备择假设<img src="https://latex.codecogs.com/png.latex?%5Cmu_X%20-%20%5Cmu_Y%20=%20%5Cdelta">下，非中心参数为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clambda_i%20=%20%5Cfrac%7B%5Cdelta%7D%7B%5Ctext%7BSE%7D(%5Cbar%7BX%7D%20-%20%5Cbar%7BY%7D)%7D%20=%20%5Cfrac%7B%5Cdelta%7D%7B%5Csigma%7D%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%7D%7D%0A"></p>
</section>
<section id="非中心参数比较" class="level4">
<h4 class="anchored" data-anchor-id="非中心参数比较">非中心参数比较</h4>
<p>比较<img src="https://latex.codecogs.com/png.latex?%5Clambda_p">和<img src="https://latex.codecogs.com/png.latex?%5Clambda_i">：</p>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Clambda_p%20=%20%5Cfrac%7B%5Cdelta%7D%7B%5Csigma%7D%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%20(1%20-%20%5Crho)%7D%7D"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%5Clambda_i%20=%20%5Cfrac%7B%5Cdelta%7D%7B%5Csigma%7D%20%5Csqrt%7B%5Cfrac%7Bn%7D%7B2%7D%7D"></p></li>
</ul>
<p>当<img src="https://latex.codecogs.com/png.latex?%5Crho%20%3E%200">时，<img src="https://latex.codecogs.com/png.latex?%5Clambda_p%20%3E%20%5Clambda_i">，表明配对样本t检验在相同条件下具有更高的 power。</p>
</section>
</section>
<section id="结论" class="level2">
<h2 class="anchored" data-anchor-id="结论">结论</h2>
<p>通过估计量方差和非中心参数的比较，证明了当配对观测值正相关时，配对样本t检验的统计学效率高于独立样本t检验。这也是为什么在实验设计中，当可以控制个体差异时，优先选择配对设计的原因。</p>


<!-- -->

</section>

 ]]></description>
  <category>RCT</category>
  <category>Statistics</category>
  <category>Hypothesis Testing</category>
  <category>t-test</category>
  <category>power analysis</category>
  <guid>https://leslie-lu.github.io/blog/2025/03/07/pairedttest/</guid>
  <pubDate>Fri, 07 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/statistical-power-chart.png" medium="image" type="image/png"/>
</item>
<item>
  <title>临床试验中基线数据p值真的有意义吗？</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/03/03/Table1inRCT/</link>
  <description><![CDATA[ 





<p>在临床试验的结果表格中，你是否经常见到<strong>患者人口学与基线特征</strong>的统计表，附带一堆 <code>p</code> 值？这些 <code>p</code> 值到底在验证什么？是证明随机化的成功，还是暴露试验设计的漏洞？</p>
<p>这里，我们试图用一篇文章来讨论下这个问题。</p>
<section id="随机化的完美幻觉基线表格里的-p-值" class="level3">
<h3 class="anchored" data-anchor-id="随机化的完美幻觉基线表格里的-p-值">随机化的完美幻觉：基线表格里的 p 值</h3>
<p>临床试验的核心是随机化分配（Randomization），它试图通过<strong>不可预测</strong>的分组消除混杂因素。然而，许多论文在结果部分展示基线数据时，会针对性别、年龄等变量计算治疗组间的 p 值。这看似严谨的操作，实则暗藏争议。</p>
<p>我们争议的焦点在于：</p>
<section id="无意义论" class="level4">
<h4 class="anchored" data-anchor-id="无意义论">1. 无意义论</h4>
<p>如果试验已声明进行了<strong>随机化</strong>，则所有基线差异（无处理效应）的 p 值本质上反映的是随机误差，而非真实效应。任何由极小 p 值提示的统计显著性都是第一类错误，毫无意义。例如，在 100 次基线比较中，即使完全随机，按 5% 显著性水平也会出现 5 次<strong>假阳性</strong>。</p>
</section>
<section id="验真派" class="level4">
<h4 class="anchored" data-anchor-id="验真派">2. 验真派</h4>
<p>认为 p 值可用于验证随机化是否真实执行。比如，若基线变量显示系统性差异（如年龄显著不均衡），可能暗示分配过程存在人为干扰。</p>
</section>
</section>
<section id="当组间均衡性遭遇挑战何时该调整协变量" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="当组间均衡性遭遇挑战何时该调整协变量">当组间均衡性遭遇挑战：何时该调整协变量？</h3>
<p>随机化的理想情况是治疗组间基线完全均衡，但现实往往骨感。当某个预后因素（如疾病严重程度）不均衡时，该如何处理？这里，我们一般的逻辑是：</p>
<section id="不调整也能成立" class="level4">
<h4 class="anchored" data-anchor-id="不调整也能成立">1. 不调整也能成立</h4>
<p>即使基线不均衡，对于真正的随机化试验，我们仍然可以相信在没有纳入任何协变量的情况下，处理效应主分析的直接结果。无论观察到的处理与协变量之间的关联性如何，主效应分析的结果仍然是有效的。从这个角度看，基线表格里的 p 值是毫无必要的。</p>
</section>
<section id="调整会更高效" class="level4">
<h4 class="anchored" data-anchor-id="调整会更高效">2. 调整会更高效</h4>
<p>而另一方面，若某变量与结局强相关且组间不均衡，纳入协变量分析（如 <code>ANCOVA</code> 模型）可减少误差、提升统计效能。</p>
</section>
<section id="实战指南如何科学设计基线表格" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="实战指南如何科学设计基线表格">实战指南：如何科学设计基线表格？</h4>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250303165121.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">NEJM</figcaption>
</figure>
</div>
<p>这里，我们给研究者的具体建议是：</p>
<ul>
<li><p>简化p值展示：随机化试验中，基线p值无必要，直接呈现变量分布即可。</p></li>
<li><p>关注临床意义：若关键变量（如年龄、疾病分期）组间差异超过10%，需讨论是否调整分析模型。</p></li>
</ul>
</section>
</section>
<section id="结语回归医学研究的本质" class="level3">
<h3 class="anchored" data-anchor-id="结语回归医学研究的本质">结语：回归医学研究的本质</h3>
<p>临床试验的终极目标是评估治疗效应，而非追求表格的 <code>完美对齐</code>。基线可比性应靠科学设计保障，而非事后修补。当一篇论文用大量 p 值自证清白时，我们或许更该追问：它的随机化是否真正无懈可击？分配过程是否足够盲态？毕竟，在医学进步的征途上，随机化需要的是技术硬核，而非统计学 p 值。</p>


<!-- -->

</section>

 ]]></description>
  <category>RCT</category>
  <category>Table 1</category>
  <category>Baseline</category>
  <category>p value</category>
  <guid>https://leslie-lu.github.io/blog/2025/03/03/Table1inRCT/</guid>
  <pubDate>Mon, 03 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img_2025/20250303165121.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Zotero + OneDrive + DeepSeek：构建个人文献阅读管理系统</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/02/17/zotero_onedrive_deepseek/</link>
  <description><![CDATA[ 





<p>最近 DeepSeek 大火，看到有人分享用它来阅读管理文献，非常好用。我自己一直用的是 EndNote，但是似乎不支持接入 Deepseek，所以我决定暂时转投 Zotero 阵营，实现文献管理和阅读的一体化。</p>
<section id="zotero-onedrive" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="zotero-onedrive">Zotero + OneDrive</h3>
<p>Zotero 是一个开源的文献管理工具，但是它有一个缺点，只有 300MB 的免费存储空间。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250217003538.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Storage</figcaption>
</figure>
</div>
<p>我之前的 EndNote 没有存储空间限制的焦虑，为了防止以后 Zotero 的存储空间不够用，我决定顺手把 Zotero 的文献库放到 OneDrive 云上，这样就可以在不同设备上同步，且不适用 Zotero 自带的存储空间。</p>
<p>对于 Zotero 放到云上的设置，可以参考：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250217004027.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Sync</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250217004125.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Files and Folders</figcaption>
</figure>
</div>
<p>只需要将 Zotero 的 Storage 文件夹软链接到 OneDrive 云上，然后在 Zotero 的设置中设置数据文件夹的路径即可。</p>
<p>这样，对于有 Microsoft 365 家庭版订阅的用户，就可以免费使用 1TB 的 OneDrive 存储空间来存储 Zotero 的文献库了。</p>
</section>
<section id="zotero-deepseek" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="zotero-deepseek">Zotero + DeepSeek</h3>
<p>DeepSeek 最近已经火到不需要我再多做介绍了。Deepseek 之前是给每位用户送了 10元 的 API：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250217004626.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">DeepSeek</figcaption>
</figure>
</div>
<p>但是是一个月的有效期，且目前 DeepSeek 的 API 已经无法购买了。我们转向使用硅基流动提供的 API，它也赠送了 14元：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250217005346.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">SiliconCloud</figcaption>
</figure>
</div>
<p>那接下来就是在 Zotero 中设置硅基流动中模型的 API 了，这里我们选择的是模型 deepseek-ai/DeepSeek-R1-Distill-Qwen-32B：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250217005652.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">DeepSeek-R1-Distill-Qwen-32B</figcaption>
</figure>
</div>
<p>浏览下它的 API 文档，我们在 Zotero 的 Awesome GPT 插件中设置好 API 即可，这个插件可以通过 GitHub 下载：</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250217005852.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">API</figcaption>
</figure>
</div>
<p>通过了 test 之后（我这里图片上的 error 可以忽略），我们就可以使用 DeepSeek 来阅读文献了。</p>
<p>首先必须读一篇经典文献：Attention is All You Need。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/88c471b106c67bcb6bca973e2a5803a.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Transformer</figcaption>
</figure>
</div>
<p>感兴趣的同学可以参考我们的教程开始使用 DeepSeek 助力自己的科研了。</p>


<!-- -->

</section>

 ]]></description>
  <category>zotero</category>
  <category>onedrive</category>
  <category>deepseek</category>
  <category>tools</category>
  <guid>https://leslie-lu.github.io/blog/2025/02/17/zotero_onedrive_deepseek/</guid>
  <pubDate>Mon, 17 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/88c471b106c67bcb6bca973e2a5803a.png" medium="image" type="image/png"/>
</item>
<item>
  <title>SAS 生存分析模拟</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/02/13/simulating_survival_models/</link>
  <description><![CDATA[ 





<p>生存分析（Survival Analysis）是统计学中用于分析事件发生时间的研究方法。在生存分析中，常常使用比例风险模型（Proportional Hazards Models），例如 Cox 回归模型，来探索影响生存时间的因素。</p>
<p>这里，我们将深入解析如何使用 SAS 进行生存分析模拟，特别是如何生成符合特定假设的生存数据，并使用 Cox 回归模型进行分析。</p>
<section id="生存数据模拟" class="level3">
<h3 class="anchored" data-anchor-id="生存数据模拟">1. 生存数据模拟</h3>
<p>在生存分析中，数据的模拟是研究者进行仿真实验、理解模型行为以及验证方法的重要步骤。以下代码展示了如何使用 SAS 模拟符合指数分布（Exponential Distribution）和 Weibull 分布的生存数据。</p>
<section id="指数分布与-cox-回归模型" class="level4">
<h4 class="anchored" data-anchor-id="指数分布与-cox-回归模型">指数分布与 Cox 回归模型</h4>
<p>指数分布是生存数据中常见的一种分布模型，尤其适用于模拟没有明显时间变化的基线风险（constant baseline hazard），其形式为：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clambda(t)%20=%20%5Clambda_0%0A"></p>
<p>其中，<img src="https://latex.codecogs.com/png.latex?%5Clambda_0"> 是基线风险，它在整个时间范围内保持不变。对于 Cox 回归模型来说，基线风险函数并未指定，而是通过比例风险的假设，估计与协变量相关的风险比（hazard ratio）。</p>
<pre class="{SAS}"><code>%macro RandExp(sigma);
    ((&amp;sigma) * rand("Exponential"))
%mend;</code></pre>
<p>在这段代码中，我们定义了一个宏 RandExp，它用于生成指数分布的随机数。<code>rand("Exponential")</code> 生成一个符合指数分布的随机数，而 &amp;sigma 为分布的尺度参数。这里我们通过宏将其封装，方便后续的调用。</p>
<p>接下来，我们创建一个包含100个观测值的数据集 PHData，该数据集模拟了一个包含固定效应（例如协变量 x1 和 x2）和随机事件时间（t）的数据集。</p>
<pre class="{SAS}"><code>do i = 1 to &amp;N;
        xx1{i} = rand("Normal"); xx2{i} = rand("Normal");
    end;
    baseHazardRate = 0.002; /* 事件发生的基线风险 */
    censorRate = 0.001; /* 被删失（censoring）的风险 */
    do i = 1 to &amp;N;
        x1 = xx1{i}; x2 = xx2{i};
        eta = -2*x1 + 1*x2; /* 线性预测变量 */
        tEvent = %RandExp( 1/(baseHazardRate * exp(eta)) ); /* 根据线性预测模拟事件时间 */
        c = %RandExp( 1/censorRate ); /* 被删失时间 */
        t = min(tEvent, c); /* 事件时间或删失时间 */
        censored = (c &lt; tEvent); /* 是否删失的指示变量 */
        output;
    end;</code></pre>
<p>在这部分代码中，我们首先通过 rand(“Normal”) 生成了两个标准正态分布的随机变量 x1 和 x2 作为协变量。然后，我们使用这些协变量和基线风险来计算事件的时间（tEvent）和删失时间（c）。每个观察值的事件时间 t 是事件时间和删失时间中的较小值，而 censored 变量则指示该观测是否为删失。</p>
</section>
</section>
<section id="使用cox回归模型进行分析" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="使用cox回归模型进行分析">2. 使用Cox回归模型进行分析</h3>
<p>生成生存数据后，我们可以使用 SAS中的 PHREG 拟合比例风险模型。在我们的例子中，我们将使用 Cox 回归模型来估计协变量 x1 和 x2 对生存时间的影响。</p>
<pre class="{SAS}"><code>ods graphics on;
proc phreg data=PHData plots(overlay CL)= (survival);
    model t*censored(1)= x1-x2;
    ods select CensoredSummary ParameterEstimates
        ReferenceSet SurvivalPlot;
run;</code></pre>
<p>这里运行结果将提供Cox回归模型的参数估计，包括协变量的风险比（Hazard Ratios），以及不同协变量条件下的生存函数图。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250213224227.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">参数估计</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250213224310.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">生存曲线</figcaption>
</figure>
</div>
<p>完整代码已经上传至<a href="https://mp.weixin.qq.com/s/4IR-KMAZ-q2VbI0Fz4fYRg">星球</a>，感兴趣的同学可以自行查看。</p>


<!-- -->

</section>

 ]]></description>
  <category>sas</category>
  <category>cox</category>
  <category>ph</category>
  <category>survival</category>
  <category>simulation</category>
  <guid>https://leslie-lu.github.io/blog/2025/02/13/simulating_survival_models/</guid>
  <pubDate>Thu, 13 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250213224310.png" medium="image" type="image/png"/>
</item>
<item>
  <title>一文读懂 Dosage 文件</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/02/11/dosage/</link>
  <description><![CDATA[ 





<p>在基因组关联分析（GWAS）中，基因型数据的准确性和高效处理是核心挑战，准确的基因型数据是发现遗传变异与性状关联的关键。传统方法使用硬判型（Hard Call）数据（如 0/1/2 编码），但随着测序技术的发展，Dosage 文件因其对基因型不确定性的量化能力，逐渐成为 GWAS 分析的新标准。而 <a href="https://mp.weixin.qq.com/s/pCfu0tJxvvRIHqtbK9eSug">SAIGE</a> 作为混合模型 GWAS 的明星工具，对 Dosage 文件的支持更是备受关注。</p>
<section id="dosage文件基因型数据的概率化革命" class="level3">
<h3 class="anchored" data-anchor-id="dosage文件基因型数据的概率化革命">Dosage文件：基因型数据的概率化革命</h3>
<section id="什么是-dosage-文件" class="level4">
<h4 class="anchored" data-anchor-id="什么是-dosage-文件">1.1 什么是 Dosage 文件？</h4>
<p>Dosage 文件记录的是每个样本在某个位点的<strong>剂量</strong>（Dosage），即基因型为杂合（如 0/1）或风险等位基因（如 1/1）的期望值（Expected Value）。其取值范围通常为 0.0~2.0，表示从<em>无风险等位基因</em>到<em>两个风险等位基因</em>的概率分布。</p>
<p>数学定义：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0ADosage%20=%20P(0/0)%20%5Ctimes%200%20+%20P(0/1)%20%5Ctimes%201%20+%20P(1/1)%20%5Ctimes%202%0A"></p>
<p>其中 <img src="https://latex.codecogs.com/png.latex?P"> 表示基因型的概率。基于这些概率，可以计算出 dosage 值，也就是参考等位基因的期望拷贝数。</p>
</section>
<section id="dosage-vs-hard-call为什么更科学" class="level4">
<h4 class="anchored" data-anchor-id="dosage-vs-hard-call为什么更科学">1.2 Dosage vs Hard Call：为什么更科学？</h4>
<table class="caption-top table">
<thead>
<tr class="header">
<th>对比维度</th>
<th>Hard Call</th>
<th>Dosage</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>数据本质</td>
<td>离散（0/1/2）</td>
<td>连续（0.0~2.0）</td>
</tr>
<tr class="even">
<td>低深度测序处理</td>
<td>易丢失信息（强制二分类）</td>
<td>保留不确定性（概率加权）</td>
</tr>
<tr class="odd">
<td>统计功效</td>
<td>可能低估关联信号</td>
<td>提高检测灵敏度</td>
</tr>
</tbody>
</table>
<p>举个例子，若某位点的测序深度低，Hard Call 可能强制判为 0/0，而 Dosage 可记录为 0.2（更接近真实生物学状态）。</p>
</section>
</section>
<section id="saige为何偏爱-dosage-文件" class="level3">
<h3 class="anchored" data-anchor-id="saige为何偏爱-dosage-文件">SAIGE为何偏爱 Dosage 文件？</h3>
<p>SAIGE采用基于混合线性模型（Mixed Linear Model, MLM）的算法，通过引入<a href="https://mp.weixin.qq.com/s/QF-0DEPZkD3MeHn3vkqWMg">遗传关系矩阵（GRM）</a>控制群体结构。而 Dosage 文件的优势在于，其连续型变量可直接作为协变量输入，避免离散化导致的信息损失，提高模型对微弱信号的捕捉能力。相比于简单的 hard call，dosage 数据充分利用了 imputation 的概率信息，使得关联分析更敏感、更准确。不过需要注意的是，dosage 文件在使用前必须经过严格的质量控制，确保 imputation 的准确性，以避免低质量数据对分析结果的干扰。</p>
</section>
<section id="dosage-文件的生成与使用" class="level3">
<h3 class="anchored" data-anchor-id="dosage-文件的生成与使用">Dosage 文件的生成与使用</h3>
<p>生成 Dosage 文件的常用工具有 PLINK、BEAGLE、IMPUTE2 等。以 PLINK 为例，通过以下命令将 VCF 文件转换为 Dosage 文件：</p>
<pre class="{bash}"><code># 从VCF转换为Dosage格式
plink --vcf input.vcf --dosage DS --write-snplist --out output</code></pre>
<p>生成的 output.dosage 文件格式如下：</p>
<pre class="{bash}"><code>CHR SNP POS A1 A2 DOSAGE_1 DOSAGE_2 ... DOSAGE_N
1 rs123 1000 A T 0.98 1.76 ... 0.02</code></pre>
</section>
<section id="take-home-message" class="level3">
<h3 class="anchored" data-anchor-id="take-home-message">Take-Home Message</h3>
<p>dosage 文件作为基因型 imputation 的产物，在 GWAS 分析中发挥着至关重要的作用。通过充分利用 dosage 数据中的概率信息，SAIGE 等工具能够更准确地捕捉到基因型与性状之间的微妙关联，为我们揭示遗传机制提供了有力支持。在数据质量和格式得到充分保障的前提下，正确使用 dosage 文件将大大提升 GWAS 分析的精度和效率。</p>


<!-- -->

</section>

 ]]></description>
  <category>genetics</category>
  <category>bioinformatics</category>
  <category>dosage</category>
  <category>saige</category>
  <guid>https://leslie-lu.github.io/blog/2025/02/11/dosage/</guid>
  <pubDate>Tue, 11 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250211205010.png" medium="image" type="image/png"/>
</item>
<item>
  <title>祝大家新年快乐！</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/01/28/red_packet/</link>
  <description><![CDATA[ 





<p>大家除夕快乐，感谢大家一直以来对我们公众号的关注和支持！</p>
<p>新的一年，希望我们继续一起加油进步，共同深度求索更多有价值的内容！</p>


<!-- -->


 ]]></description>
  <category>r</category>
  <category>tools</category>
  <category>red packet</category>
  <category>happy new year</category>
  <guid>https://leslie-lu.github.io/blog/2025/01/28/red_packet/</guid>
  <pubDate>Tue, 28 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/2025_happy_newyear.png" medium="image" type="image/png"/>
</item>
<item>
  <title>公众号智能回复功能终于上线</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/01/21/intelligent_reply/</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250120204739.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">公众号智能回复</figcaption>
</figure>
</div>
<p>腾讯终于在公众号后台上线了智能回复功能。</p>
<p>公众号以往发表的文章成为 AI 学习的知识库，用于自动回复用户在后台提出的问题，这也是鹅厂的腾讯元器做的事情。不过，我自己试了一下，鹅厂大模型效果一般，有时候回答的问题不是很准确，还是需要人工干预。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/155cfc03b2e6f4eea482f500c46d3f9.jpg" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">test</figcaption>
</figure>
</div>
<p>欢迎大家后台体验。</p>


<!-- -->


 ]]></description>
  <category>r</category>
  <category>tools</category>
  <category>red packet</category>
  <guid>https://leslie-lu.github.io/blog/2025/01/21/intelligent_reply/</guid>
  <pubDate>Tue, 21 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/img_2025/20250120204739.png" medium="image" type="image/png"/>
</item>
<item>
  <title>新年红包封面来了</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/01/20/red_packet/</link>
  <description><![CDATA[ 





<p><a href="https://mp.weixin.qq.com/s/uTjQbwg2AVU4ZwhiGHboOQ">一年一度的事情</a>，用 R 几行代码简单画个微信红包封面，一共发放 6000 个，感谢大家一直以来对我们公众号的关注和支持！</p>
<p><a href="https://mp.weixin.qq.com/s/tsVJsqrzOJXZhmv_PhraGA">请进入公众号文章领取</a>。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/2025_happy_newyear.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">2025_happy_newyear</figcaption>
</figure>
</div>
<p>用了 magick，ggplot2，showtext 几个包，代码直接已经放进了<a href="https://mp.weixin.qq.com/s/4IR-KMAZ-q2VbI0Fz4fYRg">星球</a>里，感兴趣的同学可以去看看。</p>


<!-- -->


 ]]></description>
  <category>r</category>
  <category>tools</category>
  <category>red packet</category>
  <guid>https://leslie-lu.github.io/blog/2025/01/20/red_packet/</guid>
  <pubDate>Mon, 20 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://raw.githubusercontent.com/Leslie-Lu/WeChatOfficialAccount/main/2025_happy_newyear.png" medium="image" type="image/png"/>
</item>
<item>
  <title>R 中项目环境管理</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/01/19/renv_in_r/</link>
  <description><![CDATA[ 





<p>在 R 语言的项目开发和数据分析过程中，管理包的依赖关系一直是一个挑战。每个项目可能依赖不同版本的R包，而不同项目间的包依赖往往互相冲突。为了避免这些问题，renv 包应运而生，其相当于 python 中的 virtualenv，帮助 R 用户高效地管理和隔离项目的依赖环境。</p>
<p>这里，我们将介绍 renv 包的基本功能及使用方法，帮助大家更好地管理 R 项目的包依赖。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://rstudio.github.io/renv/articles/renv.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">renv</figcaption>
</figure>
</div>
<section id="什么是-renv-包" class="level3">
<h3 class="anchored" data-anchor-id="什么是-renv-包">什么是 renv 包</h3>
<p>renv（R Environment）是一个用于管理 R 项目环境的工具。它允许为每个 R 项目创建一个独立的虚拟环境，从而确保每个项目拥有独立且隔离的 R 包依赖。通过使用 renv，我们可以避免包版本冲突，并且可以轻松地复制和共享项目环境，确保项目在不同的机器或不同的时间点上能够重现。</p>
</section>
<section id="renv-的核心优势" class="level3">
<h3 class="anchored" data-anchor-id="renv-的核心优势">renv 的核心优势</h3>
<ul>
<li>隔离环境：每个项目有独立的库，包的版本不会相互干扰。即使我们在一个项目中更新了某个包的版本，其他项目依然可以使用旧版本。</li>
<li>项目可重现性：通过保存和共享项目的依赖信息（如包的版本），其他开发者可以使用相同的环境重新创建项目，确保研究的可重现性。</li>
<li>便捷的依赖管理：renv 会自动创建和维护 renv.lock 文件，记录项目依赖的包及其版本。这个文件是重现项目环境的关键，确保在不同机器或时间点运行时，依赖的版本完全一致。</li>
</ul>
</section>
<section id="如何在-r-中使用-renv-包" class="level3">
<h3 class="anchored" data-anchor-id="如何在-r-中使用-renv-包">如何在 R 中使用 renv 包</h3>
<section id="初始化项目" class="level4">
<h4 class="anchored" data-anchor-id="初始化项目">1. 初始化项目</h4>
<p>首先，我们需要安装并加载 renv 包。在一个新的 R 项目中，我们可以使用 <code>renv::init()</code> 来初始化 renv 环境。这将会创建一个新的 renv 文件夹并生成 renv.lock 文件。初始化后，项目中会有一个专门的库（renv/library）存放该项目所需的所有 R 包，同时生成 renv.lock 文件，这个文件记录了所有依赖包的具体版本。</p>
</section>
<section id="安装依赖包" class="level4">
<h4 class="anchored" data-anchor-id="安装依赖包">2. 安装依赖包</h4>
<p>当我们开始开发项目时，可以通过 <code>install.packages()</code> 安装所需的 R 包，renv 会将这些包安装到项目的独立环境中。</p>
<p>例如，安装 ggplot2` 包后，renv 会自动更新 renv.lock 文件，记录包的安装信息及其版本。</p>
</section>
<section id="恢复项目环境" class="level4">
<h4 class="anchored" data-anchor-id="恢复项目环境">3. 恢复项目环境</h4>
<p>如果我们或者其他人需要在另一个环境中重新运行该项目，renv 允许我们通过 <code>renv::restore()</code> 命令恢复项目的所有依赖包。这个命令会根据 renv.lock 文件自动安装所有所需的包及其指定版本，从而确保每次运行时的包版本一致，避免了环境问题。</p>
</section>
<section id="查看并更新项目依赖" class="level4">
<h4 class="anchored" data-anchor-id="查看并更新项目依赖">4. 查看并更新项目依赖</h4>
<p>如果我们需要查看项目当前依赖的所有包，可以使用 <code>renv::status()</code> 命令，它会列出所有包及其状态。而当我们需要更新项目中的某个包时，可以使用 <code>renv::update()</code> 命令，它会根据当前最新的包版本进行更新，并更新 renv.lock 文件。</p>
</section>
<section id="分享项目" class="level4">
<h4 class="anchored" data-anchor-id="分享项目">5. 分享项目</h4>
<p>当我们完成项目后，可以将 renv.lock 文件和源代码一起通过 github 分享给其他人，其他人只需要使用 <code>renv::restore()</code> 来恢复项目环境，无需担心包依赖的问题。</p>
</section>
</section>
<section id="renv-与-packrat-的对比" class="level3">
<h3 class="anchored" data-anchor-id="renv-与-packrat-的对比">renv 与 packrat 的对比</h3>
<p>在 renv 之前，R 中有一个较为类似的包叫做 packrat，它也提供环境管理的功能。然而，renv 相比于 packrat 有几个优势：</p>
<ul>
<li>更简洁：renv 比 packrat 更轻量，易于使用和理解。</li>
<li>更强的兼容性：renv 与 R 版本的兼容性更好，适应性更强，能够更好地处理依赖关系。</li>
<li>性能更高：renv 在项目初始化、恢复和更新时速度更快。</li>
</ul>
<p>因此，renv 在目前 R 项目环境管理中得到了更广泛的使用。</p>


<!-- -->

</section>

 ]]></description>
  <category>r</category>
  <category>tools</category>
  <category>version control</category>
  <guid>https://leslie-lu.github.io/blog/2025/01/19/renv_in_r/</guid>
  <pubDate>Sun, 19 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://rstudio.github.io/renv/articles/renv.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Tracy-Widom Statistics</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/01/07/tracy_widom_test/</link>
  <description><![CDATA[ 





<p>在现代基因组学和统计学中，Tracy-Widom 统计量（Tracy-Widom statistics）是一个广泛应用于分析主成分分析（PCA）结果的重要工具。尤其在遗传学、群体学和数据科学等领域，Tracy-Widom 统计量可以帮助研究者评估主成分的统计显著性，为后续的研究分析提供强有力的支持。</p>
<p>这里，我们将带大家深入了解 Tracy-Widom 统计量的概念、应用以及如何通过 twstats 程序进行计算。</p>
<section id="什么是-tracy-widom-统计量" class="level3">
<h3 class="anchored" data-anchor-id="什么是-tracy-widom-统计量">什么是 Tracy-Widom 统计量</h3>
<p>Tracy-Widom 统计量来源于随机矩阵理论，它用于描述随机矩阵的特征值分布，尤其是最大特征值的行为。在大规模数据分析中，Tracy-Widom 分布成为评估主成分显著性的标准工具。</p>
<p>具体来说，Tracy-Widom统计量用于检验 PCA 中主成分的显著性。我们前面讲过<a href="https://mp.weixin.qq.com/s/C_41H2pcDHlYMODcb3S9ew">使用 Eigensoft 中的 smartPCA 进行 PCA 分析</a>。PCA 通常会计算各主成分的方差，并根据这些方差来筛选重要的主成分。然而，如何判断哪些主成分是由于数据的真实结构而非随机噪声引起的呢？这正是Tracy-Widom统计量能够发挥作用的地方，Tracy-Widom 统计量可以帮助我们判断哪些主成分是统计显著的。</p>
<p>Tracy-Widom分布的核心思想是：如果我们从一个高维随机矩阵中提取主成分，那么最大主成分的值将服从特定的统计分布。通过计算 Tracy-Widom统计量，研究者可以对 PCA 中的每个主成分进行显著性检验，评估其是否真的反映了数据的结构，而非偶然性噪声。</p>
</section>
<section id="twstats-程序与-tracy-widom-统计量" class="level3">
<h3 class="anchored" data-anchor-id="twstats-程序与-tracy-widom-统计量">twstats 程序与 Tracy-Widom 统计量</h3>
<p>Eigensoft 中的 twstats 程序可以用来计算 Tracy-Widom 统计量。twstats 程序通过计算给定数据集的特征值分布，具体来说，twstats 程序会根据 Tracy-Widom 分布为每个主成分计算一个 p 值，从而帮助研究者判断哪些主成分是值得关注的。</p>
<p>twstats 适用于随机标记数据，但不适用于含有祖先信息标记（ancestry-informative markers）的数据。它假设数据集是由随机标记构成，这意味着在分析过程中不应该包含任何可能揭示祖先信息的标记（如遗传标记）。因为在包含祖先信息的标记数据中，可能会出现基因组混合 LD（连锁不平衡），这会违背Tracy-Widom统计量的基本假设。如果数据集含有祖先信息标记，Tracy-Widom 统计量的结果可能会不准确。</p>
<p>Eigensoft 中的 twstats 程序示例如下：</p>
<pre class="{perl}"><code>#!/usr/bin/perl

$command = "../bin/twstats";
$command .= " -t twtable ";
$command .= " -i twexample.eval ";
$command .= " -o twexample.out";
print("$command\n");
system("$command");</code></pre>


<!-- -->

</section>

 ]]></description>
  <category>bioinformatics</category>
  <category>biostatistics</category>
  <category>pca</category>
  <guid>https://leslie-lu.github.io/blog/2025/01/07/tracy_widom_test/</guid>
  <pubDate>Tue, 07 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412262344320.png" medium="image" type="image/png"/>
</item>
<item>
  <title>10 个常用终端命令</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/01/06/terminal_commands/</link>
  <description><![CDATA[ 





<p>终端是开发者与操作系统之间的重要桥梁，通过它，我们可以快速进行各种操作。无论是查找文件、修改权限，还是处理文本文件，熟练掌握一些基础的终端命令可以显著提高工作效率。</p>
<p>这里，我们来介绍 10 个每个开发者都应该知道的终端命令，它们能帮助我们在日常开发工作中更加高效地使用终端。</p>
<section id="grep---查找内容" class="level3">
<h3 class="anchored" data-anchor-id="grep---查找内容">1. grep - 查找内容</h3>
<p>grep 是一个强大的搜索命令，用于在文件中查找指定的文本内容。它常用于查找特定的关键词，支持正则表达式，功能非常强大。</p>
<p>常见用法：</p>
<pre class="{bash}"><code>grep "let's find something" file.[txt,json,js,md,etc]</code></pre>
<p>在 file.txt 文件中查找匹配 pattern 的行。</p>
<pre class="{bash}"><code># case-insensitive search
grep -i "pattern" file.txt
# count occurrences
grep -c "pattern" file.txt
# search for multiple patterns
grep -e "pattern1" -e "pattern2" file.txt
# recursive search in directories
grep -o -r "pattern" /path/to/directory | wc -l</code></pre>
</section>
<section id="man---查看命令帮助" class="level3">
<h3 class="anchored" data-anchor-id="man---查看命令帮助">2. man - 查看命令帮助</h3>
<p>man 是 <code>manual</code> 的缩写，用于查看命令的帮助文档。当我们对某个命令不熟悉时，可以通过 man 命令查看其用法、选项和参数等详细信息。</p>
<pre class="{bash}"><code>man grep</code></pre>
<p>查看 grep 命令的帮助文档。</p>
</section>
<section id="cat---查看文件内容" class="level3">
<h3 class="anchored" data-anchor-id="cat---查看文件内容">3. cat - 查看文件内容</h3>
<p>cat 是一个用于查看文件内容的命令，它可以一次性显示整个文件的内容。如果文件较大，可以结合其他命令来分页显示内容。</p>
<pre class="{bash}"><code>cat file.txt</code></pre>
<p>显示 file.txt 文件的所有内容。</p>
<pre class="{bash}"><code># combine multiple files
cat file1.txt file2.txt &gt; combined.txt
# create a new file
cat &gt; newfile.txt</code></pre>
</section>
<section id="head---查看文件开头" class="level3">
<h3 class="anchored" data-anchor-id="head---查看文件开头">4. head - 查看文件开头</h3>
<p>head 命令用于显示文件的前几行内容。默认情况下，它会显示文件的前10行，但可以通过参数指定显示行数。</p>
<pre class="{bash}"><code>head -n 20 file.txt</code></pre>
<p>显示文件 file.txt 的前20行。</p>
</section>
<section id="awk---文本处理工具" class="level3">
<h3 class="anchored" data-anchor-id="awk---文本处理工具">5. awk - 文本处理工具</h3>
<p>我们在这篇文章<a href="https://mp.weixin.qq.com/s/K8yxoqzLcOE45LImJqC98A">探索 AWK</a>已经有过介绍。</p>
</section>
<section id="sed---流编辑器" class="level3">
<h3 class="anchored" data-anchor-id="sed---流编辑器">6. sed - 流编辑器</h3>
<p>sed 是一个流编辑器，用于处理和修改文件内容。它通过匹配模式和替换操作，可以高效地修改文本文件。</p>
<pre class="{bash}"><code># replace a word or pattern in a file
sed -i '' 's/old/new/g' file.md</code></pre>
<p>-i 选项表示<code>就地编辑</code>（in-place editing），即直接修改文件内容。如果不使用 -i，sed 会将结果输出到标准输出，而不会修改原文件。-i 选项后面通常需要一个备份文件的扩展名。如果提供一个空字符串 ’’，表示不创建备份文件。如果不提供这个参数，sed 会默认创建一个备份文件。s 表示替换操作，g 表示全局替换（global），即替换每一行中所有匹配的 old，而不仅仅是第一个匹配项。</p>
<pre class="{bash}"><code># print specific lines
sed -n '10,20p' file.json</code></pre>
<p>-n 选项表示<code>静默模式</code>（silent mode），只有通过 p 命令显式打印的行才会输出。<code>10,20p</code> 表示打印第 10 到第 20 行。</p>
<pre class="{bash}"><code># regular expression
sed 's/[0-9]*/X/g' file.csv</code></pre>
<p>将文件中的数字替换为 X。</p>
<pre class="{bash}"><code># rename files in bulk
for file in *.txt; do 
  mv "$file" "$(echo "$file" | sed 's/.txt$/.md/')"
done</code></pre>
<p>echo “$file” 是为了将文件名传递给 sed 命令，然后将 .txt 后缀替换为 .md。</p>
</section>
<section id="tail---查看文件末尾" class="level3">
<h3 class="anchored" data-anchor-id="tail---查看文件末尾">7. tail - 查看文件末尾</h3>
<p>tail 命令用于查看文件的最后几行内容，特别适合查看日志文件的最新信息。与 head 命令相反，tail 显示的是文件的结尾部分。</p>
<pre class="{bash}"><code>tail -f logfile.log</code></pre>
<p>实时查看日志，-f 选项表示<code>跟踪</code>（follow），即实时显示文件的更新内容。</p>
</section>
<section id="chmod---修改文件权限" class="level3">
<h3 class="anchored" data-anchor-id="chmod---修改文件权限">8. chmod - 修改文件权限</h3>
<p>每个文件和目录都有权限属性，用于控制用户对文件的访问权限。权限属性包括读、写、执行权限，分别对应 r、w、x。用户组包括所有者、所属组和其他用户，分别对应 owner、group、others。chmod 命令用于修改文件或目录的访问权限，可以通过符号模式或数字模式来设置权限。</p>
<p>符号模式包括 u（所有者）、g（所属组）、o（其他用户）、a（所有用户），加号 + 表示添加权限，减号 - 表示删除权限，等号 = 表示设置权限。</p>
<pre class="{bash}"><code>chmod +x script.sh</code></pre>
<p>给 script.sh 脚本添加执行权限。</p>
<p>数字模式包括 0-7，分别对应 rwx 权限。r=4，w=2，x=1。例如，755 表示所有者可读写执行，所属组和其他用户可读执行；777 表示所有用户可读写执行。</p>
<pre class="{bash}"><code>chmod 755 file.txt</code></pre>
<p>递归修改目录权限：</p>
<pre class="{bash}"><code>chmod -R 755 /path/to/directory</code></pre>
</section>
<section id="xargs---将输出作为参数传递" class="level3">
<h3 class="anchored" data-anchor-id="xargs---将输出作为参数传递">9. xargs - 将输出作为参数传递</h3>
<p>xargs 命令常与其他命令结合使用，它可以将标准输入转换为命令行参数，并将其传递给后续的命令。</p>
<pre class="{bash}"><code>echo "file1 file2 file3" | xargs rm</code></pre>
<p>将 file1 file2 file3 传递给 rm 命令，删除这三个文件。</p>
<p>结合 find 使用：</p>
<pre class="{bash}"><code>find . -name "*.txt" | xargs rm</code></pre>
<p>压缩文件：</p>
<pre class="{bash}"><code>ls *.log | xargs tar -czvf logs.tar.gz</code></pre>
</section>
<section id="find---查找文件" class="level3">
<h3 class="anchored" data-anchor-id="find---查找文件">10. find - 查找文件</h3>
<p>find 是一个非常强大的文件查找命令，它可以根据不同的条件查找文件。可以按文件名、大小、修改时间等进行搜索。</p>
<p>常见用法：</p>
<pre class="{bash}"><code>find /path/to/search -name "astro"</code></pre>
<p>在指定路径下查找所有 astro 文件。</p>
<pre class="{bash}"><code># clean up log files
find /var/log -type f -name "*.log" -mtime +7 -delete</code></pre>
<p>-type f 表示只查找文件，-mtime +7 表示修改时间在 7 天前的文件，-delete 表示删除这些文件。</p>
<pre class="{bash}"><code># backup files
find /path/to/files -name "*.txt" -exec cp {} /path/to/backup \;</code></pre>
<p>-exec 选项用于执行其他命令，{} 表示查找到的文件，; 表示命令结束。</p>
</section>
<section id="takeaway" class="level3">
<h3 class="anchored" data-anchor-id="takeaway">takeaway</h3>
<p>掌握这些常用的终端命令能帮助我们在开发和运维工作中事半功倍。每个命令都有其特定的功能，熟练运用它们，我们将能够更高效地处理文件、查找信息、修改权限，甚至进行复杂的文本处理。</p>


<!-- -->

</section>

 ]]></description>
  <category>bioinformatics</category>
  <category>tools</category>
  <category>programming</category>
  <category>linux</category>
  <category>terminal</category>
  <guid>https://leslie-lu.github.io/blog/2025/01/06/terminal_commands/</guid>
  <pubDate>Mon, 06 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://www.freecodecamp.org/news/content/images/2022/03/pexels-pixabay-207580.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>探索 AWK</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/01/02/awk/</link>
  <description><![CDATA[ 





<p>在大数据分析和生物信息学领域，处理文本数据是一项常见的任务。awk 是一种功能强大的文本处理工具，它允许用户对文本文件进行灵活的模式匹配、过滤、计算和格式化。</p>
<p>这里，我们将介绍 awk 的基本概念、常用命令及其在实际数据处理中的应用。</p>
<section id="什么是-awk" class="level3">
<h3 class="anchored" data-anchor-id="什么是-awk">什么是 AWK</h3>
<p>awk 是一种编程语言，用于处理和分析文本文件，尤其是在数据处理和报告生成方面非常有用。其名称来源于其三位创造者的姓氏首字母：Alfred Aho、Peter Weinberger 和 Brian Kernighan。</p>
<p>awk 处理文本文件时，会将文件的每一行视为一个记录，每一行中的字段（由空格或制表符分隔）作为字段。通过指定模式和动作，awk 可以对文件内容进行筛选、处理并输出结果。</p>
</section>
<section id="awk-的基本语法" class="level3">
<h3 class="anchored" data-anchor-id="awk-的基本语法">AWK 的基本语法</h3>
<p>awk 命令的基本语法如下：</p>
<pre class="{bash}"><code>awk [OPTION] 'CONDITION {PROCESS}' FILENAME</code></pre>
<p>在 AWK 中，有一些内建的变量非常实用： - $0 : 表示当前行的所有字段。 - $n : 表示第n列字段。比如 $1 表示第一列，$4 表示第四列。 - NR : 当前处理的行号（记录号）。 - NF : 当前行的字段数。</p>
<p>例如，以下命令会打印出文件中所有的行：</p>
<pre class="{bash}"><code>awk '{ print }' filename</code></pre>
<p>如果我们只想打印文件中第二列的数据，可以这样写：</p>
<pre class="{bash}"><code>awk '{ print $2 }' filename</code></pre>
<p>其中，$2 代表第二列，$1 代表第一列，依此类推。</p>
</section>
<section id="常用-awk-命令" class="level3">
<h3 class="anchored" data-anchor-id="常用-awk-命令">常用 AWK 命令</h3>
<section id="打印特定字段" class="level4">
<h4 class="anchored" data-anchor-id="打印特定字段">1. 打印特定字段</h4>
<p>打印某一列的内容是 awk 最常见的用途之一。选择染色体 2 上的变异（保留表头）：</p>
<pre class="{bash}"><code>awk 'NR==1 || $1==2 {print $0}' sumstats.txt | head</code></pre>
<p><code>NR==1</code> 如果是第一行（通常是表头），打印。<code>$1==2</code> 如果第一列是染色体号为 2 的变异，打印这一行。这段代码保留了表头，并筛选出染色体 2 上的所有变异。</p>
</section>
<section id="使用条件语句筛选数据" class="level4">
<h4 class="anchored" data-anchor-id="使用条件语句筛选数据">2. 使用条件语句筛选数据</h4>
<p>我们可以使用 if 语句来根据特定条件筛选数据。例如，选择全基因组显著的变异（p 值 &lt; 5e-8）：</p>
<pre class="{bash}"><code>awk 'NR==1 || $13&lt;5e-8 {print $0}' sumstats.txt | head</code></pre>
<p><code>$13&lt;5e-8</code> 选择第 13 列（P 值列）小于 5e-8 的行。这个命令用于筛选全基因组显著的变异数据。</p>
</section>
<section id="计算和统计" class="level4">
<h4 class="anchored" data-anchor-id="计算和统计">3. 计算和统计</h4>
<p>awk 还可以用于计算数据，比如求和、平均值等。假设我们有一个文件，每行代表一个学生的成绩，我们想计算总成绩：</p>
<pre class="{bash}"><code>awk '{ sum += $2 } END { print sum }' grades.txt</code></pre>
<p>在这个例子中，$2 是成绩列，sum += $2 会累加第二列的所有成绩，END 是在所有数据处理完后执行的操作。</p>
</section>
<section id="格式化输出" class="level4">
<h4 class="anchored" data-anchor-id="格式化输出">4. 格式化输出</h4>
<p>awk 还支持格式化输出，类似于 <code>C 语言</code>中的 <code>printf</code>。例如，想要将数据格式化为固定宽度，可以这样做：</p>
<pre class="{bash}"><code>awk '{ printf "%-10s %-5s %-8s\n", $1, $2, $3 }' data.txt</code></pre>
<p>这会将每一行的三列数据按指定格式输出，其中 %s 表示字符串，-10 表示左对齐并占用 10 个字符宽度。</p>
</section>
<section id="多文件处理" class="level4">
<h4 class="anchored" data-anchor-id="多文件处理">5. 多文件处理</h4>
<p>awk 也可以同时处理多个文件，甚至将不同文件的内容组合起来。例如：</p>
<pre class="{bash}"><code>awk '{ print FILENAME ": " $0 }' file1.txt file2.txt</code></pre>
<p>这里，FILENAME 是 awk 内置的变量，表示当前处理的文件名。<code>$0</code> 表示当前行的内容（即整行数据）。<code>print FILENAME ": " $0</code> 这部分的作用是打印文件名后跟一个冒号和当前行的内容。</p>
</section>
</section>
<section id="awk-在生物信息学中的应用" class="level3">
<h3 class="anchored" data-anchor-id="awk-在生物信息学中的应用">AWK 在生物信息学中的应用</h3>
<p>在生物信息学数据分析中，awk 被广泛应用于处理基因组学数据、GWAS 数据、RNA-Seq 数据等。这些数据通常包含数百万行，我们可以使用 awk 来快速筛选、过滤、提取特定信息。例如，以下是一些常见的应用场景：</p>
<section id="从-vcf-文件中提取信息" class="level4">
<h4 class="anchored" data-anchor-id="从-vcf-文件中提取信息">1. 从 VCF 文件中提取信息</h4>
<p>VCF（Variant Call Format）文件是基因组变异的标准存储格式，通常包含变异位点的各种信息。如果我们想提取 VCF 文件中所有发生变异的基因，可以使用以下命令：</p>
<pre class="{bash}"><code>awk '$1 !~ /^#/ { print $1, $2, $4, $5 }' variants.vcf</code></pre>
<p>这条命令会跳过以 <code>#</code> 开头的注释行，输出变异位点的染色体位置、参考碱基和变异碱基。</p>
</section>
<section id="清洗-rna-seq-数据" class="level4">
<h4 class="anchored" data-anchor-id="清洗-rna-seq-数据">2. 清洗 RNA-Seq 数据</h4>
<p>RNA-Seq 数据的处理通常需要将表达量数据中的低表达基因或特定条件下的数据进行筛选。比如，删除表达量小于某一阈值的基因：</p>
<pre class="{bash}"><code>awk '$2 &gt; 10 { print $1, $2 }' gene_expression.txt</code></pre>
<p>这里，$2 &gt; 10 表示筛选出表达量大于 10 的基因。</p>


<!-- -->

</section>
</section>

 ]]></description>
  <category>bioinformatics</category>
  <category>tools</category>
  <category>programming</category>
  <category>awk</category>
  <category>linux</category>
  <guid>https://leslie-lu.github.io/blog/2025/01/02/awk/</guid>
  <pubDate>Thu, 02 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202501021926596.png" medium="image" type="image/png"/>
</item>
<item>
  <title>使用 Hail 输出 PLINK 文件：一步到位</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2025/01/01/export_plink/</link>
  <description><![CDATA[ 





<p>在现代基因组学研究中，数据的处理和转换是至关重要的一环。PLINK 文件（包括 .bed, .bim, .fam 三个文件）是遗传学研究中的标准文件格式之一，经常用于 GWAS（全基因组关联研究）等分析。对于研究人员来说，将原始数据转换为 PLINK 文件格式是分析过程中的关键步骤。而 Hail，作为一个处理大规模基因数据的高效工具，提供了方便的方法来导出这些文件。</p>
<p>前面，我们介绍了如何<a href="https://mp.weixin.qq.com/s/rujbT3WC821spr1AKg5AzQ">掌握 Hail</a>，这里，我们将介绍如何使用 Hail 的 export_plink 功能，轻松导出 PLINK 文件，并深入探讨如何在数据预处理和分析过程中使用它。</p>
<section id="使用-hail-导出-plink-文件" class="level3">
<h3 class="anchored" data-anchor-id="使用-hail-导出-plink-文件">使用 Hail 导出 PLINK 文件</h3>
<p>Hail 提供了一个非常便利的函数 <code>export_plink()</code>，能够将 Hail MatrixTable 格式的数据导出为 PLINK 所需的三种文件格式：<code>.bed</code>、<code>.bim</code> 和 <code>.fam</code>。这些文件是 PLINK 软件包用于处理和分析基因型数据的标准文件格式。</p>
<section id="载入数据" class="level4">
<h4 class="anchored" data-anchor-id="载入数据">1. 载入数据</h4>
<p>首先，我们需要加载基因型数据，通常这些数据存储在 VCF 格式的文件中。使用 Hail 的 <code>import_vcf()</code> 函数，可以轻松导入 VCF 文件。</p>
<div id="b1c97748" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hail <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hl</span>
<span id="cb1-2"></span>
<span id="cb1-3">mt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hl.import_vcf(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file://path_to_vcf_data.vcf'</span>, force_bgz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, reference_genome<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GRCh38'</span>)</span></code></pre></div>
</div>
</section>
<section id="数据注释" class="level4">
<h4 class="anchored" data-anchor-id="数据注释">2. 数据注释</h4>
<p>为了确保导出的 PLINK 文件包含完整的信息，我们通常需要对数据进行注释。例如，标注样本的性别、家族信息等。这可以通过 <code>annotate_cols()</code> 函数完成。</p>
<div id="7ab8955e" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">mt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mt.annotate_cols(</span>
<span id="cb2-2">    pat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>,         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 父代 ID</span></span>
<span id="cb2-3">    mat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>,         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 母代 ID</span></span>
<span id="cb2-4">    is_female<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 是否为女性</span></span>
<span id="cb2-5">    pheno<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 表型（-9 表示缺失值）</span></span>
<span id="cb2-6">)</span></code></pre></div>
</div>
<p>在这个例子中，我们为每个样本添加了父母 ID、性别和表型信息。</p>
</section>
<section id="导出为-plink-文件" class="level4">
<h4 class="anchored" data-anchor-id="导出为-plink-文件">3. 导出为 PLINK 文件</h4>
<p>现在，数据已经准备好，可以使用 <code>export_plink()</code> 函数将其导出为 PLINK 所需的 <code>.bed</code>, <code>.bim</code>, <code>.fam</code> 文件。</p>
<div id="2c6c7e3a" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">hl.export_plink(</span>
<span id="cb3-2">    mt, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'output/example'</span>, </span>
<span id="cb3-3">    fam_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.s,       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 样本的 ID</span></span>
<span id="cb3-4">    ind_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.s,       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 样本的 ID</span></span>
<span id="cb3-5">    pat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.pat_id,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 父代 ID</span></span>
<span id="cb3-6">    mat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.mat_id,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 母代 ID</span></span>
<span id="cb3-7">    is_female<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.is_female, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 性别信息</span></span>
<span id="cb3-8">    pheno<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.pheno     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 表型信息</span></span>
<span id="cb3-9">)</span></code></pre></div>
</div>
<p>参数解析： - fam_id: 样本的家族 ID，通常使用样本的 ID（即 mt.s）。 - ind_id: 样本的个体 ID，这里使用 mt.s 作为样本 ID。 - pat_id 和 mat_id: 分别代表父母的 ID，通常可以使用默认值 0 表示没有父母信息，或者根据数据 - is_female: 样本的性别信息，Hail 会根据性别表达为 1（男性）或 2（女性）。这里通过注释 is_female 字段来指示性别。 - pheno: 表型数据，可以是布尔值（如是否患病）或者是数值型数据（如身高、体重等）。</p>
<p>导出的文件会包含以下三部分：</p>
<ul>
<li><code>output/example.bed</code>: 存储基因型数据（二进制格式）。</li>
<li><code>output/example.bim</code>: 包含变异信息，如染色体、位置、参考和变异等。</li>
<li><code>output/example.fam</code>: 包含样本信息，如家族 ID、个体 ID、父母 ID、性别和表型。</li>
</ul>
</section>
</section>
<section id="进阶功能批量导出与错误处理" class="level3">
<h3 class="anchored" data-anchor-id="进阶功能批量导出与错误处理">进阶功能：批量导出与错误处理</h3>
<p>当处理大量基因数据时，可能会涉及多个数据批次。在这种情况下，使用批处理来导出 PLINK 文件变得尤为重要。例如，我们可以使用 Python 脚本批量处理多个数据集，并通过适当的异常处理机制确保过程顺利进行。</p>
<div id="60be587c" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> subprocess</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 批量导出并上传</span></span>
<span id="cb4-4">batch_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch1.vcf'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch2.vcf'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch3.vcf'</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 示例批次</span></span>
<span id="cb4-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> batch_file <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> batch_files:</span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 导入 VCF 文件并处理</span></span>
<span id="cb4-7">    mt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hl.import_vcf(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'file://</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, force_bgz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, reference_genome<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GRCh38'</span>)</span>
<span id="cb4-8">    mt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mt.annotate_cols(</span>
<span id="cb4-9">        pat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>,</span>
<span id="cb4-10">        mat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>,</span>
<span id="cb4-11">        is_female<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb4-12">        pheno<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb4-13">    )</span>
<span id="cb4-14">    </span>
<span id="cb4-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 导出 PLINK 文件</span></span>
<span id="cb4-16">    hl.export_plink(mt, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'output/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, fam_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.s, ind_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.s, pat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.pat_id, mat_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.mat_id, is_female<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.is_female, pheno<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mt.pheno)</span>
<span id="cb4-17"></span>
<span id="cb4-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 上传到远程存储</span></span>
<span id="cb4-19">    subprocess.run([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dx'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upload'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'output/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.bed'</span>])</span>
<span id="cb4-20">    subprocess.run([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dx'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upload'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'output/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.bim'</span>])</span>
<span id="cb4-21">    subprocess.run([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dx'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upload'</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'output/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.fam'</span>])</span></code></pre></div>
</div>


<!-- -->

</section>

 ]]></description>
  <category>hail</category>
  <category>bioinformatics</category>
  <category>dnanexus</category>
  <category>genomics</category>
  <category>plink</category>
  <category>vcf</category>
  <guid>https://leslie-lu.github.io/blog/2025/01/01/export_plink/</guid>
  <pubDate>Wed, 01 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412282307896.png" medium="image" type="image/png"/>
</item>
<item>
  <title>掌握 Hail</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2024/12/28/hail/</link>
  <description><![CDATA[ 





<p>在生物信息学领域，处理大规模基因组数据尤其是 VCF（Variant Call Format）格式的数据常常是一个挑战。传统的处理方法可能面临性能瓶颈，而 Hail 作为一个专为大规模基因组数据分析设计的工具，其高效性和可扩展性使其在基因组学界得到了广泛应用。</p>
<p>这里，我们将介绍 Hail 的基本使用技巧，并探讨如何在 DNAnexus 平台上导入和处理 pVCF 数据。</p>
<section id="什么是hail" class="level3">
<h3 class="anchored" data-anchor-id="什么是hail">什么是Hail？</h3>
<p>Hail 是一个开源的、专为基因组数据分析而设计的 Python 库，特别适合用于处理大规模的 VCF 文件。它在处理和分析基因组数据时，提供了比传统工具（如 GATK）更高效的性能，尤其在进行大规模 GWAS（基因组全关联研究）、变异注释和基因型分析时，它能够显著提高计算效率。</p>
<p>Hail 的核心优势在于其对分布式计算的支持，能够利用 Spark 集群进行大数据的并行处理。此外，Hail 也与很多常见的生物信息学工具兼容，比如 VCF 工具、Plink 等，使得它能够轻松集成到现有的生物信息学分析管道中。</p>
</section>
<section id="hail-在-dnanexus-平台上的应用" class="level3">
<h3 class="anchored" data-anchor-id="hail-在-dnanexus-平台上的应用">Hail 在 DNAnexus 平台上的应用</h3>
<p>在 DNAnexus 平台上，我们可以直接使用 Hail 进行大规模基因组数据分析。平台提供了一个强大的计算环境，可以通过 Hail 轻松地读取、处理和分析 VCF 文件。以下是一些常见的应用场景和技巧：</p>
<section id="使用hail加载和处理vcf文件" class="level4">
<h4 class="anchored" data-anchor-id="使用hail加载和处理vcf文件">1. 使用Hail加载和处理VCF文件</h4>
<p>在 DNAnexus 平台上，VCF 文件通常存储在项目中，用户可以直接加载到 Hail 中进行处理。Hail 提供了简便的 API 来读取 VCF 文件，下面是一个简单的示例，展示如何在 Hail 中加载 VCF 文件：</p>
<div id="a4ee2abd" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hail <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hl</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 加载VCF文件</span></span>
<span id="cb1-4">vcf_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gs://my_bucket/my_data.vcf.bgz'</span></span>
<span id="cb1-5">mt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hl.import_vcf(vcf_file)</span></code></pre></div>
</div>
<p>在这个示例中，我们使用 <code>hl.import_vcf()</code> 方法来加载 VCF 文件，<code>gs://</code> 是 Google Cloud Storage（GCS）路径格式，在 DNAnexus 平台上，我们也可以使用相应的路径来引用存储在平台上的 VCF 文件。</p>
</section>
<section id="使用-hail-进行数据质量控制" class="level4">
<h4 class="anchored" data-anchor-id="使用-hail-进行数据质量控制">2. 使用 Hail 进行数据质量控制</h4>
<p>在基因组数据分析中，数据质量控制（QC）是不可或缺的一部分，Hail 为此提供了多种功能，例如去除低质量的样本或变异、过滤变异的深度或基因型质量等。</p>
<p>以下是一个常见的 QC 操作示例，过滤掉低质量的变异：</p>
<div id="985e04aa" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 过滤低质量变异</span></span>
<span id="cb2-2">mt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mt.filter_rows(mt.qual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span></code></pre></div>
</div>
<p>通过这样的操作，我们可以去除低质量的变异，保证后续分析结果的准确性。</p>
</section>
<section id="基于-hail-进行群体遗传学分析" class="level4">
<h4 class="anchored" data-anchor-id="基于-hail-进行群体遗传学分析">3. 基于 Hail 进行群体遗传学分析</h4>
<p>Hail 还广泛应用于群体遗传学分析，例如计算群体间的变异频率、构建群体的基因型矩阵、进行 GWAS 分析等。Hail 的高效数据处理能力使其能够轻松处理海量数据，并进行并行计算，极大地提升了数据分析的效率。</p>
</section>
</section>
<section id="pvcf-数据导入教程" class="level3">
<h3 class="anchored" data-anchor-id="pvcf-数据导入教程">pVCF 数据导入教程</h3>
<p>在基因组学中，VCF 文件是常见的变异数据格式，而 pVCF（partitioned VCF）格式则在处理极大规模数据时显得尤为重要。pVCF 将数据分割成多个小文件，避免了单个文件过大导致的内存问题，并使得数据处理更加灵活高效。</p>
<p>在 DNAnexus 平台上，我们可以利用 Hail 来导入 pVCF 数据，具体步骤如下：</p>
<section id="启动-hail-应用" class="level4">
<h4 class="anchored" data-anchor-id="启动-hail-应用">1. 启动 Hail 应用</h4>
<p>在 DNAnexus 平台上，首先需要启动一个 Hail 集群环境。我们可以使用 dx 命令行工具或通过平台的应用界面启动 Hail 应用。</p>
</section>
<section id="加载-pvcf-文件" class="level4">
<h4 class="anchored" data-anchor-id="加载-pvcf-文件">2. 加载 pVCF 文件</h4>
<p>使用 Hail 的 <code>import_vcf</code> 方法加载 pVCF 文件。需要注意的是，pVCF 文件通常由多个分区组成，因此在导入时需要确保指定正确的路径。</p>
<div id="9bc524dd" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> hail <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> hl</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 导入pVCF文件</span></span>
<span id="cb3-4">mt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hl.import_vcf(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gs://my_bucket/my_pvcf_file.part*'</span>)</span></code></pre></div>
</div>
</section>
<section id="数据分析与处理" class="level4">
<h4 class="anchored" data-anchor-id="数据分析与处理">3. 数据分析与处理</h4>
<p>加载 pVCF 数据后，我们可以利用 Hail 提供的各种功能对数据进行分析。常见的分析操作包括数据过滤、变异注释和群体遗传学分析等。</p>
<blockquote class="blockquote">
<p>小技巧：在 DNAnexus 平台上，我们可以利用分布式计算资源加速分析过程。Hail 与 Apache Spark 紧密集成，可以在集群上并行处理数据，从而大大缩短分析时间。</p>
</blockquote>


<!-- -->

</section>
</section>

 ]]></description>
  <category>hail</category>
  <category>bioinformatics</category>
  <category>dnanexus</category>
  <category>genomics</category>
  <guid>https://leslie-lu.github.io/blog/2024/12/28/hail/</guid>
  <pubDate>Sat, 28 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412282307896.png" medium="image" type="image/png"/>
</item>
<item>
  <title>使用 Eigensoft 中的 smartPCA 进行 PCA 分析</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2024/12/26/smartpca/</link>
  <description><![CDATA[ 





<p><a href="https://mp.weixin.qq.com/s/XChFmrV_vP3BNRUdaQnnDw">昨天</a>我们介绍了如何使用 plink 进行 pca 分析，这里，我们将介绍如何使用 Eigensoft 包中的工具 smartPCA 进行 PCA 分析。</p>
<section id="smartpca" class="level3">
<h3 class="anchored" data-anchor-id="smartpca">smartPCA</h3>
<p>smartPCA 是 <a href="https://hsph.harvard.edu/research/price-lab/software/">Eigensoft 包</a>中的一个工具，专门用于基因型数据的 PCA 分析。它可以处理大规模的遗传数据集，输出主成分和相应的特征值，帮助我们识别数据中最重要的变异模式。</p>
<section id="准备数据" class="level4">
<h4 class="anchored" data-anchor-id="准备数据">1. 准备数据</h4>
<p>首先，需要准备三个输入文件，这些文件包含了基因型数据的核心信息： - SNP 文件（.snp）：包含 SNP 位置信息，如 SNP 名称、染色体、遗传位置、参考等位基因和替代等位基因。 - 个体文件（.ind）：包含个体信息，如个体名称、性别、种群信息等。 - 基因型文件（.geno）：包含实际的基因型数据，每个个体对应一个SNP位点的基因型数据。</p>
<p>这些文件通常采用 EIGENSTRAT 格式，智能地将数据组织成易于处理和分析的形式。</p>
</section>
<section id="编写参数文件" class="level4">
<h4 class="anchored" data-anchor-id="编写参数文件">2. 编写参数文件</h4>
<p>为了运行 smartPCA，需要准备一个参数文件（.par），该文件指定了输入文件和输出文件的路径、PCA 分析的相关设置。一个典型的参数文件示例如下：</p>
<pre class="{bash}"><code>genotypename: &lt;GENOTYPE_DATA&gt;.geno
snpname: &lt;GENOTYPE_DATA&gt;.snp
indivname: &lt;GENOTYPE_DATA&gt;.ind
evecoutname: &lt;OUT_FILE&gt;.evec
evaloutname: &lt;OUT_FILE&gt;.eval
poplistname: &lt;POPULATION_LIST_FILE&gt;.txt
lsqproject: YES
numoutevec: 4
numthreads: 1</code></pre>
<ul>
<li>genotypename: 基因型数据文件路径。</li>
<li>snpname: SNP位点数据文件路径。</li>
<li>indivname: 个体数据文件路径。</li>
<li>evecoutname: 输出的主成分文件路径（.evec）。</li>
<li>evaloutname: 输出的特征值文件路径（.eval）。</li>
<li>poplistname: 种群列表文件路径，指定用于计算主成分的种群。</li>
<li>lsqproject: 是否对缺失数据进行投影。</li>
<li>numoutevec: 计算的主成分数量。</li>
<li>numthreads: 使用的线程数量。</li>
</ul>
</section>
<section id="运行-pca-分析" class="level4">
<h4 class="anchored" data-anchor-id="运行-pca-分析">3. 运行 PCA 分析</h4>
<p>创建好参数文件后，可以通过命令行运行 smartPCA 进行分析。假设参数文件名为 params.par，可以使用以下命令启动 PCA 分析：</p>
<pre class="{bash}"><code>smartpca -p params.par</code></pre>
<p>运行时间通常在 15 到 30 分钟之间，具体时间取决于数据集的大小。</p>
</section>
<section id="查看输出结果" class="level4">
<h4 class="anchored" data-anchor-id="查看输出结果">4. 查看输出结果</h4>
<p>smartPCA 会生成两个主要的输出文件： - <code>.evec</code> 文件：包含每个个体在各个主成分上的坐标。可以使用这些坐标绘制主成分图（例如，二维或三维散点图），以可视化个体或种群之间的关系。 - <code>.eval</code> 文件：包含每个主成分的特征值。这些特征值反映了每个主成分对数据方差的贡献。</p>
<p>例如，特征值较大的主成分通常解释了数据中更大的变异，因此我们可以根据特征值的大小来判断是否保留某个主成分。</p>
</section>
<section id="可视化-pca-结果" class="level4">
<h4 class="anchored" data-anchor-id="可视化-pca-结果">5. 可视化 PCA 结果</h4>
<p>PCA 的最终目的是将数据降到二维或三维空间，便于我们观察数据的分布和结构。常见的做法是将第一主成分和第二主成分的坐标作为横纵坐标，绘制二维散点图。</p>
<p>例如，使用 R 或 Python 中的可视化工具，可以将 .evec 文件中的数据提取出来，并绘制主成分图，来分析不同群体、种群或个体在遗传空间中的分布。</p>
</section>
<section id="投影其他个体" class="level4">
<h4 class="anchored" data-anchor-id="投影其他个体">6. 投影其他个体</h4>
<p>如果我们使用的是包含现代和古代个体的混合数据集，可以使用 smartPCA 的<strong>投影</strong>功能。这个功能允许我们将不在种群列表中的个体投影到已计算的主成分上。这样，可以将古代 DNA 样本投影到现代群体的 PCA 结果中，进一步分析古代遗传变异在现代遗传空间中的位置。</p>
</section>
</section>
<section id="总结" class="level3">
<h3 class="anchored" data-anchor-id="总结">总结</h3>
<p>通过使用 Eigensoft 中的 smartPCA 工具，我们可以方便地对大规模的基因型数据进行 PCA 分析，识别数据中的遗传结构，了解群体之间的遗传关系。通过合理选择主成分，结合特征值和可视化技术，PCA 能够帮助我们从高维遗传数据中提取出有价值的信息，进行种群间比较、演化历史分析等。</p>


<!-- -->

</section>

 ]]></description>
  <category>plink</category>
  <category>gwas</category>
  <category>bioinformatics</category>
  <category>pca</category>
  <category>eigensoft</category>
  <category>smartpca</category>
  <guid>https://leslie-lu.github.io/blog/2024/12/26/smartpca/</guid>
  <pubDate>Thu, 26 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412262344320.png" medium="image" type="image/png"/>
</item>
<item>
  <title>GWAS 前 PCA 步骤详解</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2024/12/25/pca/</link>
  <description><![CDATA[ 





<p>基因组广泛关联研究（GWAS）旨在探索遗传变异与表型特征之间的关系，但由于群体结构（即不同人群间的遗传差异）和样本亲缘关系的影响，可能会导致假阳性或假阴性结果。为了控制这些偏差，<strong>主成分分析（PCA）</strong>成为了 GWAS 前的重要步骤。</p>
<p>这里，我们将详细介绍 GWAS 前 PCA 的原因以及如何通过一系列步骤有效进行 PCA 分析。</p>
<section id="为什么要进行-pca" class="level3">
<h3 class="anchored" data-anchor-id="为什么要进行-pca">为什么要进行 PCA？</h3>
<section id="去除群体结构的影响" class="level4">
<h4 class="anchored" data-anchor-id="去除群体结构的影响">1. 去除群体结构的影响</h4>
<p>在多种族或多地区样本的 GWAS 中，样本的群体结构可能会影响分析结果。例如，不同的群体可能拥有不同的基因频率，这种结构性差异如果不加以控制，可能会误导结果，导致某些表型与基因变异之间的假相关。</p>
</section>
<section id="去除亲缘关系的干扰" class="level4">
<h4 class="anchored" data-anchor-id="去除亲缘关系的干扰">2. 去除亲缘关系的干扰</h4>
<p>如果样本中存在亲缘关系（如父母-子女、兄弟姐妹等），这些亲缘关系会增加样本间的相关性，从而影响 GWAS 的准确性。PCA 能够帮助识别并去除这些干扰，确保样本的独立性。</p>
</section>
<section id="降低计算复杂度" class="level4">
<h4 class="anchored" data-anchor-id="降低计算复杂度">3. 降低计算复杂度</h4>
<p>PCA 能够通过减少数据的维度来降低后续分析的计算复杂度，并帮助更清晰地理解数据的结构。</p>
</section>
</section>
<section id="pca-的步骤" class="level3">
<h3 class="anchored" data-anchor-id="pca-的步骤">PCA 的步骤</h3>
<p>进行 PCA 时，主要分为以下几个关键步骤：</p>
<section id="ld剪枝ld-pruning" class="level4">
<h4 class="anchored" data-anchor-id="ld剪枝ld-pruning">1. LD剪枝（LD-Pruning）</h4>
<p>在进行 PCA 前，我们通常会进行 LD 剪枝，即去除那些高度相关（连锁不平衡，LD）变异位点。这样做的目的是减少冗余信息，使得 PCA 能够更准确地反映独立的遗传变异。</p>
<p>在 PLINK 中，可以使用以下命令进行 LD 剪枝：</p>
<pre class="{bash}"><code>plink2 --bfile ${genotypeFile} \
       --indep-pairwise 50 5 0.2 \
       --out ${outPrefix}.prune</code></pre>
<p><code>--indep-pairwise 50 5 0.2</code> 进行 LD 剪枝，窗口大小为 50 个 SNP，步长为 5，LD 阈值为 0.2，表示去除那些与其他 SNP 高度相关的 SNP。<code>--out</code> 指定输出文件的前缀。这将生成一个包含独立 SNP 的文件 <code>${outPrefix}.prune.in</code>，后续将用于 PCA 计算。</p>
</section>
<section id="去除亲缘关系样本" class="level4">
<h4 class="anchored" data-anchor-id="去除亲缘关系样本">2. 去除亲缘关系样本</h4>
<p>PCA 计算时需要去除亲缘关系较近的样本，通常是 2 度以内的亲属。PLINK 的 <code>--king-cutoff</code> 命令可以用来筛选样本，并去除与其他样本亲缘关系过近的样本。</p>
<pre class="{bash}"><code>plink2 --bfile ${genotypeFile} \
       --king-cutoff 0.0884 \
       --out ${outPrefix}.king.cutoff</code></pre>
<p><code>--king-cutoff 0.0884</code> 此命令通过阈值 0.0884（约对应亲缘关系为 2 度的样本）去除亲缘关系过近的样本。这会生成两个文件：<code>plink_results_king.king.cutoff.in.id</code>（保留的样本 ID）和 <code>plink_results_king.king.cutoff.out.id</code>（被排除的样本 ID）。</p>
</section>
<section id="使用无亲缘关系样本和独立-snp-进行-pca" class="level4">
<h4 class="anchored" data-anchor-id="使用无亲缘关系样本和独立-snp-进行-pca">3. 使用无亲缘关系样本和独立 SNP 进行 PCA</h4>
<p>接下来，使用去除亲缘关系的样本和独立 SNP 来运行 PCA。PCA 计算的目的是识别样本间最显著的遗传变异。我们可以使用 PLINK 中的 <code>--pca</code> 命令来进行 PCA 计算。</p>
<pre class="{bash}"><code>plink2 --bfile ${genotypeFile} \
       --keep ${outPrefix}.king.cutoff.in.id \
       --extract ${outPrefix}.prune.in \
       --freq counts \
       --threads ${threads} \
       --pca approx allele-wts 10 \
       --out ${outPrefix}.pca</code></pre>
<p><code>--keep ${outPrefix}.king.cutoff.in.id</code> 指定只使用无亲缘关系的样本，<code>--extract ${outPrefix}.prune.in</code> 指定仅使用经过 LD 剪枝的独立 SNP。<code>--freq counts</code> 计算等位基因频率，<code>--pca approx allele-wts 10</code> 请求进行 PCA 计算，并输出前 10 个主成分的等位基因权重。此命令会生成多个输出文件，包括主成分得分文件（<code>.eigenvec</code>）、主成分方差解释比例文件（<code>.eigenval</code>）等。</p>
</section>
<section id="将-pca-结果投影到所有样本" class="level4">
<h4 class="anchored" data-anchor-id="将-pca-结果投影到所有样本">4. 将 PCA 结果投影到所有样本</h4>
<p>完成 PCA 后，我们可以将主成分的得分投影到所有样本中。这样可以确保即使是在 PCA 分析后没有被直接计算的样本，也能够获得与前几个主成分的关联。</p>
<pre class="{bash}"><code>plink2 --bfile ${genotypeFile} \
       --threads ${threads} \
       --read-freq ${outPrefix}.acount \
       --score ${outPrefix}.eigenvec.allele 2 6 header-read no-mean-imputation variance-standardize \
       --score-col-nums 7-16 \
       --out ${outPrefix}_projected</code></pre>
<p><code>--read-freq ${outPrefix}.acount</code> 读取计算过的等位基因频率，<code>--score ${outPrefix}.eigenvec.allele 2 6 header-read no-mean-imputation variance-standardize</code> 使用主成分分析的结果对所有样本进行投影，<code>--score-col-nums 7-16</code> 指定投影的主成分列。投影后的结果可以用于进一步的 GWAS 分析，确保将群体结构和亲缘关系的影响考虑在内。</p>
</section>
<section id="分析和解释-pca-结果" class="level4">
<h4 class="anchored" data-anchor-id="分析和解释-pca-结果">5. 分析和解释 PCA 结果</h4>
<p>完成 PCA 分析后，我们可以查看每个主成分的解释比例，了解各个主成分对于遗传变异的贡献。通常，前几个主成分会解释大部分的方差，因此我们关注的是这些主成分的贡献。</p>
<p>在 PLINK 的输出文件中，<code>.eigenval</code> 文件包含每个主成分的特征值，这些特征值表示该主成分对于数据方差的贡献比例。通过查看这些值，我们可以判断哪些主成分最能解释数据中的变异。</p>
</section>
</section>
<section id="总结" class="level3">
<h3 class="anchored" data-anchor-id="总结">总结</h3>
<p>PCA 是 GWAS 分析中的一个关键步骤，能够有效去除群体结构和亲缘关系的影响，从而提高 GWAS 结果的可靠性和准确性。通过 PCA，我们不仅能去除数据中的噪声，还能更好地理解样本之间的遗传结构，为 GWAS 的成功开展奠定坚实基础。</p>


<!-- -->

</section>

 ]]></description>
  <category>plink</category>
  <category>gwas</category>
  <category>bioinformatics</category>
  <category>pca</category>
  <guid>https://leslie-lu.github.io/blog/2024/12/25/pca/</guid>
  <pubDate>Wed, 25 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412252318097.png" medium="image" type="image/png"/>
</item>
<item>
  <title>预 GWAS 阶段的基因型数据 QC 流程</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2024/12/24/genotype_data_QC/</link>
  <description><![CDATA[ 





<p>在进行全基因组关联研究（GWAS）前，数据质量的控制（QC）是至关重要的一步。</p>
<p>预处理和质量控制可以确保我们使用的数据集干净、可靠，避免潜在的偏倚和错误。这里，我们将介绍如何在 GWAS 前进行基因型数据的 QC，确保数据的准确性和可靠性。</p>
<section id="计算缺失率missing-rate与呼叫率call-rate" class="level3">
<h3 class="anchored" data-anchor-id="计算缺失率missing-rate与呼叫率call-rate">1. 计算缺失率（Missing Rate）与呼叫率（Call Rate）</h3>
<p>在 GWAS 分析中，缺失数据可能会影响结果的准确性。基因型数据的质量首先需要评估每个样本和每个 SNP 的缺失率。</p>
<p>缺失率表示某个样本在所有标记位点的基因型缺失的比例；呼叫率表示某个 SNP 在所有样本中的基因型被成功识别的比例。样本缺失率：样本的基因型数据可能因技术问题、平台差异等因素缺失，需要计算每个样本的缺失率，并根据预设的阈值剔除缺失过多的样本。SNP 呼叫率：类似地，每个SNP的呼叫率需要计算。如果某些 SNP 在大多数样本中都没有成功呼叫，可以考虑排除这些 SNP。</p>
<p>在 PLINK 中，可以使用以下命令来计算样本的缺失率和 SNP 的呼叫率：</p>
<pre class="{bash}"><code>plink --bfile ${genotypeFile} --missing --out plink_missing</code></pre>
</section>
<section id="计算等位基因频率allele-frequency" class="level3">
<h3 class="anchored" data-anchor-id="计算等位基因频率allele-frequency">2. 计算等位基因频率（Allele Frequency）</h3>
<p>等位基因频率是 GWAS 中重要的统计量，它表示某个特定等位基因在样本中的出现频率。为了确保我们分析的是常见的变异，我们通常会设置最小等位基因频率（MAF）阈值。通常，筛选出 MAF 低于 1% 的 SNP 是合理的，因为低频变异可能会增加假阳性。</p>
<p>在 PLINK 中，计算等位基因频率非常简单：</p>
<pre class="{bash}"><code>plink --bfile ${genotypeFile} --freq --out plink_freq</code></pre>
</section>
<section id="hardy-weinberg-平衡精确检验hardy-weinberg-equilibrium-test" class="level3">
<h3 class="anchored" data-anchor-id="hardy-weinberg-平衡精确检验hardy-weinberg-equilibrium-test">3. Hardy-Weinberg 平衡精确检验（Hardy-Weinberg Equilibrium Test）</h3>
<p>Hardy-Weinberg 平衡（HWE）检验是 GWAS 中常用的一种质量控制手段。根据 HWE 定律，如果一个群体处于均衡状态，则基因型的分布应该符合预期的频率。如果某个 SNP 的基因型偏离了 HWE，可能是因为样本污染、系统性错误或者是与某些表型相关的变异。通常，对于病例对照研究，HWE检验的p值阈值设定为<img src="https://latex.codecogs.com/png.latex?10%5E%7B-6%7D">。</p>
<p>使用 PLINK 执行 HWE 检验：</p>
<pre class="{bash}"><code>plink --bfile ${genotypeFile} --hwe 1e-6 --out plink_hwe</code></pre>
</section>
<section id="ld-pruning" class="level3">
<h3 class="anchored" data-anchor-id="ld-pruning">4. LD-Pruning</h3>
<p>连锁不平衡（LD）修剪是为了去除那些高度相关的 SNP，减少冗余，确保分析中使用的 SNP 具有独立性。若 SNP 之间存在高度的 LD，它们可能会影响 GWAS 结果的准确性。通常使用 LD-pruning 来去除相关性高的 SNP。</p>
<p>在 PLINK 中，常用的 LD-pruning 命令如下：</p>
<pre class="{bash}"><code>plink --bfile ${genotypeFile} --indep-pairwise 50 5 0.2 --out plink_results</code></pre>
<p>该命令会根据给定的窗口大小（50 个 SNP）、步长（每次移动 5 个 SNP）和 <img src="https://latex.codecogs.com/png.latex?r%5E%7B2%7D"> 阈值（0.2），进行 LD 修剪。</p>
</section>
<section id="计算近交系数-finbreeding-f-coefficient" class="level3">
<h3 class="anchored" data-anchor-id="计算近交系数-finbreeding-f-coefficient">5. 计算近交系数 F（Inbreeding F coefficient）</h3>
<p>近交系数 F（F coefficient）用于衡量样本中的近交程度。较高的 F 值可能表示样本存在近交，而较低的 F 值可能表示样本污染。计算 F 值时，可以使用 PLINK 的 <code>--het</code> 命令，它会生成每个样本的观测和期望纯合子基因型数量，并计算 F 值。</p>
<pre class="{bash}"><code>plink --bfile ${genotypeFile} --het --out plink_results</code></pre>
<p>输出结果中，F 值较高的样本可以考虑进一步检查或排除。常见的处理方法是将 F 值超过 3 个标准差（SD）的样本排除。</p>
</section>
<section id="数据管理make-bed-recode" class="level3">
<h3 class="anchored" data-anchor-id="数据管理make-bed-recode">6. 数据管理（make-bed / recode）</h3>
<p>为了便于后续分析，PLINK 提供了多种数据格式转换工具。最常用的格式是 BED 格式，它是 PLINK 的二进制格式，能够大大提高存储和计算效率。<code>make-bed</code> 将原始的 PED/MAP 文件转换为 BED 格式。通常在预处理数据时使用该命令。</p>
<pre class="{bash}"><code>plink --bfile ${genotypeFile} --make-bed --out plink_bed</code></pre>
<p>bash</p>
<p><code>recode</code> 如果你需要将数据转回 PED 格式或其他格式，可以使用 <code>recode</code> 命令。</p>
<pre class="{bash}"><code>plink --bfile ${genotypeFile} --recode --out plink_recode</code></pre>
<p>这些命令帮助将数据从一种格式转换为另一种格式，确保数据可以被其他分析工具有效读取。</p>
</section>
<section id="总结" class="level3">
<h3 class="anchored" data-anchor-id="总结">总结</h3>
<p>基因型数据的 QC 是 GWAS 分析中的基础步骤，它确保数据的可靠性和准确性。通过执行上述步骤，你可以在 GWAS 分析前排除掉缺失值过多、低频变异、偏离 Hardy-Weinberg 平衡的 SNP，以及冗余的高度 LD SNP。高质量的数据是可靠分析的前提，只有确保数据质量，才能得出科学、可靠的结果。</p>


<!-- -->

</section>

 ]]></description>
  <category>plink</category>
  <category>gwas</category>
  <category>bioinformatics</category>
  <category>genotype data</category>
  <category>qc</category>
  <guid>https://leslie-lu.github.io/blog/2024/12/24/genotype_data_QC/</guid>
  <pubDate>Tue, 24 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412241722219.png" medium="image" type="image/png"/>
</item>
<item>
  <title>PLINK 常用命令介绍</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2024/12/23/plink_command/</link>
  <description><![CDATA[ 





<p>PLINK 是一个广泛使用的基因组学分析工具，尤其适用于大规模遗传数据分析。无论是进行全基因组关联研究（GWAS），还是进行简单的基因型数据质量控制，PLINK 都是研究人员的重要工具之一。这里，我们将介绍 PLINK 中一些常用的命令，帮助大家更高效地处理和分析基因型数据。</p>
<section id="基本文件操作命令" class="level3">
<h3 class="anchored" data-anchor-id="基本文件操作命令">1. 基本文件操作命令</h3>
<section id="make-bed" class="level4">
<h4 class="anchored" data-anchor-id="make-bed">–make-bed</h4>
<p>将现有的文本格式数据（如 .ped 和 .map 文件）转换为二进制格式（.bed, .bim, .fam 文件），以便提高数据处理速度。</p>
<pre class="{bash}"><code>plink --ped input.ped --map input.map --make-bed --out output</code></pre>
<p>这条命令将 input.ped 和 input.map 文件转换为二进制格式，并保存为 output.bed、output.bim 和 output.fam 文件。</p>
</section>
<section id="bfile" class="level4">
<h4 class="anchored" data-anchor-id="bfile">–bfile</h4>
<p>在进行 PLINK 命令时，可以通过指定 .bed、.bim 和 .fam 文件前缀来加载二进制格式的数据文件。</p>
<pre class="{bash}"><code>plink --bfile mydata --freq</code></pre>
<p>该命令加载 mydata.bed、mydata.bim 和 mydata.fam 文件，并计算 SNP 频率。</p>
</section>
</section>
<section id="数据过滤命令" class="level3">
<h3 class="anchored" data-anchor-id="数据过滤命令">2. 数据过滤命令</h3>
<section id="keep-和-remove" class="level4">
<h4 class="anchored" data-anchor-id="keep-和-remove">–keep 和 –remove</h4>
<p><code>--keep</code> 用于保留指定样本，<code>--remove</code> 用于排除指定样本。这两个命令接受一个包含样本 ID 的文件。</p>
<pre class="{bash}"><code>plink --bfile mydata --keep keep_list.txt --make-bed --out filtered_data</code></pre>
<p>这个命令将 keep_list.txt 文件中的样本保留在数据集中，并生成新的二进制文件 filtered_data.bed。</p>
</section>
<section id="extract-和-exclude" class="level4">
<h4 class="anchored" data-anchor-id="extract-和-exclude">–extract 和 –exclude</h4>
<p><code>--extract</code> 用于选择指定的 SNPs（通过 .txt 文件列出），而 <code>--exclude</code> 用于排除某些 SNPs。</p>
<pre class="{bash}"><code>plink --bfile mydata --extract snp_list.txt --make-bed --out selected_snps</code></pre>
<p>此命令将 snp_list.txt 文件中的 SNPs 提取出来，并保存为新的二进制文件 selected_snps.bed。</p>
</section>
<section id="maf-和-geno" class="level4">
<h4 class="anchored" data-anchor-id="maf-和-geno">–maf 和 –geno</h4>
<p><code>--maf</code> 用于设置最小等位基因频率（Minor Allele Frequency），<code>--geno</code> 用于排除缺失率较高的 SNP。</p>
<pre class="{bash}"><code>plink --bfile mydata --maf 0.01 --geno 0.05 --make-bed --out filtered_data</code></pre>
<p>这个命令将过滤掉 MAF 小于 1% 或缺失率大于 5%的 SNP。</p>
</section>
</section>
<section id="关联分析命令" class="level3">
<h3 class="anchored" data-anchor-id="关联分析命令">3. 关联分析命令</h3>
<section id="assoc" class="level4">
<h4 class="anchored" data-anchor-id="assoc">–assoc</h4>
<p>进行简单的关联分析，计算每个 SNP 和表型之间的关联性。</p>
<pre class="{bash}"><code>plink --bfile mydata --assoc --out association_results</code></pre>
<p>该命令将进行每个 SNP 和表型的关联分析，并将结果保存为 association_results.assoc 文件。</p>
</section>
<section id="linear" class="level4">
<h4 class="anchored" data-anchor-id="linear">–linear</h4>
<p>进行线性回归分析，适用于连续表型。</p>
<pre class="{bash}"><code>plink --bfile mydata --linear --out linear_results</code></pre>
<p>此命令进行线性回归分析，输出与表型相关的 SNP 及其统计信息。</p>
</section>
<section id="logistic" class="level4">
<h4 class="anchored" data-anchor-id="logistic">–logistic</h4>
<p>进行 logistic 回归分析，适用于二分类表型（如病例对照研究）。</p>
<pre class="{bash}"><code>plink --bfile mydata --logistic --out logistic_results</code></pre>
<p>此命令进行 logistic 回归分析，输出 SNP 与表型的关系。</p>
</section>
</section>
<section id="质量控制命令" class="level3">
<h3 class="anchored" data-anchor-id="质量控制命令">4. 质量控制命令</h3>
<section id="check-sex" class="level4">
<h4 class="anchored" data-anchor-id="check-sex">–check-sex</h4>
<p>用于检查样本的性别是否与遗传数据一致。</p>
<pre class="{bash}"><code>plink --bfile mydata --check-sex --out sex_check</code></pre>
<p>该命令将检查数据集中所有样本的性别，并生成 sex_check.sexcheck 文件。</p>
</section>
<section id="missing" class="level4">
<h4 class="anchored" data-anchor-id="missing">–missing</h4>
<p>用于计算样本和 SNP 的缺失情况，帮助识别潜在的质量问题。</p>
<pre class="{bash}"><code>plink --bfile mydata --missing --out missing_data</code></pre>
<p>这个命令将生成一个包含缺失数据统计的文件 missing_data.lmiss 和 missing_data.imiss。</p>
</section>
</section>
<section id="文件合并命令" class="level3">
<h3 class="anchored" data-anchor-id="文件合并命令">5. 文件合并命令</h3>
<section id="merge-和-bmerge" class="level4">
<h4 class="anchored" data-anchor-id="merge-和-bmerge">–merge 和 –bmerge</h4>
<p><code>--merge</code> 合并多个 PLINK 数据集，<code>--bmerge</code> 与 <code>--merge</code> 类似，但适用于二进制文件。</p>
<pre class="{bash}"><code>plink --bfile data1 --bmerge data2.bed data2.bim data2.fam --make-bed --out merged_data</code></pre>
<p>这个命令将二进制文件 data1 和 data2 合并，并保存为新的 merged_data.bed 文件。</p>
</section>
</section>
<section id="数据导出命令" class="level3">
<h3 class="anchored" data-anchor-id="数据导出命令">6. 数据导出命令</h3>
<section id="recode" class="level4">
<h4 class="anchored" data-anchor-id="recode">–recode</h4>
<p>将数据从二进制格式转换为其他格式，例如 .ped 格式。</p>
<pre class="{bash}"><code>plink --bfile mydata --recode --out ped_format</code></pre>
<p>该命令将 mydata 数据集转换为 .ped 和 .map 文件格式，并保存为 ped_format.ped 和 ped_format.map。</p>
</section>
<section id="recode-vcf" class="level4">
<h4 class="anchored" data-anchor-id="recode-vcf">–recode vcf</h4>
<p>将 PLINK 二进制数据转换为 VCF 格式。</p>
<pre class="{bash}"><code>plink --bfile mydata --recode vcf --out vcf_output</code></pre>
<p>此命令将 mydata 数据集转换为 .vcf 格式，并输出为 vcf_output.vcf 文件。</p>
</section>
</section>
<section id="并行化命令" class="level3">
<h3 class="anchored" data-anchor-id="并行化命令">7. 并行化命令</h3>
<section id="threads" class="level4">
<h4 class="anchored" data-anchor-id="threads">–threads</h4>
<p>指定 PLINK 使用的线程数，从而加速计算。</p>
<pre class="{bash}"><code>plink --bfile mydata --assoc --threads 4 --out assoc_results</code></pre>
<p>该命令将在进行关联分析时使用 4 个线程，以加速处理。</p>


<!-- -->

</section>
</section>

 ]]></description>
  <category>plink</category>
  <category>gwas</category>
  <category>bioinformatics</category>
  <guid>https://leslie-lu.github.io/blog/2024/12/23/plink_command/</guid>
  <pubDate>Mon, 23 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412232113560.png" medium="image" type="image/png"/>
</item>
<item>
  <title>理解 PLINK格式</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2024/12/21/plink/</link>
  <description><![CDATA[ 





<p>在基因组学研究中，PLINK 是一个广泛使用的工具，用于关联分析、基因型数据处理以及数据格式转换。PLINK 以多种文件格式存储基因型数据，每种格式适用于不同的应用场景。这里，本文将介绍 PLINK 的几种主要数据格式及其特点，帮助大家更好地理解和使用这些文件。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412232106583.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">PLINK</figcaption>
</figure>
</div>
<section id="plink-数据的基本组成" class="level3">
<h3 class="anchored" data-anchor-id="plink-数据的基本组成">PLINK 数据的基本组成</h3>
<p>在 PLINK 中，基因型数据的存储由三部分信息组成：</p>
<ul>
<li>个体信息：每个研究对象的基本信息，如样本 ID、性别等。</li>
<li>变异信息：每个 SNP 的基本信息，如染色体位置和碱基变化。</li>
<li>基因型矩阵：每个样本在每个位点上的基因型数据。</li>
</ul>
<p>为了存储和处理这些数据，PLINK 提供了多种格式集合，包括 ped/map、fam/bim/bed 和 psam/pvar/pgen。</p>
</section>
<section id="数据格式及其特点" class="level3">
<h3 class="anchored" data-anchor-id="数据格式及其特点">数据格式及其特点</h3>
<section id="pedmap-格式" class="level4">
<h4 class="anchored" data-anchor-id="pedmap-格式">ped/map 格式</h4>
<p>这是 <a href="https://www.cog-genomics.org/plink/1.9/formats" title="plink 1.9">PLINK</a> 的原始标准文本格式，用于存储完整的基因型数据表。</p>
<section id="ped-文件" class="level5">
<h5 class="anchored" data-anchor-id="ped-文件">.ped 文件</h5>
<p>.ped 文件包含每个样本的详细基因型数据，无标题行，每行代表一个样本。每行的前六列是样本的基本信息，后续每两个字段表示一个 SNP 的等位基因。</p>
<div id="095e6d14" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> HG00403 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> G G T T A A G A C C</span>
<span id="cb1-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> HG00404 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> G G T T A A G A T C</span></code></pre></div>
</div>
<p>字段说明：第 1-6 列：样本信息（家庭 ID、样本 ID、父母 ID、性别、表型等）。第 7 列及之后：每个 SNP 的两个等位基因（如 <code>G G</code> 表示基因型为 GG）。</p>
</section>
<section id="map-文件" class="level5">
<h5 class="anchored" data-anchor-id="map-文件">.map 文件</h5>
<p>.map 文件存储每个变异位点的信息，无标题行，每行代表一个 SNP。</p>
<div id="18e45c80" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13273</span>:G:C     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13273</span></span>
<span id="cb2-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14599</span>:T:A     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14599</span></span></code></pre></div>
</div>
<p>字段说明：第 1 列：染色体编号。第 2 列：变异 ID（格式为染色体:位置:参考等位基因:替代等位基因）。第 3 列：遗传距离（默认为 0）。第 4 列：物理位置（以碱基为单位）。</p>
<p>优点：直观易读，便于检查数据。缺点：文件体积大，尤其是对于大规模数据。</p>
</section>
</section>
<section id="fambimbed-格式" class="level4">
<h4 class="anchored" data-anchor-id="fambimbed-格式">fam/bim/bed 格式</h4>
<p>这是 PLINK 的二进制格式，包含与 ped/map 相同的信息，但文件更小，适合大数据处理。</p>
<section id="fam-文件" class="level5">
<h5 class="anchored" data-anchor-id="fam-文件">.fam 文件</h5>
<p>样本基本信息，内容与 .ped 文件的前六列一致。</p>
<div id="0df1c3fc" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> HG00403 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb3-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> HG00404 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span></code></pre></div>
</div>
</section>
<section id="bim-文件" class="level5">
<h5 class="anchored" data-anchor-id="bim-文件">.bim 文件</h5>
<p>SNP 基本信息，与 .map 文件内容相似，但增加了等位基因列。</p>
<div id="de1c8710" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13273</span>:G:C     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13273</span>   C       G</span>
<span id="cb4-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14599</span>:T:A     <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14599</span>   A       T</span></code></pre></div>
</div>
</section>
<section id="bed-文件" class="level5">
<h5 class="anchored" data-anchor-id="bed-文件">.bed 文件</h5>
<p>二进制格式的基因型矩阵，每个位点的数据存储为二进制编码。</p>
<div id="6abc2548" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">00</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">c</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> ff ff bf bf ff ff ff ef fb ff ff ff fe</span></code></pre></div>
</div>
<p>优点：存储效率高，适合大规模基因型数据的分析。缺点：文件内容不可直接阅读，需要通过软件解析。</p>
</section>
</section>
<section id="psampvarpgen-格式" class="level4">
<h4 class="anchored" data-anchor-id="psampvarpgen-格式">psam/pvar/pgen 格式</h4>
<p>这是 <a href="https://www.cog-genomics.org/plink/2.0/" title="plink 2">PLINK2</a> 引入的新格式，提供更灵活的数据管理和高效的处理能力。</p>
<p>.psam 文件：存储个体信息。.pvar 文件：存储变异信息，与 .bim 文件相似。.pgen 文件：存储基因型矩阵的二进制文件。</p>
</section>
</section>
<section id="格式的适用场景" class="level3">
<h3 class="anchored" data-anchor-id="格式的适用场景">格式的适用场景</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 19%">
<col style="width: 40%">
<col style="width: 39%">
</colgroup>
<thead>
<tr class="header">
<th>格式集合</th>
<th>特点</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ped/map</td>
<td>文本格式，直观易读，但占用空间大</td>
<td>数据检查、数据格式初学者</td>
</tr>
<tr class="even">
<td>fam/bim/bed</td>
<td>二进制格式，存储高效，需借助软件解析</td>
<td>大规模数据分析，如GWAS</td>
</tr>
<tr class="odd">
<td>psam/pvar/pgen</td>
<td>PLINK2格式，兼容性强，处理速度快</td>
<td>需要复杂分析和高性能计算时</td>
</tr>
</tbody>
</table>


<!-- -->

</section>

 ]]></description>
  <category>plink</category>
  <category>gwas</category>
  <category>bioinformatics</category>
  <guid>https://leslie-lu.github.io/blog/2024/12/21/plink/</guid>
  <pubDate>Sat, 21 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412232106583.png" medium="image" type="image/png"/>
</item>
<item>
  <title>从基因到疾病：等位基因频率与效应大小的关系</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2024/12/20/maf/</link>
  <description><![CDATA[ 





<p>基因变异如何影响疾病风险？在遗传学研究中，等位基因频率（Minor Allele Frequency, MAF） 和 效应大小（Effect Size, OR, Odds Ratio） 是两个关键参数，用于衡量基因变异的稀有程度及其对疾病风险的影响。这里，我们试着用简单直观的方式，带大家了解等位基因频率和效应大小的关系，以及它们在不同疾病中的作用。</p>
<section id="等位基因频率与效应大小是什么" class="level3">
<h3 class="anchored" data-anchor-id="等位基因频率与效应大小是什么">等位基因频率与效应大小是什么？</h3>
<p>等位基因频率（MAF）是指某个变异（如 SNP，单核苷酸多态性）在群体中较少出现的等位基因的比例。根据频率，变异可以分为以下几类：</p>
<ul>
<li>非常罕见变异（Very Rare）：MAF &lt; 0.001</li>
<li>罕见变异（Rare）：0.001 ≤ MAF &lt; 0.01</li>
<li>低频变异（Low-frequency）：0.01 ≤ MAF &lt; 0.05</li>
<li>常见变异（Common）：MAF ≥ 0.05</li>
</ul>
<p>而效应大小通过优势比（OR, Odds Ratio） 衡量某个变异对疾病风险的影响程度：</p>
<ul>
<li>OR &gt; 3：高效应大小，意味着这个变异对疾病的影响很强。</li>
<li>OR接近1：低效应大小，表示影响很小。</li>
</ul>
</section>
<section id="等位基因频率与效应大小的关系" class="level3">
<h3 class="anchored" data-anchor-id="等位基因频率与效应大小的关系">等位基因频率与效应大小的关系</h3>
<section id="高效应大小且非常罕见变异孟德尔遗传病" class="level4">
<h4 class="anchored" data-anchor-id="高效应大小且非常罕见变异孟德尔遗传病">高效应大小且非常罕见变异：孟德尔遗传病</h4>
<ul>
<li>特点：极少数人携带的变异直接导致疾病发生。</li>
<li>例子：囊性纤维化（CFTR 基因突变）、镰状细胞贫血（HBB 基因突变）。</li>
<li>应用：这种高效应变异易于通过家系研究或全外显子组测序发现。</li>
</ul>
</section>
<section id="低频变异效应大小中等复杂疾病中的关键位点" class="level4">
<h4 class="anchored" data-anchor-id="低频变异效应大小中等复杂疾病中的关键位点">低频变异，效应大小中等：复杂疾病中的关键位点</h4>
<ul>
<li>特点：变异频率较低，但对特定人群的疾病风险有显著影响。</li>
<li>例子：一些罕见心血管疾病或代谢性疾病的相关位点。</li>
<li>挑战：需要更大样本量和更高精度的分析工具来发现。</li>
</ul>
</section>
<section id="常见变异低效应大小复杂疾病中常见变异" class="level4">
<h4 class="anchored" data-anchor-id="常见变异低效应大小复杂疾病中常见变异">常见变异，低效应大小：复杂疾病中常见变异</h4>
<ul>
<li>特点：频率较高，单个变异对疾病的影响微弱，但多个变异可能协同作用。</li>
<li>例子：2 型糖尿病、肥胖、抑郁症等多基因疾病。</li>
<li>应用：通过全基因组关联研究（GWAS）和多基因风险评分（PRS）进行疾病预测。</li>
</ul>
</section>
<section id="罕见变异但效应较低难以检测的遗传因素" class="level4">
<h4 class="anchored" data-anchor-id="罕见变异但效应较低难以检测的遗传因素">罕见变异但效应较低：难以检测的遗传因素</h4>
<ul>
<li>特点：这种变异影响微弱且在人群中极其罕见，目前的技术难以发现其对疾病的潜在作用。</li>
<li>挑战：需要结合更大规模数据和功能实验加以探索。</li>
</ul>
</section>
</section>
<section id="为什么这对研究很重要" class="level3">
<h3 class="anchored" data-anchor-id="为什么这对研究很重要">为什么这对研究很重要？</h3>
<section id="揭示疾病的遗传基础" class="level4">
<h4 class="anchored" data-anchor-id="揭示疾病的遗传基础">揭示疾病的遗传基础</h4>
<p>理解等位基因频率和效应大小的关系，有助于解析不同变异在疾病发生中的作用。对于孟德尔遗传病，关注高效应大小的罕见变异；而对于复杂疾病，更多地关注常见变异和低频变异的累积效应。</p>
</section>
<section id="优化疾病预测与治疗" class="level4">
<h4 class="anchored" data-anchor-id="优化疾病预测与治疗">优化疾病预测与治疗</h4>
<p>高效应变异可以作为明确的诊断标志物，用于早期筛查和治疗设计。低效应变异为复杂疾病的风险预测提供信息，通过多基因风险预测模型提高预测准确性，能够为个性化医疗和疾病干预策略提供新思路，从而推动精准医学发展。</p>


<!-- -->

</section>
</section>

 ]]></description>
  <category>maf</category>
  <category>gwas</category>
  <category>mendelian disease</category>
  <guid>https://leslie-lu.github.io/blog/2024/12/20/maf/</guid>
  <pubDate>Fri, 20 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412202301424.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>深入了解 VCF/VCF.GZ/VCF.GZ.TBI 文件</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2024/12/19/vcf/</link>
  <description><![CDATA[ 





<p>在生物信息学研究中，变异数据的存储和分析是核心任务之一。而 VCF 文件（Variant Call Format）作为广泛使用的文件格式，几乎贯穿了从测序数据到变异注释和分析的整个流程。这里，我们将深入探讨 VCF 及其相关的压缩文件（VCF.GZ）和索引文件（VCF.GZ.TBI），帮助大家更好地理解这些文件及其应用场景。</p>
<section id="什么是-vcf-文件" class="level3">
<h3 class="anchored" data-anchor-id="什么是-vcf-文件">什么是 VCF 文件？</h3>
<p>VCF（Variant Call Format）文件是一种专为存储基因组变异数据设计的文件格式，它可以记录不同个体或样本中的突变信息，包括单核苷酸变异（SNP）、插入和缺失（InDels）以及结构变异（SVs）。</p>
<p>VCF文件具有以下主要特点： - 文本格式：易于读取和解析，便于集成到各种分析工具中。 - 可扩展性：支持通过 INFO 字段存储额外的变异注释。 - 标准化：通过一致的格式定义，保证跨研究和工具的兼容性。</p>
</section>
<section id="vcf-文件的结构" class="level3">
<h3 class="anchored" data-anchor-id="vcf-文件的结构">VCF 文件的结构</h3>
<p>一个典型的 VCF 文件由两部分组成：</p>
<section id="header头部" class="level4">
<h4 class="anchored" data-anchor-id="header头部">Header（头部）</h4>
<p>以#开头，包含文件的元信息，如 VCF 版本、参考基因组、字段定义等。例如：</p>
<pre class="{bash}"><code>#fileformat=VCFv4.2
##reference=GRCh38
##INFO=&lt;ID=AF,Number=A,Type=Float,Description="Allele Frequency"&gt;
#CHROM POS ID REF ALT QUAL FILTER INFO FORMAT SAMPLE1 SAMPLE2</code></pre>
<p><code>#CHROM</code>：染色体编号；<code>POS</code>：变异在基因组上的位置；<code>ID</code>：变异的标识符（如 rsID）；<code>REF</code> 和 <code>ALT</code>：参考等位基因和替代等位基因。</p>
</section>
<section id="data数据部分" class="level4">
<h4 class="anchored" data-anchor-id="data数据部分">Data（数据部分）</h4>
<p>存储实际的变异信息，每行记录一个变异。例如：</p>
<pre class="{bash}"><code>1  123456  rs123456  A  G  50  PASS  AF=0.1  GT:AD:DP  0/1:5,10:15  0/0:20,0:20</code></pre>
<p>这里记录了第 1 号染色体上第 123456 位的一个 SNP，参考碱基是 A，突变碱基是 G。</p>
</section>
</section>
<section id="vcf.gz-文件为什么要压缩" class="level3">
<h3 class="anchored" data-anchor-id="vcf.gz-文件为什么要压缩">VCF.GZ 文件：为什么要压缩？</h3>
<p>由于全基因组测序数据的规模庞大，原始的 VCF 文件往往非常大，这给存储和传输带来了不小的负担。因此，生物信息学领域通常会对 VCF 文件进行压缩，生成 VCF.GZ 文件。</p>
<p>VCF.GZ的特点：</p>
<ul>
<li>基于 Gzip 压缩：VCF.GZ 文件采用 Gzip 算法压缩，具有良好的压缩率。</li>
<li>兼容性强：绝大多数生物信息学工具（如 bcftools、GATK、vcftools 等）都支持直接读取 VCF.GZ 文件。</li>
<li>便于存储和共享：相比未压缩的 VCF 文件，VCF.GZ 文件体积更小，减少了存储成本，并加快了传输速度。</li>
</ul>
<p>要生成VCF.GZ文件，可以使用以下命令：</p>
<pre class="{bash}"><code>bgzip -c input.vcf &gt; input.vcf.gz</code></pre>
</section>
<section id="vcf.gz.tbi-文件加速随机访问的关键" class="level3">
<h3 class="anchored" data-anchor-id="vcf.gz.tbi-文件加速随机访问的关键">VCF.GZ.TBI 文件：加速随机访问的关键</h3>
<p>对于全基因组数据，快速定位某个染色体区域的变异是一项基本需求。索引文件（VCF.GZ.TBI）正是为了解决这一问题而设计的。</p>
<p>VCF.GZ.TBI的作用：</p>
<ul>
<li>快速检索：VCF.GZ.TBI 文件为 VCF.GZ 文件生成了索引，使得工具可以快速定位到特定染色体区域的变异记录。</li>
<li>支持分区分析：在多样本和多染色体的情况下，索引文件显著提升了并行处理的效率。</li>
</ul>
<p>生成索引文件可以使用以下命令：</p>
<pre class="{bash}"><code>tabix -p vcf input.vcf.gz</code></pre>
<p>完成后，会生成一个名为 input.vcf.gz.tbi 的索引文件。</p>
</section>
<section id="vcfvcf.gzvcf.gz.tbi-在实际中的应用" class="level3">
<h3 class="anchored" data-anchor-id="vcfvcf.gzvcf.gz.tbi-在实际中的应用">VCF/VCF.GZ/VCF.GZ.TBI 在实际中的应用</h3>
<section id="存储与共享变异数据" class="level4">
<h4 class="anchored" data-anchor-id="存储与共享变异数据">存储与共享变异数据</h4>
<p>未压缩的 VCF 文件便于直接查看，但更适用于小规模数据集。VCF.GZ 文件更适合大规模数据的存储和共享。</p>
</section>
<section id="加速基因组区域检索" class="level4">
<h4 class="anchored" data-anchor-id="加速基因组区域检索">加速基因组区域检索</h4>
<p>索引文件（VCF.GZ.TBI）在大规模队列分析中尤为重要。如使用 bcftools view 仅提取某条染色体上的特定区域：</p>
<pre class="{bash}"><code>bcftools view -r chr1:100000-200000 input.vcf.gz</code></pre>
</section>
<section id="兼容主流生信工具" class="level4">
<h4 class="anchored" data-anchor-id="兼容主流生信工具">兼容主流生信工具</h4>
<p>几乎所有主流的变异分析工具都支持 VCF 格式及其压缩和索引版本。例如：</p>
<ul>
<li>GATK：进行变异过滤和注释。</li>
<li>vcftools：计算等位基因频率、进行样本过滤。</li>
<li>bcftools：快速子集提取和格式转换。</li>
</ul>
</section>
<section id="云环境中的应用" class="level4">
<h4 class="anchored" data-anchor-id="云环境中的应用">云环境中的应用</h4>
<p>通过压缩后的 VCF.GZ 文件和索引，配合分布式计算框架（如 Spark SQL），可以在云端快速处理大规模变异数据。</p>


<!-- -->

</section>
</section>

 ]]></description>
  <category>vcf</category>
  <category>bioinformatics</category>
  <category>genetics</category>
  <guid>https://leslie-lu.github.io/blog/2024/12/19/vcf/</guid>
  <pubDate>Thu, 19 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://www.researchgate.net/publication/318713795/figure/fig1/AS:520537769877504@1501117283765/ariant-Call-Format-VCF-file-This-is-a-text-file-that-stores-genomic-information-in.png" medium="image" type="image/png"/>
</item>
<item>
  <title>感知机：人工神经网络的起点</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2024/12/16/perceptron/</link>
  <description><![CDATA[ 





<section id="感知机的诞生人工神经网络的起点" class="level3">
<h3 class="anchored" data-anchor-id="感知机的诞生人工神经网络的起点">感知机的诞生：人工神经网络的起点</h3>
<p>1958年，弗兰克·罗森布拉特（Frank Rosenblatt）在康奈尔大学航空实验室提出了感知机，这是第一个模拟人脑神经元功能的算法模型。感知机的设计灵感来自人脑的神经元连接方式，目标是通过数学模型模仿人类学习的<a href="https://medium.com/@vincentlambert0/it-all-started-with-a-perceptron-86bd0fb80b96" title="medium">过程</a>。</p>
<section id="核心思想" class="level4">
<h4 class="anchored" data-anchor-id="核心思想">核心思想</h4>
<p>感知机的基本功能是进行线性分类。它通过将输入值加权求和后与阈值比较，来决定输出属于哪个类别。简单来说，感知机的输出是一个二元值（如 0 或 1 ），用来表示输入数据所属的类别。</p>
</section>
<section id="数学模型" class="level4">
<h4 class="anchored" data-anchor-id="数学模型">数学模型</h4>
<p>感知机基于以下公式：</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay%20=%20f%5Cleft(%5Csum_%7Bi=1%7D%5E%7Bn%7D%20w_i%20x_i%20+%20b%5Cright)%0A"></p>
</section>
</section>
<section id="感知机的局限性xor-问题的挑战" class="level3">
<h3 class="anchored" data-anchor-id="感知机的局限性xor-问题的挑战">感知机的局限性：XOR 问题的挑战</h3>
<p>尽管感知机在某些任务中表现良好，但其能力受到线性可分性限制。1969年，著名的《Perceptrons》一书由马文·明斯基（Marvin Minsky）和西摩·帕珀特（Seymour Papert）撰写，他们指出感知机无法解决非线性可分的问题，例如XOR问题。感知机只能通过一条直线分割两个类别的数据点。当数据分布无法用一条直线区分（如 XOR 问题），感知机便无能为力。这一挑战让研究者认识到，单层感知机无法胜任复杂任务，需要更复杂的多层结构来解决。</p>
<div id="277a4190" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Perceptron:</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_size, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>):</span>
<span id="cb1-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize weights to zeros, with one extra weight for the bias</span></span>
<span id="cb1-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(input_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># +1 for the bias</span></span>
<span id="cb1-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learning_rate  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate controls weight updates</span></span>
<span id="cb1-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epochs  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of iterations over the training data</span></span>
<span id="cb1-7"></span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> activation_function(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb1-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply step function: return 1 if x &gt;= 0, else return 0</span></span>
<span id="cb1-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-11"></span>
<span id="cb1-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> predict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb1-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the weighted sum (dot product), including bias</span></span>
<span id="cb1-14">        z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights.T.dot(np.insert(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Insert bias term into input</span></span>
<span id="cb1-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.activation_function(z)</span>
<span id="cb1-16"></span>
<span id="cb1-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, X, y):</span>
<span id="cb1-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epochs):</span>
<span id="cb1-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> xi, target <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(X, y):</span>
<span id="cb1-20">                prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.predict(xi)</span>
<span id="cb1-21">                error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> prediction</span>
<span id="cb1-22">                update <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> error</span>
<span id="cb1-23">                </span>
<span id="cb1-24">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> update <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> xi </span>
<span id="cb1-25">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.weights[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> update</span>
<span id="cb1-26"></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training data (XOR logic)</span></span>
<span id="cb1-28">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb1-29">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
</div>
</section>
<section id="多层感知机mlp的出现突破局限" class="level3">
<h3 class="anchored" data-anchor-id="多层感知机mlp的出现突破局限">多层感知机（MLP）的出现：突破局限</h3>
<p>为了克服单层感知机的局限性，研究者提出了多层感知机（Multi-Layer Perceptron, MLP）。它通过引入隐藏层和非线性激活函数（如 sigmoid 函数），实现了对复杂数据的学习能力。1986 年，David Rumelhart等人提出了反向传播（Backpropagation）算法，这使得训练多层感知机变得可行。该算法通过梯度下降更新权重，优化了模型性能。此外，隐藏层中的非线性激活函数打破了单层感知机的线性限制，使模型能够处理复杂的非线性关系。</p>
<div id="28f869e4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sequential</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.layers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dense, Input</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.optimizers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Adam</span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MLPerceptron:</span>
<span id="cb2-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_size, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>):</span>
<span id="cb2-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_size</span>
<span id="cb2-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learning_rate</span>
<span id="cb2-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epochs</span>
<span id="cb2-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sequential()</span>
<span id="cb2-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.add(Input((input_size,)))  </span>
<span id="cb2-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.add(Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tanh"</span>, ))  </span>
<span id="cb2-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.add(Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigmoid"</span>)) </span>
<span id="cb2-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(</span>
<span id="cb2-14">            loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"binary_crossentropy"</span>, optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"adam"</span>, metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accuracy"</span>]</span>
<span id="cb2-15">        )</span>
<span id="cb2-16"></span>
<span id="cb2-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, X, y):</span>
<span id="cb2-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.fit(X, y, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.epochs, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-19"></span>
<span id="cb2-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> predict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb2-21">        prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.predict(np.array([x]))</span>
<span id="cb2-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  </span></code></pre></div>
</div>
</section>
<section id="感知机的现代继承者" class="level3">
<h3 class="anchored" data-anchor-id="感知机的现代继承者">感知机的现代继承者</h3>
<p>虽然感知机本身不再是当前人工智能的核心技术，但它为后续技术的发展奠定了重要基础。现代深度学习模型（如卷积神经网络、循环神经网络）可以被视为感知机的扩展和进化。多层感知机推动了深度神经网络的研究热潮，尤其是在 2010 年代 GPU 计算力提升后，深度学习应用于图像识别、自然语言处理等领域。感知机的提出使得研究者开始探索机器如何<code>学习</code>这一基本问题，也激发了人工智能领域的快速发展。</p>
</section>
<section id="感知机的意义与启示" class="level3">
<h3 class="anchored" data-anchor-id="感知机的意义与启示">感知机的意义与启示</h3>
<p>感知机的历史体现了技术发展的非线性特性：早期的技术突破可能因为局限性而受到批评，但它们却是后续更复杂技术的基石。感知机虽然简单，但它的概念推动了我们对人类学习过程和计算机模拟的理解。虽然感知机的局限曾导致人工智能研究进入<code>低谷期</code>（AI冬天），但最终多层感知机证明了它的价值。</p>


<!-- -->

</section>

 ]]></description>
  <category>perceptron</category>
  <category>artificial neural network</category>
  <category>machine learning</category>
  <category>deep learning</category>
  <guid>https://leslie-lu.github.io/blog/2024/12/16/perceptron/</guid>
  <pubDate>Mon, 16 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://miro.medium.com/v2/resize:fit:828/format:webp/1*6OkGcBSlGpA5TtlRxhF6zA.png" medium="image" type="image/png"/>
</item>
<item>
  <title>DNAnexus 表型数据提取</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2024/12/11/table_exporter/</link>
  <description><![CDATA[ 





<p>自从 UK Biobank 数据必须在 DNAnexus 上操作后，我们不得不使用 UKB 的付费平台。DNAnexus 是一个功能强大的云平台，提供了多种工具来处理、分析和可视化大规模基因组数据。在研究中，表型数据（如疾病状态、实验测量值、临床记录等）是理解基因与环境因素相互作用的重要资源。DNAnexus 提供了 <code>Table Exporter</code> 工具以及 <code>dx extract_dataset</code>，帮助研究人员从数据库中高效提取表型数据，并将其导出为可分析的格式。</p>
<p>在这篇文章中，我们将介绍如何在 DNAnexus 上使用 Table Exporter 提取表型数据。</p>
<section id="table-exporter-简介" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="table-exporter-简介">Table Exporter 简介</h3>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412111909627.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Table Exporter</figcaption>
</figure>
</div>
<p>Table Exporter 是 DNAnexus 提供的一项功能，允许用户从项目中提取存储的表型数据，并根据需要导出为 CSV、TSV 或 SQL 格式的文件。这些文件可以包含参与者的各种表型信息，如年龄、性别、疾病状态、基因型等。该工具的灵活性使得它不仅适用于小规模数据提取，还能够处理大规模的数据集，支持定制化字段的选择，以及针对特定需求的格式化输出。</p>
</section>
<section id="如何使用-table-exporter-提取数据" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="如何使用-table-exporter-提取数据">如何使用 Table Exporter 提取数据</h3>
<section id="步骤-1登录-dnanexus-平台" class="level4">
<h4 class="anchored" data-anchor-id="步骤-1登录-dnanexus-平台">步骤 1：登录 DNAnexus 平台</h4>
<p>首先，确保你已经拥有 DNAnexus 帐号并登录。若没有帐户，可以在 DNAnexus 官方网站申请注册。登录后，你将进入 Project Dashboard，即你的项目仪表板。</p>
</section>
<section id="步骤-2选择项目" class="level4">
<h4 class="anchored" data-anchor-id="步骤-2选择项目">步骤 2：选择项目</h4>
<p>在仪表板中，选择包含你需要提取表型数据的项目。你可以选择已有的项目，或者新建一个项目。</p>
</section>
<section id="步骤-3配置-table-exporter" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="步骤-3配置-table-exporter">步骤 3：配置 Table Exporter</h4>
<p>在项目中找到 Table Exporter 工具，并点击进入配置界面。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412111911044.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Table Exporter 配置</figcaption>
</figure>
</div>
<p>在此界面中，你需要选择要导出的表型数据字段。这些字段通常是与研究目标相关的变量，例如： 年龄、性别、疾病状态、身高、体重等基本信息。Table Exporter 支持将数据导出为不同格式：CSV：适用于大多数数据分析工具（如 Excel、R、Python 等），能够以表格形式查看。TSV：适合更大数据量的处理，且与数据库中的表格数据兼容性更高。SQL：如果你希望导出为 SQL 查询格式，用于后续数据库查询，可以选择此格式。选择适合你需求的导出格式后，点击 Next 进入下一步。在导出时，Table Exporter 还提供了一些额外的输出选项：字段名称（Field Names）：你可以选择导出数据时是否包括字段名称作为表头。数据过滤（Data Filtering）：根据需要，可以设置过滤条件，仅导出符合条件的数据。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412111915368.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">advanced option</figcaption>
</figure>
</div>
<p>配置完成后，点击 Start Export 按钮，DNAnexus 将开始生成导出的数据文件。根据数据量的不同，可能需要一些时间来处理。你可以在 Job History（作业历史）中查看任务进度。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412111917226.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">job history</figcaption>
</figure>
</div>


<!-- -->

</section>
</section>

 ]]></description>
  <category>dnanexus</category>
  <category>phenotype</category>
  <category>table exporter</category>
  <guid>https://leslie-lu.github.io/blog/2024/12/11/table_exporter/</guid>
  <pubDate>Wed, 11 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412111909627.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Ubuntu 20.04 上安装 R</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2024/12/04/install_r_on_ubuntu/</link>
  <description><![CDATA[ 





<p>如果你是 Ubuntu 用户，并且打算安装 R 语言环境来进行数据分析、统计计算或者数据科学工作，本文将为你提供一个详细的安装步骤。</p>
<p>从下载源代码到配置必要的依赖项，我们将一步步带你完成整个过程。</p>
<section id="更新系统包管理器" class="level3">
<h3 class="anchored" data-anchor-id="更新系统包管理器">1. 更新系统包管理器</h3>
<p>首先，我们需要确保系统包管理器是最新的。运行以下命令来更新 APT 源，并执行系统的全面升级。</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt update</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt full-upgrade</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt autoremove</span></code></pre></div>
<p>这三条命令将会更新你的软件包列表，升级现有软件包，并移除不再需要的包，保持系统整洁。</p>
</section>
<section id="下载-r-源代码" class="level3">
<h3 class="anchored" data-anchor-id="下载-r-源代码">2. 下载 R 源代码</h3>
<p>由于 R 的最新版本可以通过源代码安装，这里我们选择手动下载 R 4.4.2 版本的源代码包，并解压。</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> https://cran.r-project.org/src/base/R-4/R-4.4.2.tar.gz</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-xvzf</span> R-4.4.2.tar.gz</span></code></pre></div>
<p>解压完成后，你会看到一个名为 R-4.4.2 的文件夹。</p>
</section>
<section id="安装必要的依赖项" class="level3">
<h3 class="anchored" data-anchor-id="安装必要的依赖项">3. 安装必要的依赖项</h3>
<p>R 的编译需要一些库和工具，所以需要先安装依赖项。运行以下命令来安装缺失的库：</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> libx11-dev libxext-dev libxmu-dev libxt-dev</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> libdeflate-dev texinfo texlive-base texlive-fonts-recommended texlive-fonts-extra texlive-latex-base texlive-latex-extra latexmk libcurl4-openssl-dev libxml2-dev libxt-dev pandoc ghostscript</span></code></pre></div>
</section>
<section id="编译-r" class="level3">
<h3 class="anchored" data-anchor-id="编译-r">4. 编译 R</h3>
<p>在安装完所有依赖项之后，我们可以开始编译 R。首先创建一个目录来存放 R 的安装文件：</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> ~/software/r/r-4.4.2</span></code></pre></div>
<p>然后进入到 R 的源代码目录，使用 <code>./configure</code> 命令来配置编译选项，然后使用 <code>make</code> 命令开始编译：</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> R-4.4.2/</span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./configure</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--prefix</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$HOME</span>/software/r/r-4.4.2</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span></span></code></pre></div>
<p>这一步可能需要一些时间，具体时间取决于你的机器配置。</p>
</section>
<section id="安装-java-环境可选" class="level3">
<h3 class="anchored" data-anchor-id="安装-java-环境可选">5. 安装 Java 环境（可选）</h3>
<p>如果你需要在 R 中运行与 Java 相关的功能，比如使用 rJava 包，可能需要安装 Java。可以运行以下命令来检查 Java 版本并安装 OpenJDK 11：</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">java</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-version</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install openjdk-11-jre-headless</span></code></pre></div>
<p>然后设置 Java 的环境变量：</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$JAVA_HOME</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> update-alternatives <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--config</span> java</span></code></pre></div>
<p>编辑 <code>~/.bashrc</code> 文件，添加 JAVA_HOME 变量的配置：</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vi</span> ~/.bashrc</span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 在文件末尾添加如下内容：</span></span>
<span id="cb8-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">JAVA_HOME</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/usr/lib/jvm/java-11-openjdk-amd64 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#具体路径根据你的安装路径而定</span></span>
<span id="cb8-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PATH</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$JAVA_HOME</span>/bin:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PATH</span></span></code></pre></div>
<p>保存并退出后，使用以下命令使更改生效：</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> ~/.bashrc</span></code></pre></div>
</section>
<section id="完成-r-安装" class="level3">
<h3 class="anchored" data-anchor-id="完成-r-安装">6. 完成 R 安装</h3>
<p>在完成所有必要的配置后，可以将 R 安装到指定目录。然后，进入到 <code>R-4.4.2</code> 的文件夹中，运行以下命令来安装 R：</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> make install</span></code></pre></div>
</section>
<section id="验证安装" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="验证安装">7. 验证安装</h3>
<p>安装完成后，可以通过运行以下命令来验证 R 是否安装成功：</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">R</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span></span></code></pre></div>
<p>如果返回的是 R 的版本信息，那么说明安装已经成功。</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412042352774.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">R 安装成功</figcaption>
</figure>
</div>


<!-- -->

</section>

 ]]></description>
  <category>r</category>
  <category>ubuntu</category>
  <category>linux</category>
  <guid>https://leslie-lu.github.io/blog/2024/12/04/install_r_on_ubuntu/</guid>
  <pubDate>Wed, 04 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412042352774.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Swiss Army Knife 工具运行 R 的 log 记录</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2024/12/03/DNAnexus_log/</link>
  <description><![CDATA[ 





<p>用 DNAnexus 平台上的 Swiss Army Knife 工具运行了下 R，记录下运行的 log。</p>
<p>这个日志记录了任务的执行过程，其中涉及到多个文件的下载、解压和执行。下面是对这个日志的详细解释：</p>
<section id="初始化日志记录" class="level4">
<h4 class="anchored" data-anchor-id="初始化日志记录">1. 初始化日志记录</h4>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Logging</span> initialized <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">priority</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Logging</span> initialized <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bulk</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span></code></pre></div>
<p>以上表示日志记录系统已经初始化，准备开始记录任务的执行情况。<code>priority</code> 和 <code>bulk</code> 表示不同级别或不同类型的日志记录。</p>
</section>
<section id="下载和解压文件" class="level4">
<h4 class="anchored" data-anchor-id="下载和解压文件">2. 下载和解压文件</h4>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Downloading</span> bundled file resources.tar.gz</span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> Unpacking <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">resources.tar.gz</span> to /</span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">tar:</span> Removing leading <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' from member names</span></span></code></pre></div>
<p>省略了一些类似的 log 输出，表明有多个文件（如 <code>resources.tar.gz</code>, <code>qctool.tar.gz</code>, <code>plink.tar.gz</code> 等）被依次下载并解压。<code>tar: Removing leading '/' from member names</code>：这是 <code>tar</code> 解压时的标准行为，表示会删除文件路径中的首个 <code>/</code>，避免解压到根目录（<code>/</code>）而覆盖系统文件。</p>
</section>
<section id="设置-ssh-公钥" class="level4">
<h4 class="anchored" data-anchor-id="设置-ssh-公钥">3. 设置 SSH 公钥</h4>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Setting</span> SSH public key</span></code></pre></div>
<p>这里系统设置了一个 SSH 公钥，可能用于与远程服务器的连接。</p>
</section>
<section id="安装和运行环境信息" class="level4">
<h4 class="anchored" data-anchor-id="安装和运行环境信息">4. 安装和运行环境信息</h4>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dxpy/0.385.0</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Linux-5.15.0-1072-aws-x86_64-with-glibc2.29</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Python/3.8.10</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span> running <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">job</span> ID job-xxxx<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span></code></pre></div>
<p><code>dxpy</code> 是用于与 DNAnexus 平台交互的 Python 库。运行环境是 Linux（版本 5.15.0-1072-aws），使用 Python 3.8.10。作业 ID 是 <code>job-xxxx</code>，表示当前任务在平台上的唯一标识符。</p>
</section>
<section id="下载文件到本地文件系统" class="level4">
<h4 class="anchored" data-anchor-id="下载文件到本地文件系统">5. 下载文件到本地文件系统</h4>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">downloading</span> file: file-xxxx to filesystem: /home/dnanexus/in/in/0/hello_world.r</span></code></pre></div>
<p>从 DNAnexus 平台下载了名为 <code>hello_world.r</code> 的文件，并将其保存到 <code>/home/dnanexus/in/in/0/</code> 目录。</p>
</section>
<section id="dxfuse-版本信息和文件系统守护进程" class="level4">
<h4 class="anchored" data-anchor-id="dxfuse-版本信息和文件系统守护进程">6. dxfuse 版本信息和文件系统守护进程</h4>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Using</span> dxfuse version v1.4.0</span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">The</span> log file is located at /root/.dxfuse/dxfuse.log</span>
<span id="cb6-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">starting</span> fs daemon</span>
<span id="cb6-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">wait</span> for ready</span>
<span id="cb6-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Daemon</span> started successfully</span></code></pre></div>
<p>使用 <code>dxfuse</code> （一个用于将 DNAnexus 文件系统挂载到本地文件系统的工具）版本 1.4.0。启动了文件系统守护进程，用于与 DNAnexus 文件系统进行交互。</p>
</section>
<section id="下载文件使用多个线程" class="level4">
<h4 class="anchored" data-anchor-id="下载文件使用多个线程">7. 下载文件使用多个线程</h4>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Downloading</span> files using 4 threads+ [[ <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span> == <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span> ]]</span></code></pre></div>
<p>文件的下载是并行进行的，使用了 4 个线程来加速下载。</p>
</section>
<section id="执行-r-脚本" class="level4">
<h4 class="anchored" data-anchor-id="执行-r-脚本">8. 执行 R 脚本</h4>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> eval <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rscript hello_world.r'</span></span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">++</span> Rscript hello_world.r</span>
<span id="cb8-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[1]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!"</span></span></code></pre></div>
<p>执行了 R 脚本 hello_world.r，并成功输出了 “Hello, world!”，表明脚本运行成功。</p>
</section>
<section id="完成任务" class="level4">
<h4 class="anchored" data-anchor-id="完成任务">9. 完成任务</h4>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">+</span> set +x</span></code></pre></div>
<p>这是一个 Shell 命令，表示关闭命令回显模式。+x 表示在执行时打印每条命令的详细信息，关闭后将不再显示。</p>


<!-- -->

</section>

 ]]></description>
  <category>dnanexus</category>
  <category>r</category>
  <category>log</category>
  <category>swiss army knife</category>
  <guid>https://leslie-lu.github.io/blog/2024/12/03/DNAnexus_log/</guid>
  <pubDate>Tue, 03 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://cdn.jsdelivr.net/gh/Leslie-Lu/WeChatOfficialAccount/img/202412032312284.png" medium="image" type="image/png"/>
</item>
<item>
  <title>使用 SAIGE 进行 GWAS 分析的详细流程</title>
  <dc:creator>Zhen Lu</dc:creator>
  <link>https://leslie-lu.github.io/blog/2024/12/02/SAIGE_GWAS/</link>
  <description><![CDATA[ 





<p><a href="https://documentation.dnanexus.com/science/scientific-guides/saige-gwas-walkthrough" title="SAIGE GWAS">本文</a>介绍如何基于 UK Biobank 数据和 DNAnexus 平台，使用 <strong>SAIGE</strong> 工具在大规模基因组关联研究（GWAS）中分析遗传变异与性状之间的关联。SAIGE 的简要介绍参考<a href="https://mp.weixin.qq.com/s/pCfu0tJxvvRIHqtbK9eSug">这里</a>。</p>
<section id="流程概览" class="level3">
<h3 class="anchored" data-anchor-id="流程概览"><strong>流程概览</strong></h3>
<p>SAIGE GWAS 分析分为以下步骤：</p>
<ol type="1">
<li><strong>准备数据：合并自测基因型数据</strong></li>
<li><strong>生成 GRM 模型和方差比文件</strong></li>
<li><strong>执行单变异关联测试</strong></li>
<li><strong>（可选）合并结果文件</strong></li>
</ol>
</section>
<section id="step-1-合并自测基因型数据" class="level3">
<h3 class="anchored" data-anchor-id="step-1-合并自测基因型数据"><strong>Step 1: 合并自测基因型数据</strong></h3>
<p>在第一步中，我们将 22 条常染色体的基因型数据文件合并为 PLINK 格式的文件集（<code>.bim</code>, <code>.bed</code>, <code>.fam</code>），为后续分析生成输入文件。</p>
<section id="使用-swiss-army-knife-sak-应用" class="level4">
<h4 class="anchored" data-anchor-id="使用-swiss-army-knife-sak-应用"><strong>使用 Swiss Army Knife (SAK) 应用</strong></h4>
<p>在 DNAnexus 平台上，使用 <strong>Swiss Army Knife (SAK)</strong> 应用完成文件合并：</p>
<ol type="1">
<li><strong>输入文件</strong>：上传或选择包含染色体 1 至 22 的 PLINK 文件。</li>
<li><strong>命令行代码</strong>：</li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.bed <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sed</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s/.bed//g'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> files_to_merge.txt<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">plink</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--merge-list</span> files_to_merge.txt <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--make-bed</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--out</span> ukb_cal_chr1_22_v2_merged<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> files_to_merge.txt<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span></code></pre></div>
<p>这段代码会创建一个包含所有待合并文件的列表，并使用 PLINK 将其合并为单一文件集。</p>
<ol start="3" type="1">
<li><strong>输出</strong>：<code>ukb_cal_chr1_22_v2_merged.bed</code>、<code>.bim</code>&nbsp;和&nbsp;<code>.fam</code>&nbsp;文件，作为下一步的输入。</li>
</ol>
</section>
</section>
<section id="step-2-生成-grm-模型和方差比文件" class="level3">
<h3 class="anchored" data-anchor-id="step-2-生成-grm-模型和方差比文件"><strong>Step 2: 生成 GRM 模型和方差比文件</strong></h3>
<p>使用 <strong><code>saige_gwas_grm</code></strong> 应用生成遗传相关矩阵（GRM）模型文件和方差比文件。这些文件用于混合模型的拟合和关联测试。</p>
<section id="输入文件" class="level4">
<h4 class="anchored" data-anchor-id="输入文件"><strong>输入文件</strong></h4>
<ol type="1">
<li><p><strong>PLINK 文件集</strong>：<code>ukb_cal_chr1_22_v2_merged</code> 文件。</p></li>
<li><p><strong>表型文件</strong>：包含样本 ID、表型和协变量（如性别、年龄）的文件，要求与基因型数据匹配。</p></li>
</ol>
</section>
<section id="命令实例" class="level4">
<h4 class="anchored" data-anchor-id="命令实例">命令实例</h4>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dx</span> run saige_gwas_grm <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-igenotype_file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ukb_cal_chr1_22_v2_merged.bed <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-iphenotype_file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>phenotype.txt <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-icovariate_columns</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>age,sex <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-imem_instance</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mem3_ssd1_v2_x32</span></code></pre></div>
</section>
</section>
<section id="step-3-执行单变异关联测试" class="level3">
<h3 class="anchored" data-anchor-id="step-3-执行单变异关联测试"><strong>Step 3: 执行单变异关联测试</strong></h3>
<p>单变异关联测试使用 <strong><code>saige_gwas_svat</code></strong> 应用逐染色体进行分析，计算每个变异与表型之间的关联。</p>
<section id="批量运行" class="level4">
<h4 class="anchored" data-anchor-id="批量运行"><strong>批量运行</strong></h4>
<p>对于 UK Biobank 数据，每条染色体的数据存储在单独的 BGEN 文件中，可以使用批量模式运行：</p>
<ol type="1">
<li><p><strong>选择 BGEN 文件和索引文件</strong>：每条染色体的 <strong><code>.bgen</code></strong> 和 <strong><code>.bgen.bgi</code></strong> 文件。</p></li>
<li><p><strong>运行命令</strong>：</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dx</span> run saige_gwas_svat <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-igenotypes_bgen</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chr<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.bgen <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-igenotypes_bgen_index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chr<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.bgen.bgi <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-imodel_rda</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model.rda <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-ivariance_ratio_txt</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>variance_ratio.txt <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-iphenotype_file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>phenotype.txt <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-imem_instance</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mem3_ssd3_v2_x24</span></code></pre></div></li>
</ol>
</section>
<section id="输出文件" class="level4">
<h4 class="anchored" data-anchor-id="输出文件"><strong>输出文件</strong></h4>
<ul>
<li>每条染色体的关联结果文件，例如：<code>saige_step2_ukb_imp_chr1_v3.txt</code>。</li>
</ul>
</section>
</section>
<section id="step-4-合并结果文件" class="level3">
<h3 class="anchored" data-anchor-id="step-4-合并结果文件"><strong>Step 4: 合并结果文件</strong></h3>
<p>可选地将所有染色体的结果文件合并为单一文件，以便进一步分析（如显著性筛选和孟德尔随机化分析）。</p>
<section id="使用-sak-应用" class="level4">
<h4 class="anchored" data-anchor-id="使用-sak-应用"><strong>使用 SAK 应用</strong></h4>
<p>在 SAK 的命令行中执行以下代码：</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span> saige_step2_ukb_imp_chr1_v3.txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> saige_step2_ukb_imp_all_chr.txt<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> +2 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-q</span> saige_step2_ukb_imp_chr<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>_v3.txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> saige_step2_ukb_imp_all_chr.txt<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gzip</span> saige_step2_ukb_imp_all_chr.txt<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span></code></pre></div>
</section>
</section>
<section id="后续分析" class="level3">
<h3 class="anchored" data-anchor-id="后续分析"><strong>后续分析</strong></h3>
<ol type="1">
<li><p><strong>显著性筛选</strong>：根据 GWAS 的统计学标准筛选显著变异（如 p 值 &lt;5×10<sup>−8</sup>）。</p></li>
<li><p><strong>下游分析</strong>：</p></li>
</ol>
<ul>
<li>使用显著变异进行孟德尔随机化分析。</li>
<li>进行生物学功能注释，识别潜在的致病基因或路径。</li>
</ul>


<!-- -->

</section>

 ]]></description>
  <category>saige</category>
  <category>gwas</category>
  <category>genomics</category>
  <guid>https://leslie-lu.github.io/blog/2024/12/02/SAIGE_GWAS/</guid>
  <pubDate>Mon, 02 Dec 2024 00:00:00 GMT</pubDate>
  <media:content url="https://saigegit.github.io/SAIGE-doc/assets/img/saige-siage-gene-outline.png" medium="image" type="image/png"/>
</item>
</channel>
</rss>
